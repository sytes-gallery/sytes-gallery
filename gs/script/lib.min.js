var JSON; if (!JSON) { JSON = {} } (function () { function f(n) { return n < 10 ? "0" + n : n } if (typeof Date.prototype.toJSON !== "function") { Date.prototype.toJSON = function (key) { return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null }; String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) { return this.valueOf() } } var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\" }, rep; function quote(string) { escapable.lastIndex = 0; return escapable.test(string) ? '"' + string.replace(escapable, function (a) { var c = meta[a]; return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4) }) + '"' : '"' + string + '"' } function str(key, holder) { var i, k, v, length, mind = gap, partial, value = holder[key]; if (value && typeof value === "object" && typeof value.toJSON === "function") { value = value.toJSON(key) } if (typeof rep === "function") { value = rep.call(holder, key, value) } switch (typeof value) { case "string": return quote(value); case "number": return isFinite(value) ? String(value) : "null"; case "boolean": case "null": return String(value); case "object": if (!value) { return "null" } gap += indent; partial = []; if (Object.prototype.toString.apply(value) === "[object Array]") { length = value.length; for (i = 0; i < length; i += 1) { partial[i] = str(i, value) || "null" } v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]"; gap = mind; return v } if (rep && typeof rep === "object") { length = rep.length; for (i = 0; i < length; i += 1) { if (typeof rep[i] === "string") { k = rep[i]; v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ": " : ":") + v) } } } } else { for (k in value) { if (Object.prototype.hasOwnProperty.call(value, k)) { v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ": " : ":") + v) } } } } v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}"; gap = mind; return v } } if (typeof JSON.stringify !== "function") { JSON.stringify = function (value, replacer, space) { var i; gap = ""; indent = ""; if (typeof space === "number") { for (i = 0; i < space; i += 1) { indent += " " } } else { if (typeof space === "string") { indent = space } } rep = replacer; if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) { throw new Error("JSON.stringify") } return str("", { "": value }) } } if (typeof JSON.parse !== "function") { JSON.parse = function (text, reviver) { var j; function walk(holder, key) { var k, v, value = holder[key]; if (value && typeof value === "object") { for (k in value) { if (Object.prototype.hasOwnProperty.call(value, k)) { v = walk(value, k); if (v !== undefined) { value[k] = v } else { delete value[k] } } } } return reviver.call(holder, key, value) } text = String(text); cx.lastIndex = 0; if (cx.test(text)) { text = text.replace(cx, function (a) { return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4) }) } if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) { j = eval("(" + text + ")"); return typeof reviver === "function" ? walk({ "": j }, "") : j } throw new SyntaxError("JSON.parse") } } }());
(function (a, y, r) { if (y && y.views || a.jsviews) { return } var ah = "v1.0.0-beta", N, ad, u, z, p = "{", o = "{", g = "}", f = "}", Z = "^", A = /^(?:null|true|false|\d[\d.]*|([\w$]+|\.|~([\w$]+)|#(view|([\w$]+))?)([\w$.^]*?)(?:[.[^]([\w$]+)\]?)?)$/g, aa = /(\()(?=\s*\()|(?:([([])\s*)?(?:([#~]?[\w$.^]+)?\s*((\+\+|--)|\+|-|&&|\|\||===|!==|==|!=|<=|>=|[<>%*!:?\/]|(=))\s*|([#~]?[\w$.^]+)([([])?)|(,\s*)|(\(?)\\?(?:(')|("))|(?:\s*(([)\]])(?=\s*\.|\s*\^)|[)\]])([([]?))|(\s+)/g, U = /\s*\n/g, e = /\\(['"])/g, af = /['"\\]/g, q = /\x08(~)?([^\x08]+)\x08/g, l = /^if\s/, t = /<(\w+)[>\s]/, P = /[\x00`><"'&]/g, K = P, ai = 0, ag = 0, M = { "&": "&amp;", "<": "&lt;", ">": "&gt;", "\x00": "&#0;", "'": "&#39;", '"': "&#34;", "`": "&#96;" }, X = "data-jsv-tmpl", Q = {}, T = { template: { compile: b }, tag: { compile: s }, helper: {}, converter: {} }, O = { jsviews: ah, render: Q, settings: { delimiters: w, debugMode: true, tryCatch: true }, sub: { View: ae, Error: F, tmplFn: D, parse: x, extend: v, error: H, syntaxError: S }, _cnvt: I, _tag: c, _err: function (aj) { return V.debugMode ? ("Error: " + (aj.message || aj)) + ". " : "" } }; function F(ak, aj) { if (aj && aj.onError) { if (aj.onError(ak) === false) { return } } this.name = "JsRender Error"; this.message = ak || "JsRender error" } function v(al, ak) { var aj; al = al || {}; for (aj in ak) { al[aj] = ak[aj] } return al } (F.prototype = new Error()).constructor = F; function w(aj, al, ak) { if (!W.rTag || arguments.length) { p = aj ? aj.charAt(0) : p; o = aj ? aj.charAt(1) : o; g = al ? al.charAt(0) : g; f = al ? al.charAt(1) : f; Z = ak || Z; aj = "\\" + p + "(\\" + Z + ")?\\" + o; al = "\\" + g + "\\" + f; u = "(?:(?:(\\w+(?=[\\/\\s\\" + g + "]))|(?:(\\w+)?(:)|(>)|!--((?:[^-]|-(?!-))*)--|(\\*)))\\s*((?:[^\\" + g + "]|\\" + g + "(?!\\" + f + "))*?)"; W.rTag = u + ")"; u = new RegExp(aj + u + "(\\/)?|(?:\\/(\\w+)))" + al, "g"); z = new RegExp("<.*>|([^\\\\]|^)[{}]|" + aj + ".*" + al) } return [p, o, g, f, Z] } function L(an, ap) { if (!ap) { ap = an; an = r } var am, ao, al, aq, ak = this, aj = !ap || ap === "root"; if (an) { aq = ak.type === ap ? ak : r; if (!aq) { am = ak.views; if (ak._.useKey) { for (ao in am) { if (aq = am[ao].get(an, ap)) { break } } } else { for (ao = 0, al = am.length; !aq && ao < al; ao++) { aq = am[ao].get(an, ap) } } } } else { if (aj) { while (ak.parent.parent) { aq = ak = ak.parent } } else { while (ak && !aq) { aq = ak.type === ap ? ak : r; ak = ak.parent } } } return aq } function J() { var aj = this.get("item"); return aj ? aj.index : r } J.depends = function () { return [this.get("item"), "index"] }; function Y(am) { var ak, aj = this, al = (aj.ctx || {})[am]; al = al === r ? aj.getRsc("helpers", am) : al; if (al) { if (typeof al === "function") { ak = function () { return al.apply(aj, arguments) }; v(ak, al) } } return ak || al } function I(ao, am, an) { var al, ak, aq, ap = +an === an && an, aj = am.linkCtx; if (ap) { an = (ap = am.tmpl.bnds[ap - 1])(am.data, am, O) } aq = an.args[0]; if (ao || ap) { ak = aj && aj.tag || { _: { inline: !aj }, tagName: ao + ":", flow: true, _is: "tag" }; ak._.bnd = ap; if (aj) { aj.tag = ak; ak.linkCtx = aj; an.ctx = ac(an.ctx, aj.view.ctx) } ak.tagCtx = an; an.view = am; ak.ctx = an.ctx || {}; delete an.ctx; am._.tag = ak; ao = ao !== "true" && ao; if (ao && ((al = am.getRsc("converters", ao)) || H("Unknown converter: {{" + ao + ":"))) { ak.depends = al.depends; aq = al.apply(ak, an.args) } aq = ap && am._.onRender ? am._.onRender(aq, am, ap) : aq; am._.tag = r } return aq } function B(am, an) { var al, aj = this, ak = O[am]; al = ak && ak[an]; while ((al === r) && aj) { ak = aj.tmpl[am]; al = ak && ak[an]; aj = aj.parent } return al } function c(al, an, aq, ar) { var aG, aH, au, ax, aB, aC, az, aE, at, aj, aA, aD, ap, av, aF = "", ao = +ar === ar && ar, am = an.linkCtx || 0, ay = an.ctx, ak = aq || an.tmpl, aw = an._; if (al._is === "tag") { aH = al; al = aH.tagName } if (ao) { ar = (aD = ak.bnds[ao - 1])(an.data, an, O) } az = ar.length; aH = aH || am.tag; for (aC = 0; aC < az; aC++) { at = ar[aC]; aA = at.tmpl; aA = at.content = aA && ak.tmpls[aA - 1]; aq = at.props.tmpl; if (!aC && (!aq || !aH)) { ap = an.getRsc("tags", al) || H("Unknown tag: {{" + al + "}}") } aq = aq || (aH ? aH._def : ap).template || aA; aq = "" + aq === aq ? an.getRsc("templates", aq) || G(aq) : aq; v(at, { tmpl: aq, render: n, index: aC, view: an, ctx: ac(at.ctx, ay) }); if (!aH) { if (ap._ctr) { aH = new ap._ctr(); av = !!aH.init; aH.attr = aH.attr || ap.attr || r } else { aH = { render: ap.render } } aH._ = { inline: !am }; if (am) { am.attr = aH.attr = am.attr || aH.attr; am.tag = aH; aH.linkCtx = am } if (aH._.bnd = aD || am) { aH._.arrVws = {} } aH.tagName = al; aH.parent = aB = ay && ay.tag; aH._is = "tag"; aH._def = ap } aw.tag = aH; at.tag = aH; aH.tagCtxs = ar; if (!aH.flow) { aj = at.ctx = at.ctx || {}; au = aH.parents = aj.parentTags = ay && ac(aj.parentTags, ay.parentTags) || {}; if (aB) { au[aB.tagName] = aB } aj.tag = aH } } aH.rendering = {}; for (aC = 0; aC < az; aC++) { at = aH.tagCtx = ar[aC]; aH.ctx = at.ctx; if (!aC && av) { aH.init(at, am, aH.ctx); av = r } if (aG = aH.render) { aE = aG.apply(aH, at.args) } aF += aE !== r ? aE : at.tmpl ? at.render() : "" } delete aH.rendering; aH.tagCtx = aH.tagCtxs[0]; aH.ctx = aH.tagCtx.ctx; if (aH._.inline && (ax = aH.attr) && ax !== "html") { aF = ax === "text" ? ab.html(aF) : "" } return ao && an._.onRender ? an._.onRender(aF, an, ao) : aF } function ae(aj, ao, av, ak, ap, aq, au, ax) { var ar, an, aw, am = ao === "array", al = { key: 0, useKey: am ? 0 : 1, id: "" + ag++, onRender: ax, bnds: {} }, at = { data: ak, tmpl: ap, content: au, views: am ? [] : {}, parent: av, ctx: aj, type: ao, get: L, getIndex: J, getRsc: B, hlp: Y, _: al, _is: "view" }; if (av) { ar = av.views; an = av._; if (an.useKey) { ar[al.key = "_" + an.useKey++] = at; aw = an.tag; al.bnd = am && (!aw || !!aw._.bnd && aw) } else { ar.splice(al.key = at.index = aq !== r ? aq : ar.length, 0, at) } at.ctx = aj || av.ctx } return at } function m(an) { var aj, ao, ak, al, am; for (aj in T) { al = T[aj]; if ((am = al.compile) && (ao = an[aj + "s"])) { for (ak in ao) { ao[ak] = am(ak, ao[ak], an, aj, al) } } } } function s(ak, am, al) { var an, aj; if (typeof am === "function") { am = { depends: am.depends, render: am } } else { if (aj = am.template) { am.template = "" + aj === aj ? (G[aj] || G(aj)) : aj } if (am.init !== false) { an = am._ctr = function (ao) { }; (an.prototype = am).constructor = an } } if (al) { am._parentTmpl = al } return am } function b(aj, ap, aq, ao, ak, ar) { function am(at) { if (("" + at === at) || at.nodeType > 0) { try { al = at.nodeType > 0 ? at : !z.test(at) && y && y(a.document).find(at)[0] } catch (au) { } if (al) { at = al.getAttribute(X); aj = aj || at; at = G[at]; if (!at) { aj = aj || "_" + ai++; al.setAttribute(X, aj); at = G[aj] = b(aj, al.innerHTML, aq, ao, ak, ar) } } return at } } var an, al; ap = ap || ""; an = am(ap); ar = ar || (ap.markup ? ap : {}); ar.tmplName = aj; if (aq) { ar._parentTmpl = aq } if (!an && ap.markup && (an = am(ap.markup))) { if (an.fn && (an.debug !== ap.debug || an.allowCode !== ap.allowCode)) { an = an.markup } } if (an !== r) { if (aj && !aq) { Q[aj] = function () { return ap.render.apply(ap, arguments) } } if (an.fn || ap.fn) { if (an.fn) { if (aj && aj !== an.tmplName) { ap = ac(ar, an) } else { ap = an } } } else { ap = h(an, ar); D(an, ap) } m(ar); return ap } } function h(am, an) { var aj, ak = V.wrapMap || {}, al = v({ markup: am, tmpls: [], links: {}, tags: {}, bnds: [], _is: "template", render: n }, an); if (!an.htmlTag) { aj = t.exec(am); al.htmlTag = aj ? aj[1].toLowerCase() : "" } aj = ak[al.htmlTag]; if (aj && aj !== ak.div) { al.markup = N.trim(al.markup); al._elCnt = true } return al } function d(al, ak) { function am(an, ap, au) { var ao, at, ar, aq; if (an && "" + an !== an && !an.nodeType && !an.markup) { for (ar in an) { am(ar, an[ar], ap) } return O } if (ap === r) { ap = an; an = r } if (an && "" + an !== an) { au = ap; ap = an; an = r } aq = au ? au[aj] = au[aj] || {} : am; at = ak.compile; if (ao = W.onBeforeStoreItem) { at = ao(aq, an, ap, at) || at } if (!an) { ap = at(r, ap) } else { if (ap === null) { delete aq[an] } else { aq[an] = at ? (ap = at(an, ap, au, al, ak)) : ap } } if (ap) { ap._is = al } if (ao = W.onStoreItem) { ao(aq, an, ap, at) } return ap } var aj = al + "s"; O[aj] = am; T[al] = ak } function n(aE, al, am, aF, ao, an) { var az, ay, aq, aB, aD, aw, av, ar, ak, aC, aA, aj, ap, ax = this, au = !ax.attr || ax.attr === "html", at = ""; if (aF === true) { av = true; aF = 0 } if (ax.tag) { ar = ax; ax = ax.tag; aC = ax._; aj = ax.tagName; ap = ar.tmpl; al = ac(al, ax.ctx); ak = ar.content; if (ar.props.link === false) { al = al || {}; al.link = false } am = am || ar.view; aE = aE === r ? am : aE } else { ap = ax.jquery && (ax[0] || H('Unknown template: "' + ax.selector + '"')) || ax } if (ap) { if (!am && aE && aE._is === "view") { am = aE } if (am) { ak = ak || am.content; an = an || am._.onRender; if (aE === am) { aE = am.data; ao = true } al = ac(al, am.ctx) } if (!am || am.data === r) { (al = al || {}).root = aE } if (!ap.fn) { ap = G[ap] || G(ap) } if (ap) { an = (al && al.link) !== false && au && an; aA = an; if (an === true) { aA = r; an = am._.onRender } if (N.isArray(aE) && !ao) { aB = av ? am : (aF !== r && am) || ae(al, "array", am, aE, ap, aF, ak, an); for (az = 0, ay = aE.length; az < ay; az++) { aq = aE[az]; aD = ae(al, "item", aB, aq, ap, (aF || 0) + az, ak, an); aw = ap.fn(aq, aD, O); at += aB._.onRender ? aB._.onRender(aw, aD) : aw } } else { aB = av ? am : ae(al, aj || "data", am, aE, ap, aF, ak, an); if (aC && !ax.flow) { aB.tag = ax } at += ap.fn(aE, aB, O) } return aA ? aA(at, aB) : at } } return "" } function H(aj) { throw new O.sub.Error(aj) } function S(aj) { H("Syntax error\n" + aj) } function D(ax, at, aw, ao) { function al(ay) { ay -= an; if (ay) { aq.push(ax.substr(an, ay).replace(U, "\\n")) } } function av(ay) { ay && S('Unmatched or missing tag: "{{/' + ay + '}}" in template:\n' + ax) } function aj(aC, aQ, aD, aN, aL, aG, aA, aK, aM, aI, aP, aE) { if (aG) { aL = ":"; aN = "html" } aI = aI || aw; var ay, aH, aO = aQ && [], az = "", aB = "", aJ = "", aF = !aI && !aL && !aA; aD = aD || aL; al(aE); an = aE + aC.length; if (aK) { if (am) { aq.push(["*", "\n" + aM.replace(e, "$1") + "\n"]) } } else { if (aD) { if (aD === "else") { if (l.test(aM)) { S('for "{{else if expr}}" use "{{else expr}}"') } aO = ap[6]; ap[7] = ax.substring(ap[7], aE); ap = ar.pop(); aq = ap[3]; aF = true } if (aM) { aM = aM.replace(U, " "); az = x(aM, aO, at).replace(q, function (aR, aS, aT) { if (aS) { aJ += aT + "," } else { aB += aT + "," } return "" }) } aB = aB.slice(0, -1); az = az.slice(0, -1); ay = aB && (aB.indexOf("noerror:true") + 1) && aB || ""; au = [aD, aN || !!ao || "", az, aF && [], 'params:"' + aM + '",props:{' + aB + "}" + (aJ ? ",ctx:{" + aJ.slice(0, -1) + "}" : ""), ay, aO || 0]; aq.push(au); if (aF) { ar.push(ap); ap = au; ap[7] = an } } else { if (aP) { aH = ap[0]; av(aP !== aH && aH !== "else" && aP); ap[7] = ax.substring(ap[7], aE); ap = ar.pop() } } } av(!ap && aP); aq = ap[3] } var au, am = at && at.allowCode, ak = [], an = 0, ar = [], aq = ak, ap = [, , , ak]; ax = ax.replace(af, "\\$&"); av(ar[0] && ar[0][3].pop()[0]); ax.replace(u, aj); al(ax.length); if (an = ak[ak.length - 1]) { av("" + an !== an && (+an[7] === an[7]) && an[0]) } return C(ak, aw ? ax : at, aw) } function C(ax, az, aw) { var aI, aC, ar, aO, aN, ap, aR, ao, aF, aq, aB, al, aP, at, ak, au, aG, aE, aK, av, an, aJ, aQ, aA, aH, aM = 0, am = "", aj = "", ay = {}, aD = ax.length; if ("" + az === az) { ak = aw ? 'data-link="' + az.replace(U, " ").slice(1, -1) + '"' : az; az = 0 } else { ak = az.tmplName || "unnamed"; if (az.allowCode) { ay.allowCode = true } if (az.debug) { ay.debug = true } al = az.bnds; at = az.tmpls } for (aI = 0; aI < aD; aI++) { aC = ax[aI]; if ("" + aC === aC) { am += '\nret+="' + aC + '";' } else { ar = aC[0]; if (ar === "*") { am += "" + aC[1] } else { aO = aC[1]; aN = aC[2]; aE = aC[3]; ap = aC[4]; aj = aC[5]; aK = aC[7]; if (!(aJ = ar === "else")) { aM = 0; if (al && (aP = aC[6])) { aM = al.push(aP) } } if (aQ = ar === ":") { if (aO) { ar = aO === "html" ? ">" : aO + ar } if (aj) { aA = "prm" + aI; aj = "try{var " + aA + "=[" + aN + "][0];}catch(e){" + aA + '="";}\n'; aN = aA } } else { if (aE) { au = h(aK, ay); au.tmplName = ak + "/" + ar; C(aE, au); at.push(au) } if (!aJ) { aG = ar; an = am; am = "" } av = ax[aI + 1]; av = av && av[0] === "else" } ap += ",args:[" + aN + "]}"; if (aQ && aP || aO && ar !== ">") { aH = new Function("data,view,j,u", " // " + ak + " " + aM + " " + ar + "\n" + aj + "return {" + ap + ";"); aH.paths = aP; aH._ctxs = ar; if (aw) { return aH } aB = 1 } am += (aQ ? "\n" + (aP ? "" : aj) + (aw ? "return " : "ret+=") + (aB ? (aB = 0, aq = true, 'c("' + aO + '",view,' + (aP ? ((al[aM - 1] = aH), aM) : "{" + ap) + ");") : ar === ">" ? (ao = true, "h(" + aN + ");") : (aF = true, "(v=" + aN + ")!=" + (aw ? "=" : "") + 'u?v:"";')) : (aR = true, "{tmpl:" + (aE ? at.length : "0") + "," + ap + ",")); if (aG && !av) { am = "[" + am.slice(0, -1) + "]"; if (aw || aP) { am = new Function("data,view,j,u", " // " + ak + " " + aM + " " + aG + "\nreturn " + am + ";"); if (aP) { (al[aM - 1] = am).paths = aP } am._ctxs = ar; if (aw) { return am } } am = an + '\nret+=t("' + aG + '",view,this,' + (aM || am) + ");"; aP = 0; aG = 0 } } } } am = "// " + ak + "\nvar j=j||" + (y ? "jQuery." : "js") + "views" + (aF ? ",v" : "") + (aR ? ",t=j._tag" : "") + (aq ? ",c=j._cnvt" : "") + (ao ? ",h=j.converters.html" : "") + (aw ? ";\n" : ',ret="";\n') + (V.tryCatch ? "try{\n" : "") + (ay.debug ? "debugger;" : "") + am + (aw ? "\n" : "\nreturn ret;\n") + (V.tryCatch ? "\n}catch(e){return j._err(e);}" : ""); try { am = new Function("data,view,j,u", am) } catch (aL) { S("Compiled template code:\n\n" + am, aL) } if (az) { az.fn = am } return am } function x(ao, ak, au) { function av(ay, aP, aA, aH, aF, aB, aQ, aw, aG, aO, aN, aJ, aM, aD, aK, az, aL, aC, aE) { var ax; aF = aF || ""; aA = aA || aP || aN; aH = aH || aw; aG = aG || az || ""; function aI(aU, aT, aW, aR, aY, aX, aV) { if (aT) { ak && !aq && ak.push(aH); if (aT !== ".") { var aS = (aW ? 'view.hlp("' + aW + '")' : aR ? "view" : "data") + (aV ? (aY ? "." + aY : aW ? "" : (aR ? "" : "." + aT)) + (aX || "") : (aV = aW ? "" : aR ? aY || "" : aT, "")); aS = aS + (aV ? "." + aV : ""); return aS.slice(0, 9) === "view.data" ? aS.slice(5) : aS } } return aU } if (aB) { S(ao) } else { if (ak && aK) { ax = at[al]; if (aE.length - 2 > aC - ax) { ax = aE.slice(ax, aC + 1); aK = o + ":" + ax + g; aK = am[aK] = am[aK] || D(p + aK + f, au, true); if (!aK.paths) { x(ax, aK.paths = [], au) } ak.push({ _jsvOb: aK }) } } return (ar ? (ar = !aJ, (ar ? ay : '"')) : an ? (an = !aM, (an ? ay : '"')) : ((aA ? (al++, at[al] = aC++, aA) : "") + (aL ? (al ? "" : ap ? (ap = aq = false, "\b") : ",") : aQ ? (al && S(ao), ap = aH, aq = aH.charAt(0) === "~", "\b" + aH + ":") : aH ? (aH.split("^").join(".").replace(A, aI) + (aG ? (aj[++al] = true, aH.charAt(0) !== "." && (at[al] = aC), aG) : aF)) : aF ? aF : aD ? ((aj[al--] = false, aD) + (aG ? (aj[++al] = true, aG) : "")) : aO ? (aj[al] || S(ao), ",") : aP ? "" : (ar = aJ, an = aM, '"')))) } } var ap, aq, am = au.links, aj = {}, at = { 0: -1 }, al = 0, an = false, ar = false; return (ao + " ").replace(aa, av) } function ac(ak, aj) { return ak && ak !== aj ? (aj ? v(v({}, aj), ak) : ak) : aj && v({}, aj) } function j(aj) { return M[aj] || (M[aj] = "&#" + aj.charCodeAt(0) + ";") } for (ad in T) { d(ad, T[ad]) } var G = O.templates, ab = O.converters, E = O.helpers, R = O.tags, W = O.sub, V = O.settings; if (y) { N = y; N.fn.render = n } else { N = a.jsviews = {}; N.isArray = Array && Array.isArray || function (aj) { return Object.prototype.toString.call(aj) === "[object Array]" } } N.render = Q; N.views = O; N.templates = G = O.templates; R({ "else": function () { }, "if": { render: function (al) { var aj = this, ak = (aj.rendering.done || !al && (arguments.length || !aj.tagCtx.index)) ? "" : (aj.rendering.done = true, aj.selected = aj.tagCtx.index, aj.tagCtx.render()); return ak }, onUpdate: function (an, am, al) { var ak, aj, ao; for (ak = 0; (aj = this.tagCtxs[ak]) && aj.args.length; ak++) { aj = aj.args[0]; ao = !aj !== !al[ak].args[0]; if (!!aj || ao) { return ao } } return false }, flow: true }, "for": { render: function (ao) { var am = this, al = am.tagCtx, an = !arguments.length, aj = "", ak = an || 0; if (!am.rendering.done) { if (an) { aj = r } else { if (ao !== r) { aj += al.render(ao); ak += N.isArray(ao) ? ao.length : 1 } } if (am.rendering.done = ak) { am.selected = al.index } } return aj }, onArrayChange: function (am, ak) { var al, aj = this, an = ak.change; if (this.tagCtxs[1] && (an === "insert" && am.target.length === ak.items.length || an === "remove" && !am.target.length || an === "refresh" && !ak.oldItems.length !== !am.target.length)) { this.refresh() } else { for (al in aj._.arrVws) { al = aj._.arrVws[al]; if (al.data === am.target) { al._.onArrayChange.apply(al, arguments) } } } am.done = true }, flow: true }, include: { flow: true }, "*": { render: function (aj) { return aj }, flow: true } }); ab({ html: function (aj) { return aj != r ? String(aj).replace(K, j) : "" }, attr: function (aj) { return aj != r ? String(aj).replace(P, j) : aj === null ? null : "" }, url: function (aj) { return aj != r ? encodeURI(String(aj)) : aj === null ? null : "" } }); w() })(this, this.jQuery);
(function (g) { var h = /^[\],:{}\s]*$/; var n = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g; var m = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g; var d = /(?:^|:|,)(?:\s*\[)+/g; var a = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:[.,]\d+)?Z/i; var e = /\/Date\((\d+)(?:-\d+)?\)\//i; var f = /"(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(?:[.,](\d+))?Z"/i; var l = /"\\\/Date\((\d+)(?:-\d+)?\)\\\/"/i; var j = (window.JSON && window.JSON.parse) ? true : false; var b = j && window.JSON.parse('{"x":9}', function (p, o) { return "Y" }) === "Y"; var c = function (o, p) { if (typeof (p) === "string") { if (a.test(p)) { return new Date(p) } if (e.test(p)) { return new Date(parseInt(e.exec(p)[1], 10)) } } return p }; g.extend({ parseJSON: function (p, o) { if (typeof p !== "string" || !p) { return null } p = g.trim(p); if (h.test(p.replace(n, "@").replace(m, "]").replace(d, ""))) { if (b || (j && o !== true)) { return window.JSON.parse(p, o === true ? c : undefined) } else { p = o === true ? p.replace(f, "new Date(parseInt('$1',10),parseInt('$2',10)-1,parseInt('$3',10),parseInt('$4',10),parseInt('$5',10),parseInt('$6',10),(function(s){return parseInt(s,10)||0;})('$7'))").replace(l, "new Date($1)") : p; return (new Function("return " + p))() } } else { g.error("Invalid JSON: " + p) } } }) })(jQuery); "use strict"; (function () { if (jQuery && jQuery.jstree) { return } var c = false, b = false, a = false; (function (g) { g.vakata = {}; g.vakata.css = { get_css: function (p, m, n) { p = p.toLowerCase(); var o = n.cssRules || n.rules, l = 0; do { if (o.length && l > o.length + 5) { return false } if (o[l].selectorText && o[l].selectorText.toLowerCase() == p) { if (m === true) { if (n.removeRule) { n.removeRule(l) } if (n.deleteRule) { n.deleteRule(l) } return true } else { return o[l] } } } while (o[++l]); return false }, add_css: function (l, j) { if (g.jstree.css.get_css(l, false, j)) { return false } if (j.insertRule) { j.insertRule(l + " { }", 0) } else { j.addRule(l, null, 0) } return g.vakata.css.get_css(l) }, remove_css: function (l, j) { return g.vakata.css.get_css(l, true, j) }, add_sheet: function (l) { var j = false, n = true; if (l.str) { if (l.title) { j = g("style[id='" + l.title + "-stylesheet']")[0] } if (j) { n = false } else { j = document.createElement("style"); j.setAttribute("type", "text/css"); if (l.title) { j.setAttribute("id", l.title + "-stylesheet") } } if (j.styleSheet) { if (n) { document.getElementsByTagName("head")[0].appendChild(j); j.styleSheet.cssText = l.str } else { j.styleSheet.cssText = j.styleSheet.cssText + " " + l.str } } else { j.appendChild(document.createTextNode(l.str)); document.getElementsByTagName("head")[0].appendChild(j) } return j.sheet || j.styleSheet } if (l.url) { if (document.createStyleSheet) { try { j = document.createStyleSheet(l.url) } catch (m) { } } else { j = document.createElement("link"); j.rel = "stylesheet"; j.type = "text/css"; j.media = "all"; j.href = l.url; document.getElementsByTagName("head")[0].appendChild(j); return j.styleSheet } } } }; var h = [], f = -1, e = {}, d = {}; g.fn.jstree = function (n) { var j = (typeof n == "string"), l = Array.prototype.slice.call(arguments, 1), m = this; if (j) { if (n.substring(0, 1) == "_") { return m } this.each(function () { var o = h[g.data(this, "jstree_instance_id")], p = (o && g.isFunction(o[n])) ? o[n].apply(o, l) : o; if (typeof p !== "undefined" && (n.indexOf("is_") === 0 || (p !== true && p !== false))) { m = p; return false } }) } else { this.each(function () { var u = g.data(this, "jstree_instance_id"), p = [], o = n ? g.extend({}, true, n) : {}, v = g(this), r = false, q = []; p = p.concat(l); if (v.data("jstree")) { p.push(v.data("jstree")) } o = p.length ? g.extend.apply(null, [true, o].concat(p)) : o; if (typeof u !== "undefined" && h[u]) { h[u].destroy() } u = parseInt(h.push({}), 10) - 1; g.data(this, "jstree_instance_id", u); o.plugins = g.isArray(o.plugins) ? o.plugins : g.jstree.defaults.plugins.slice(); o.plugins.unshift("core"); o.plugins = o.plugins.sort().join(",,").replace(/(,|^)([^,]+)(,,\2)+(,|$)/g, "$1$2$4").replace(/,,+/g, ",").replace(/,$/, "").split(","); r = g.extend(true, {}, g.jstree.defaults, o); r.plugins = o.plugins; g.each(e, function (s, t) { if (g.inArray(s, r.plugins) === -1) { r[s] = null; delete r[s] } else { q.push(s) } }); r.plugins = q; h[u] = new g.jstree._instance(u, g(this).addClass("jstree jstree-" + u), r); g.each(h[u]._get_settings().plugins, function (s, t) { h[u].data[t] = {} }); g.each(h[u]._get_settings().plugins, function (s, t) { if (e[t]) { e[t].__init.apply(h[u]) } }); setTimeout(function () { if (h[u]) { h[u].init() } }, 0) }) } return m }; g.jstree = { defaults: { plugins: [] }, _focused: function () { return h[f] || null }, _reference: function (j) { if (h[j]) { return h[j] } var l = g(j); if (!l.length && typeof j === "string") { l = g("#" + j) } if (!l.length) { return null } return h[l.closest(".jstree").data("jstree_instance_id")] || null }, _instance: function (l, j, m) { this.data = { core: {} }; this.get_settings = function () { return g.extend(true, {}, m) }; this._get_settings = function () { return m }; this.get_index = function () { return l }; this.get_container = function () { return j }; this.get_container_ul = function () { return j.children("ul:eq(0)") }; this._set_settings = function (n) { m = g.extend(true, {}, m, n) } }, _fn: {}, plugin: function (j, l) { l = g.extend({}, { __init: g.noop, __destroy: g.noop, _fn: {}, defaults: false }, l); e[j] = l; g.jstree.defaults[j] = l.defaults; g.each(l._fn, function (m, n) { n.plugin = j; n.old = g.jstree._fn[m]; g.jstree._fn[m] = function () { var o, q = n, p = Array.prototype.slice.call(arguments), s = new g.Event("before.jstree"), r = false; if (this.data.core.locked === true && m !== "unlock" && m !== "is_locked") { return } do { if (q && q.plugin && g.inArray(q.plugin, this._get_settings().plugins) !== -1) { break } q = q.old } while (q); if (!q) { return } if (m.indexOf("_") === 0) { o = q.apply(this, p) } else { o = this.get_container().triggerHandler(s, { func: m, inst: this, args: p, plugin: q.plugin }); if (o === false) { return } if (typeof o !== "undefined") { p = o } o = q.apply(g.extend({}, this, { __callback: function (t) { this.get_container().triggerHandler(m + ".jstree", { inst: this, args: p, rslt: t, rlbk: r }) }, __rollback: function () { r = this.get_rollback(); return r }, __call_old: function (t) { return q.old.apply(this, (t ? Array.prototype.slice.call(arguments, 1) : p)) } }), p) } return o }; g.jstree._fn[m].old = n.old; g.jstree._fn[m].plugin = j }) }, rollback: function (j) { if (j) { if (!g.isArray(j)) { j = [j] } g.each(j, function (l, m) { h[m.i].set_rollback(m.h, m.d) }) } } }; g.jstree._fn = g.jstree._instance.prototype = {}; g(function () { var m = navigator.userAgent.toLowerCase(), l = (m.match(/.+?(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [0, "0"])[1], j = ".jstree ul, .jstree li { display:block; margin:0 0 0 0; padding:0 0 0 0; list-style-type:none; } .jstree li { display:block; min-height:18px; line-height:18px; white-space:nowrap; margin-left:18px; min-width:18px; } .jstree-rtl li { margin-left:0; margin-right:18px; } .jstree > ul > li { margin-left:0px; } .jstree-rtl > ul > li { margin-right:0px; } .jstree ins { display:inline-block; text-decoration:none; width:18px; height:18px; margin:0 0 0 0; padding:0; } .jstree a { display:inline-block; line-height:16px; height:16px; color:black; white-space:nowrap; text-decoration:none; padding:1px 2px; margin:0; } .jstree a:focus { outline: none; } .jstree a > ins { height:16px; width:16px; } .jstree a > .jstree-icon { margin-right:3px; } .jstree-rtl a > .jstree-icon { margin-left:3px; margin-right:0; } li.jstree-open > ul { display:block; } li.jstree-closed > ul { display:none; } "; if (/msie/.test(m) && parseInt(l, 10) == 6) { c = true; try { document.execCommand("BackgroundImageCache", false, true) } catch (n) { } j += ".jstree li { height:18px; margin-left:0; margin-right:0; } .jstree li li { margin-left:18px; } .jstree-rtl li li { margin-left:0px; margin-right:18px; } li.jstree-open ul { display:block; } li.jstree-closed ul { display:none !important; } .jstree li a { display:inline; border-width:0 !important; padding:0px 2px !important; } .jstree li a ins { height:16px; width:16px; margin-right:3px; } .jstree-rtl li a ins { margin-right:0px; margin-left:3px; } " } if (/msie/.test(m) && parseInt(l, 10) == 7) { b = true; j += ".jstree li a { border-width:0 !important; padding:0px 2px !important; } " } if (!/compatible/.test(m) && /mozilla/.test(m) && parseFloat(l, 10) < 1.9) { a = true; j += ".jstree ins { display:-moz-inline-box; } .jstree li { line-height:12px; } .jstree a { display:-moz-inline-box; } .jstree .jstree-no-icons .jstree-checkbox { display:-moz-inline-stack !important; } " } g.vakata.css.add_sheet({ str: j, title: "jstree" }) }); g.jstree.plugin("core", { __init: function () { this.data.core.locked = false; this.data.core.to_open = this.get_settings().core.initially_open; this.data.core.to_load = this.get_settings().core.initially_load }, defaults: { html_titles: false, animation: 500, initially_open: [], initially_load: [], open_parents: true, notify_plugins: true, rtl: false, load_open: false, strings: { loading: "Loading ...", new_node: "New node", multiple_selection: "Multiple selection" } }, _fn: { init: function () { this.set_focus(); if (this._get_settings().core.rtl) { this.get_container().addClass("jstree-rtl").css("direction", "rtl") } this.get_container().html("<ul><li class='jstree-last jstree-leaf'><ins>&#160;</ins><a class='jstree-loading' href='#'><ins class='jstree-icon'>&#160;</ins>" + this._get_string("loading") + "</a></li></ul>"); this.data.core.li_height = this.get_container_ul().find("li.jstree-closed, li.jstree-leaf").eq(0).height() || 18; this.get_container().delegate("li > ins", "click.jstree", g.proxy(function (l) { var j = g(l.target); this.toggle_node(j) }, this)).bind("mousedown.jstree", g.proxy(function () { this.set_focus() }, this)).bind("dblclick.jstree", function (l) { var m; if (document.selection && document.selection.empty) { document.selection.empty() } else { if (window.getSelection) { m = window.getSelection(); try { m.removeAllRanges(); m.collapse() } catch (j) { } } } }); if (this._get_settings().core.notify_plugins) { this.get_container().bind("load_node.jstree", g.proxy(function (m, l) { var n = this._get_node(l.rslt.obj), j = this; if (n === -1) { n = this.get_container_ul() } if (!n.length) { return } n.find("li").each(function () { var o = g(this); if (o.data("jstree")) { g.each(o.data("jstree"), function (q, p) { if (j.data[q] && g.isFunction(j["_" + q + "_notify"])) { j["_" + q + "_notify"].call(j, o, p) } }) } }) }, this)) } if (this._get_settings().core.load_open) { this.get_container().bind("load_node.jstree", g.proxy(function (m, l) { var n = this._get_node(l.rslt.obj), j = this; if (n === -1) { n = this.get_container_ul() } if (!n.length) { return } n.find("li.jstree-open:not(:has(ul))").each(function () { j.load_node(this, g.noop, g.noop) }) }, this)) } this.__callback(); this.load_node(-1, function () { this.loaded(); this.reload_nodes() }) }, destroy: function () { var j, o = this.get_index(), l = this._get_settings(), m = this; g.each(l.plugins, function (n, q) { try { e[q].__destroy.apply(m) } catch (p) { } }); this.__callback(); if (this.is_focused()) { for (j in h) { if (h.hasOwnProperty(j) && j != o) { h[j].set_focus(); break } } } if (o === f) { f = -1 } this.get_container().unbind(".jstree").undelegate(".jstree").removeData("jstree_instance_id").find("[class^='jstree']").addBack().attr("class", function () { return this.className.replace(/jstree[^ ]*|$/ig, "") }); g(document).unbind(".jstree-" + o).undelegate(".jstree-" + o); h[o] = null; delete h[o] }, _core_notify: function (l, j) { if (j.opened) { this.open_node(l, false, true) } }, lock: function () { this.data.core.locked = true; this.get_container().children("ul").addClass("jstree-locked").css("opacity", "0.7"); this.__callback({}) }, unlock: function () { this.data.core.locked = false; this.get_container().children("ul").removeClass("jstree-locked").css("opacity", "1"); this.__callback({}) }, is_locked: function () { return this.data.core.locked }, save_opened: function () { var j = this; this.data.core.to_open = []; this.get_container_ul().find("li.jstree-open").each(function () { if (this.id) { j.data.core.to_open.push("#" + this.id.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:")) } }); this.__callback(j.data.core.to_open) }, save_loaded: function () { }, reload_nodes: function (l) { var o = this, j = true, n = [], m = []; if (!l) { this.data.core.reopen = false; this.data.core.refreshing = true; this.data.core.to_open = g.map(g.makeArray(this.data.core.to_open), function (p) { return "#" + p.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:") }); this.data.core.to_load = g.map(g.makeArray(this.data.core.to_load), function (p) { return "#" + p.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:") }); if (this.data.core.to_open.length) { this.data.core.to_load = this.data.core.to_load.concat(this.data.core.to_open) } } if (this.data.core.to_load.length) { g.each(this.data.core.to_load, function (p, q) { if (q == "#") { return true } if (g(q).length) { n.push(q) } else { m.push(q) } }); if (n.length) { this.data.core.to_load = m; g.each(n, function (p, q) { if (!o._is_loaded(q)) { o.load_node(q, function () { o.reload_nodes(true) }, function () { o.reload_nodes(true) }); j = false } }) } } if (this.data.core.to_open.length) { g.each(this.data.core.to_open, function (p, q) { o.open_node(q, false, true) }) } if (j) { if (this.data.core.reopen) { clearTimeout(this.data.core.reopen) } this.data.core.reopen = setTimeout(function () { o.__callback({}, o) }, 50); this.data.core.refreshing = false; this.reopen() } }, reopen: function () { var j = this; if (this.data.core.to_open.length) { g.each(this.data.core.to_open, function (l, m) { j.open_node(m, false, true) }) } this.__callback({}) }, refresh: function (j) { var l = this; this.save_opened(); if (!j) { j = -1 } j = this._get_node(j); if (!j) { j = -1 } if (j !== -1) { j.children("UL").remove() } else { this.get_container_ul().empty() } this.load_node(j, function () { l.__callback({ obj: j }); l.reload_nodes() }) }, loaded: function () { this.__callback() }, set_focus: function () { if (this.is_focused()) { return } var j = g.jstree._focused(); if (j) { j.unset_focus() } this.get_container().addClass("jstree-focused"); f = this.get_index(); this.__callback() }, is_focused: function () { return f == this.get_index() }, unset_focus: function () { if (this.is_focused()) { this.get_container().removeClass("jstree-focused"); f = -1 } this.__callback() }, _get_node: function (j) { var l = g(j, this.get_container()); if (l.is(".jstree") || j == -1) { return -1 } l = l.closest("li", this.get_container()); return l.length ? l : false }, _get_next: function (l, j) { l = this._get_node(l); if (l === -1) { return this.get_container().find("> ul > li:first-child") } if (!l.length) { return false } if (j) { return (l.nextAll("li").size() > 0) ? l.nextAll("li:eq(0)") : false } if (l.hasClass("jstree-open")) { return l.find("li:eq(0)") } else { if (l.nextAll("li").size() > 0) { return l.nextAll("li:eq(0)") } else { return l.parentsUntil(".jstree", "li").next("li").eq(0) } } }, _get_prev: function (l, j) { l = this._get_node(l); if (l === -1) { return this.get_container().find("> ul > li:last-child") } if (!l.length) { return false } if (j) { return (l.prevAll("li").length > 0) ? l.prevAll("li:eq(0)") : false } if (l.prev("li").length) { l = l.prev("li").eq(0); while (l.hasClass("jstree-open")) { l = l.children("ul:eq(0)").children("li:last") } return l } else { var m = l.parentsUntil(".jstree", "li:eq(0)"); return m.length ? m : false } }, _get_parent: function (j) { j = this._get_node(j); if (j == -1 || !j.length) { return false } var l = j.parentsUntil(".jstree", "li:eq(0)"); return l.length ? l : -1 }, _get_children: function (j) { j = this._get_node(j); if (j === -1) { return this.get_container().children("ul:eq(0)").children("li") } if (!j.length) { return false } return j.children("ul:eq(0)").children("li") }, get_path: function (m, j) { var l = [], n = this; m = this._get_node(m); if (m === -1 || !m || !m.length) { return false } m.parentsUntil(".jstree", "li").each(function () { l.push(j ? this.id : n.get_text(this)) }); l.reverse(); l.push(j ? m.attr("id") : this.get_text(m)); return l }, _get_string: function (j) { return this._get_settings().core.strings[j] || j }, is_open: function (j) { j = this._get_node(j); return j && j !== -1 && j.hasClass("jstree-open") }, is_closed: function (j) { j = this._get_node(j); return j && j !== -1 && j.hasClass("jstree-closed") }, is_leaf: function (j) { j = this._get_node(j); return j && j !== -1 && j.hasClass("jstree-leaf") }, correct_state: function (j) { j = this._get_node(j); if (!j || j === -1) { return false } j.removeClass("jstree-closed jstree-open").addClass("jstree-leaf").children("ul").remove(); this.__callback({ obj: j }) }, open_node: function (n, o, l) { n = this._get_node(n); if (!n.length) { return false } if (!n.hasClass("jstree-closed")) { if (o) { o.call() } return false } var m = l || c ? 0 : this._get_settings().core.animation, j = this; if (!this._is_loaded(n)) { n.children("a").addClass("jstree-loading"); this.load_node(n, function () { j.open_node(n, o, l) }, o) } else { if (this._get_settings().core.open_parents) { n.parentsUntil(".jstree", ".jstree-closed").each(function () { j.open_node(this, false, true) }) } if (m) { n.children("ul").css("display", "none") } n.removeClass("jstree-closed").addClass("jstree-open").children("a").removeClass("jstree-loading"); if (m) { n.children("ul").stop(true, true).slideDown(m, function () { this.style.display = ""; j.after_open(n) }) } else { j.after_open(n) } this.__callback({ obj: n }); if (o) { o.call() } } }, after_open: function (j) { this.__callback({ obj: j }) }, close_node: function (n, l) { n = this._get_node(n); var m = l || c ? 0 : this._get_settings().core.animation, j = this; if (!n.length || !n.hasClass("jstree-open")) { return false } if (m) { n.children("ul").attr("style", "display:block !important") } n.removeClass("jstree-open").addClass("jstree-closed"); if (m) { n.children("ul").stop(true, true).slideUp(m, function () { this.style.display = ""; j.after_close(n) }) } else { j.after_close(n) } this.__callback({ obj: n }) }, after_close: function (j) { this.__callback({ obj: j }) }, toggle_node: function (j) { j = this._get_node(j); if (j.hasClass("jstree-closed")) { return this.open_node(j) } if (j.hasClass("jstree-open")) { return this.close_node(j) } }, open_all: function (m, l, j) { m = m ? this._get_node(m) : -1; if (!m || m === -1) { m = this.get_container_ul() } if (j) { m = m.find("li.jstree-closed") } else { j = m; if (m.is(".jstree-closed")) { m = m.find("li.jstree-closed").addBack() } else { m = m.find("li.jstree-closed") } } var n = this; m.each(function () { var o = this; if (!n._is_loaded(this)) { n.open_node(this, function () { n.open_all(o, l, j) }, !l) } else { n.open_node(this, false, !l) } }); if (j.find("li.jstree-closed").length === 0) { this.__callback({ obj: j }) } }, close_all: function (l, j) { var m = this; l = l ? this._get_node(l) : this.get_container(); if (!l || l === -1) { l = this.get_container_ul() } l.find("li.jstree-open").addBack().each(function () { m.close_node(this, !j) }); this.__callback({ obj: l }) }, clean_node: function (j) { j = j && j != -1 ? g(j) : this.get_container_ul(); j = j.is("li") ? j.find("li").addBack() : j.find("li"); j.removeClass("jstree-last").filter("li:last-child").addClass("jstree-last").end().filter(":has(li)").not(".jstree-open").removeClass("jstree-leaf").addClass("jstree-closed"); j.not(".jstree-open, .jstree-closed").addClass("jstree-leaf").children("ul").remove(); this.__callback({ obj: j }) }, get_rollback: function () { this.__callback(); return { i: this.get_index(), h: this.get_container().children("ul").clone(true), d: this.data } }, set_rollback: function (j, l) { this.get_container().empty().append(j); this.data = l; this.__callback() }, load_node: function (m, j, l) { this.__callback({ obj: m }) }, _is_loaded: function (j) { return true }, create_node: function (p, j, o, r, l) { p = this._get_node(p); j = typeof j === "undefined" ? "last" : j; var q = g("<li />"), n = this._get_settings().core, m; if (p !== -1 && !p.length) { return false } if (!l && !this._is_loaded(p)) { this.load_node(p, function () { this.create_node(p, j, o, r, true) }); return false } this.__rollback(); if (typeof o === "string") { o = { data: o } } if (!o) { o = {} } if (o.attr) { q.attr(o.attr) } if (o.metadata) { q.data(o.metadata) } if (o.state) { q.addClass("jstree-" + o.state) } if (!o.data) { o.data = this._get_string("new_node") } if (!g.isArray(o.data)) { m = o.data; o.data = []; o.data.push(m) } g.each(o.data, function (t, s) { m = g("<a />"); if (g.isFunction(s)) { s = s.call(this, o) } if (typeof s == "string") { m.attr("href", "#")[n.html_titles ? "html" : "text"](s) } else { if (!s.attr) { s.attr = {} } if (!s.attr.href) { s.attr.href = "#" } m.attr(s.attr)[n.html_titles ? "html" : "text"](s.title); if (s.language) { m.addClass(s.language) } } m.prepend("<ins class='jstree-icon'>&#160;</ins>"); if (!s.icon && o.icon) { s.icon = o.icon } if (s.icon) { if (s.icon.indexOf("/") === -1) { m.children("ins").addClass(s.icon) } else { m.children("ins").css("background", "url('" + s.icon + "') center center no-repeat") } } q.append(m) }); q.prepend("<ins class='jstree-icon'>&#160;</ins>"); if (p === -1) { p = this.get_container(); if (j === "before") { j = "first" } if (j === "after") { j = "last" } } switch (j) { case "before": p.before(q); m = this._get_parent(p); break; case "after": p.after(q); m = this._get_parent(p); break; case "inside": case "first": if (!p.children("ul").length) { p.append("<ul />") } p.children("ul").prepend(q); m = p; break; case "last": if (!p.children("ul").length) { p.append("<ul />") } p.children("ul").append(q); m = p; break; default: if (!p.children("ul").length) { p.append("<ul />") } if (!j) { j = 0 } m = p.children("ul").children("li").eq(j); if (m.length) { m.before(q) } else { p.children("ul").append(q) } m = p; break } if (m === -1 || m.get(0) === this.get_container().get(0)) { m = -1 } this.clean_node(m); this.__callback({ obj: q, parent: m }); if (r) { r.call(this, q) } return q }, get_text: function (l) { l = this._get_node(l); if (!l.length) { return false } var j = this._get_settings().core.html_titles; l = l.children("a:eq(0)"); if (j) { l = l.clone(); l.children("INS").remove(); return l.html() } else { l = l.contents().filter(function () { return this.nodeType == 3 })[0]; return l.nodeValue } }, set_text: function (l, m) { l = this._get_node(l); if (!l.length) { return false } l = l.children("a:eq(0)"); if (this._get_settings().core.html_titles) { var j = l.children("INS").clone(); l.html(m).prepend(j); this.__callback({ obj: l, name: m }); return true } else { l = l.contents().filter(function () { return this.nodeType == 3 })[0]; this.__callback({ obj: l, name: m }); return (l.nodeValue = m) } }, rename_node: function (j, l) { j = this._get_node(j); this.__rollback(); if (j && j.length && this.set_text.apply(this, Array.prototype.slice.call(arguments))) { this.__callback({ obj: j, name: l }) } }, delete_node: function (n) { n = this._get_node(n); if (!n.length) { return false } this.__rollback(); var m = this._get_parent(n), l = g([]), j = this; n.each(function () { l = l.add(j._get_prev(this)) }); n = n.detach(); if (m !== -1 && m.find("> ul > li").length === 0) { m.removeClass("jstree-open jstree-closed").addClass("jstree-leaf") } this.clean_node(m); this.__callback({ obj: n, prev: l, parent: m }); return n }, prepare_move: function (q, m, s, j, l) { var n = {}; n.ot = g.jstree._reference(q) || this; n.o = n.ot._get_node(q); n.r = m === -1 ? -1 : this._get_node(m); n.p = (typeof s === "undefined" || s === false) ? "last" : s; if (!l && d.o && d.o[0] === n.o[0] && d.r[0] === n.r[0] && d.p === n.p) { this.__callback(d); if (j) { j.call(this, d) } return } n.ot = g.jstree._reference(n.o) || this; n.rt = g.jstree._reference(n.r) || this; if (n.r === -1 || !n.r) { n.cr = -1; switch (n.p) { case "first": case "before": case "inside": n.cp = 0; break; case "after": case "last": n.cp = n.rt.get_container().find(" > ul > li").length; break; default: n.cp = n.p; break } } else { if (!/^(before|after)$/.test(n.p) && !this._is_loaded(n.r)) { return this.load_node(n.r, function () { this.prepare_move(q, m, s, j, true) }) } switch (n.p) { case "before": n.cp = n.r.index(); n.cr = n.rt._get_parent(n.r); break; case "after": n.cp = n.r.index() + 1; n.cr = n.rt._get_parent(n.r); break; case "inside": case "first": n.cp = 0; n.cr = n.r; break; case "last": n.cp = n.r.find(" > ul > li").length; n.cr = n.r; break; default: n.cp = n.p; n.cr = n.r; break } } n.np = n.cr == -1 ? n.rt.get_container() : n.cr; n.op = n.ot._get_parent(n.o); n.cop = n.o.index(); if (n.op === -1) { n.op = n.ot ? n.ot.get_container() : this.get_container() } if (!/^(before|after)$/.test(n.p) && n.op && n.np && n.op[0] === n.np[0] && n.o.index() < n.cp) { n.cp++ } n.or = n.np.find(" > ul > li:nth-child(" + (n.cp + 1) + ")"); d = n; this.__callback(d); if (j) { j.call(this, d) } }, check_move: function () { var m = d, j = true, l = m.r === -1 ? this.get_container() : m.r; if (!m || !m.o || m.or[0] === m.o[0]) { return false } if (!m.cy) { if (m.op && m.np && m.op[0] === m.np[0] && m.cp - 1 === m.o.index()) { return false } m.o.each(function () { if (l.parentsUntil(".jstree", "li").addBack().index(this) !== -1) { j = false; return false } }) } return j }, move_node: function (r, n, j, m, l, q) { if (!l) { return this.prepare_move(r, n, j, function (o) { this.move_node(o, false, false, m, true, q) }) } if (m) { d.cy = true } if (!q && !this.check_move()) { return false } this.__rollback(); var s = false; if (m) { s = r.o.clone(true); s.find("*[id]").addBack().each(function () { if (this.id) { this.id = "copy_" + this.id } }) } else { s = r.o } if (r.or.length) { r.or.before(s) } else { if (!r.np.children("ul").length) { g("<ul />").appendTo(r.np) } r.np.children("ul:eq(0)").append(s) } try { r.ot.clean_node(r.op); r.rt.clean_node(r.np); if (!r.op.find("> ul > li").length) { r.op.removeClass("jstree-open jstree-closed").addClass("jstree-leaf").children("ul").remove() } } catch (p) { } if (m) { d.cy = true; d.oc = s } this.__callback(d); return d }, _get_move: function () { return d } } }) })(jQuery); (function (d) { var g, f, e; d(function () { if (/msie/.test(navigator.userAgent.toLowerCase())) { f = d('<textarea cols="10" rows="2"></textarea>').css({ position: "absolute", top: -1000, left: 0 }).appendTo("body"); e = d('<textarea cols="10" rows="2" style="overflow: hidden;"></textarea>').css({ position: "absolute", top: -1000, left: 0 }).appendTo("body"); g = f.width() - e.width(); f.add(e).remove() } else { f = d("<div />").css({ width: 100, height: 100, overflow: "auto", position: "absolute", top: -1000, left: 0 }).prependTo("body").append("<div />").find("div").css({ width: "100%", height: 200 }); g = 100 - f.width(); f.parent().remove() } }); d.jstree.plugin("ui", { __init: function () { this.data.ui.selected = d(); this.data.ui.last_selected = false; this.data.ui.hovered = null; this.data.ui.to_select = this.get_settings().ui.initially_select; this.get_container().delegate("a", "click.jstree", d.proxy(function (h) { if (d(h.currentTarget).attr("href") == "#") { h.preventDefault(); h.currentTarget.blur(); if (!d(h.currentTarget).hasClass("jstree-loading")) { this.select_node(h.currentTarget, true, h) } } }, this)).delegate("a", "mouseenter.jstree", d.proxy(function (h) { if (!d(h.currentTarget).hasClass("jstree-loading")) { this.hover_node(h.target) } }, this)).delegate("a", "mouseleave.jstree", d.proxy(function (h) { if (!d(h.currentTarget).hasClass("jstree-loading")) { this.dehover_node(h.target) } }, this)).bind("reopen.jstree", d.proxy(function () { this.reselect() }, this)).bind("get_rollback.jstree", d.proxy(function () { this.dehover_node(); this.save_selected() }, this)).bind("set_rollback.jstree", d.proxy(function () { this.reselect() }, this)).bind("close_node.jstree", d.proxy(function (j, l) { var h = this._get_settings().ui, m = this._get_node(l.rslt.obj), n = (m && m.length) ? m.children("ul").find("a.jstree-clicked") : d(), o = this; if (h.selected_parent_close === false || !n.length) { return } n.each(function () { o.deselect_node(this); if (h.selected_parent_close === "select_parent") { o.select_node(m) } }) }, this)).bind("delete_node.jstree", d.proxy(function (j, l) { var h = this._get_settings().ui.select_prev_on_delete, m = this._get_node(l.rslt.obj), n = (m && m.length) ? m.find("a.jstree-clicked") : [], o = this; n.each(function () { o.deselect_node(this) }); if (h && n.length) { l.rslt.prev.each(function () { if (this.parentNode) { o.select_node(this); return false } }) } }, this)).bind("move_node.jstree", d.proxy(function (h, j) { if (j.rslt.cy) { j.rslt.oc.find("a.jstree-clicked").removeClass("jstree-clicked") } }, this)) }, defaults: { select_limit: -1, select_multiple_modifier: "ctrl", select_range_modifier: "shift", selected_parent_close: "select_parent", selected_parent_open: true, select_prev_on_delete: true, disable_selecting_children: false, initially_select: [] }, _fn: { _get_node: function (h, j) { if (typeof h === "undefined" || h === null) { return j ? this.data.ui.selected : this.data.ui.last_selected } var l = d(h, this.get_container()); if (l.is(".jstree") || h == -1) { return -1 } l = l.closest("li", this.get_container()); return l.length ? l : false }, _ui_notify: function (j, h) { if (h.selected) { this.select_node(j, false) } }, save_selected: function () { var h = this; this.data.ui.to_select = []; this.data.ui.selected.each(function () { if (this.id) { h.data.ui.to_select.push("#" + this.id.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:")) } }); this.__callback(this.data.ui.to_select) }, reselect: function () { var j = this, h = this.data.ui.to_select; h = d.map(d.makeArray(h), function (l) { return "#" + l.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:") }); d.each(h, function (l, m) { if (m && m !== "#") { j.select_node(m) } }); this.data.ui.selected = this.data.ui.selected.filter(function () { return this.parentNode }); this.__callback() }, refresh: function (h) { this.save_selected(); return this.__call_old() }, hover_node: function (h) { h = this._get_node(h); if (!h.length) { return false } if (!h.hasClass("jstree-hovered")) { this.dehover_node() } this.data.ui.hovered = h.children("a").addClass("jstree-hovered").parent(); this._fix_scroll(h); this.__callback({ obj: h }) }, dehover_node: function () { var j = this.data.ui.hovered, h; if (!j || !j.length) { return false } h = j.children("a").removeClass("jstree-hovered").parent(); if (this.data.ui.hovered[0] === h[0]) { this.data.ui.hovered = null } this.__callback({ obj: j }) }, select_node: function (m, h, n) { m = this._get_node(m); if (m == -1 || !m || !m.length) { return false } var r = this._get_settings().ui, p = (r.select_multiple_modifier == "on" || (r.select_multiple_modifier !== false && n && n[r.select_multiple_modifier + "Key"])), j = (r.select_range_modifier !== false && n && n[r.select_range_modifier + "Key"] && this.data.ui.last_selected && this.data.ui.last_selected[0] !== m[0] && this.data.ui.last_selected.parent()[0] === m.parent()[0]), l = this.is_selected(m), o = true, q = this; if (h) { if (r.disable_selecting_children && p && ((m.parentsUntil(".jstree", "li").children("a.jstree-clicked").length) || (m.children("ul").find("a.jstree-clicked:eq(0)").length))) { return false } o = false; switch (!0) { case (j): this.data.ui.last_selected.addClass("jstree-last-selected"); m = m[m.index() < this.data.ui.last_selected.index() ? "nextUntil" : "prevUntil"](".jstree-last-selected").addBack(); if (r.select_limit == -1 || m.length < r.select_limit) { this.data.ui.last_selected.removeClass("jstree-last-selected"); this.data.ui.selected.each(function () { if (this !== q.data.ui.last_selected[0]) { q.deselect_node(this) } }); l = false; o = true } else { o = false } break; case (l && !p): this.deselect_all(); l = false; o = true; break; case (!l && !p): if (r.select_limit == -1 || r.select_limit > 0) { this.deselect_all(); o = true } break; case (l && p): this.deselect_node(m); break; case (!l && p): if (r.select_limit == -1 || this.data.ui.selected.length + 1 <= r.select_limit) { o = true } break } } if (o && !l) { if (!j) { this.data.ui.last_selected = m } m.children("a").addClass("jstree-clicked"); if (r.selected_parent_open) { m.parents(".jstree-closed").each(function () { q.open_node(this, false, true) }) } this.data.ui.selected = this.data.ui.selected.add(m); this._fix_scroll(m.eq(0)); this.__callback({ obj: m, e: n }) } }, _fix_scroll: function (j) { var l = this.get_container()[0], h; if (l.scrollHeight > l.offsetHeight) { j = this._get_node(j); if (!j || j === -1 || !j.length || !j.is(":visible")) { return } h = j.offset().top - this.get_container().offset().top; if (h < 0) { l.scrollTop = l.scrollTop + h - 1 } if (h + this.data.core.li_height + (l.scrollWidth > l.offsetWidth ? g : 0) > l.offsetHeight) { l.scrollTop = l.scrollTop + (h - l.offsetHeight + this.data.core.li_height + 1 + (l.scrollWidth > l.offsetWidth ? g : 0)) } } }, deselect_node: function (h) { h = this._get_node(h); if (!h.length) { return false } if (this.is_selected(h)) { h.children("a").removeClass("jstree-clicked"); this.data.ui.selected = this.data.ui.selected.not(h); if (this.data.ui.last_selected.get(0) === h.get(0)) { this.data.ui.last_selected = this.data.ui.selected.eq(0) } this.__callback({ obj: h }) } }, toggle_select: function (h) { h = this._get_node(h); if (!h.length) { return false } if (this.is_selected(h)) { this.deselect_node(h) } else { this.select_node(h) } }, is_selected: function (h) { return this.data.ui.selected.index(this._get_node(h)) >= 0 }, get_selected: function (h) { return h ? d(h).find("a.jstree-clicked").parent() : this.data.ui.selected }, deselect_all: function (j) { var h = j ? d(j).find("a.jstree-clicked").parent() : this.get_container().find("a.jstree-clicked").parent(); h.children("a.jstree-clicked").removeClass("jstree-clicked"); this.data.ui.selected = d([]); this.data.ui.last_selected = false; this.__callback({ obj: h }) } } }); d.jstree.defaults.plugins.push("ui") })(jQuery); (function (d) { d.jstree.plugin("crrm", { __init: function () { this.get_container().bind("move_node.jstree", d.proxy(function (h, g) { if (this._get_settings().crrm.move.open_onmove) { var f = this; g.rslt.np.parentsUntil(".jstree").addBack().filter(".jstree-closed").each(function () { f.open_node(this, false, true) }) } }, this)) }, defaults: { input_width_limit: 200, move: { always_copy: false, open_onmove: true, default_position: "last", check_move: function (e) { return true } } }, _fn: { _show_input: function (e, n) { e = this._get_node(e); var l = this._get_settings().core.rtl, m = this._get_settings().crrm.input_width_limit, g = e.children("ins").width(), f = e.find("> a:visible > ins").width() * e.find("> a:visible > ins").length, o = this.get_text(e), j = d("<div />", { css: { position: "absolute", top: "-200px", left: (l ? "0px" : "-1000px"), visibility: "hidden" } }).appendTo("body"), h = e.css("position", "relative").append(d("<input />", { value: o, "class": "jstree-rename-input", css: { padding: "0", border: "1px solid silver", position: "absolute", left: (l ? "auto" : (g + f + 4) + "px"), right: (l ? (g + f + 4) + "px" : "auto"), top: "0px", height: (this.data.core.li_height - 2) + "px", lineHeight: (this.data.core.li_height - 2) + "px", width: "150px" }, blur: d.proxy(function () { var q = e.children(".jstree-rename-input"), p = q.val(); if (p === "") { p = o } j.remove(); q.remove(); this.set_text(e, o); this.rename_node(e, p); n.call(this, e, p, o); e.css("position", "") }, this), keyup: function (q) { var p = q.keyCode || q.which; if (p == 27) { this.value = o; this.blur(); return } else { if (p == 13) { this.blur(); return } else { h.width(Math.min(j.text("pW" + this.value).width(), m)) } } }, keypress: function (q) { var p = q.keyCode || q.which; if (p == 13) { return false } } })).children(".jstree-rename-input"); this.set_text(e, ""); j.css({ fontFamily: h.css("fontFamily") || "", fontSize: h.css("fontSize") || "", fontWeight: h.css("fontWeight") || "", fontStyle: h.css("fontStyle") || "", fontStretch: h.css("fontStretch") || "", fontVariant: h.css("fontVariant") || "", letterSpacing: h.css("letterSpacing") || "", wordSpacing: h.css("wordSpacing") || "" }); h.width(Math.min(j.text("pW" + h[0].value).width(), m))[0].select() }, rename: function (g) { g = this._get_node(g); this.__rollback(); var e = this.__callback; this._show_input(g, function (j, h, f) { e.call(this, { obj: j, new_name: h, old_name: f }) }) }, create: function (j, f, h, m, e) { var g, l = this; j = this._get_node(j); if (!j) { j = -1 } this.__rollback(); g = this.create_node(j, f, h, function (n) { var o = this._get_parent(n), q = d(n).index(); if (m) { m.call(this, n) } if (o.length && o.hasClass("jstree-closed")) { this.open_node(o, false, true) } if (!e) { this._show_input(n, function (s, r, p) { l.__callback({ obj: s, name: r, parent: o, position: q }) }) } else { l.__callback({ obj: n, name: this.get_text(n), parent: o, position: q }) } }); return g }, remove: function (g) { g = this._get_node(g, true); var f = this._get_parent(g), e = this._get_prev(g); this.__rollback(); g = this.delete_node(g); if (g !== false) { this.__callback({ obj: g, prev: e, parent: f }) } }, check_move: function () { if (!this.__call_old()) { return false } var e = this._get_settings().crrm.move; if (!e.check_move.call(this, this._get_move())) { return false } return true }, move_node: function (m, j, e, g, f, l) { var h = this._get_settings().crrm.move; if (!f) { if (typeof e === "undefined") { e = h.default_position } if (e === "inside" && !h.default_position.match(/^(before|after)$/)) { e = h.default_position } return this.__call_old(true, m, j, e, g, false, l) } if (h.always_copy === true || (h.always_copy === "multitree" && m.rt.get_index() !== m.ot.get_index())) { g = true } this.__call_old(true, m, j, e, g, true, l) }, cut: function (e) { e = this._get_node(e, true); if (!e || !e.length) { return false } this.data.crrm.cp_nodes = false; this.data.crrm.ct_nodes = e; this.__callback({ obj: e }) }, copy: function (e) { e = this._get_node(e, true); if (!e || !e.length) { return false } this.data.crrm.ct_nodes = false; this.data.crrm.cp_nodes = e; this.__callback({ obj: e }) }, paste: function (f) { f = this._get_node(f); if (!f || !f.length) { return false } var e = this.data.crrm.ct_nodes ? this.data.crrm.ct_nodes : this.data.crrm.cp_nodes; if (!this.data.crrm.ct_nodes && !this.data.crrm.cp_nodes) { return false } if (this.data.crrm.ct_nodes) { this.move_node(this.data.crrm.ct_nodes, f); this.data.crrm.ct_nodes = false } if (this.data.crrm.cp_nodes) { this.move_node(this.data.crrm.cp_nodes, f, false, true) } this.__callback({ obj: f, nodes: e }) } } }) })(jQuery); (function (d) { var e = []; d.jstree._themes = false; d.jstree.plugin("themes", { __init: function () { this.get_container().bind("init.jstree", d.proxy(function () { var f = this._get_settings().themes; this.data.themes.dots = f.dots; this.data.themes.icons = f.icons; this.set_theme(f.theme, f.url) }, this)).bind("loaded.jstree", d.proxy(function () { if (!this.data.themes.dots) { this.hide_dots() } else { this.show_dots() } if (!this.data.themes.icons) { this.hide_icons() } else { this.show_icons() } }, this)) }, defaults: { theme: "default", url: false, dots: true, icons: true }, _fn: { set_theme: function (g, f) { if (!g) { return false } if (f && d.inArray(f, e) == -1) { d.vakata.css.add_sheet({ url: f }); e.push(f) } if (this.data.themes.theme != g) { this.get_container().removeClass("jstree-" + this.data.themes.theme); this.data.themes.theme = g } this.get_container().addClass("jstree-" + g); if (!this.data.themes.dots) { this.hide_dots() } else { this.show_dots() } if (!this.data.themes.icons) { this.hide_icons() } else { this.show_icons() } this.__callback() }, get_theme: function () { return this.data.themes.theme }, show_dots: function () { this.data.themes.dots = true; this.get_container().children("ul").removeClass("jstree-no-dots") }, hide_dots: function () { this.data.themes.dots = false; this.get_container().children("ul").addClass("jstree-no-dots") }, toggle_dots: function () { if (this.data.themes.dots) { this.hide_dots() } else { this.show_dots() } }, show_icons: function () { this.data.themes.icons = true; this.get_container().children("ul").removeClass("jstree-no-icons") }, hide_icons: function () { this.data.themes.icons = false; this.get_container().children("ul").addClass("jstree-no-icons") }, toggle_icons: function () { if (this.data.themes.icons) { this.hide_icons() } else { this.show_icons() } } } }); d(function () { if (d.jstree._themes === false) { d("script").each(function () { if (this.src.toString().match(/jquery\.jstree[^\/]*?\.js(\?.*)?$/)) { d.jstree._themes = this.src.toString().replace(/jquery\.jstree[^\/]*?\.js(\?.*)?$/, "") + "themes/"; return false } }) } if (d.jstree._themes === false) { d.jstree._themes = "themes/" } }); d.jstree.defaults.plugins.push("themes") })(jQuery); (function (f) { var e = []; function d(h, j) { var l = f.jstree._focused(), g; if (l && l.data && l.data.hotkeys && l.data.hotkeys.enabled) { g = l._get_settings().hotkeys[h]; if (g) { return g.call(l, j) } } } f.jstree.plugin("hotkeys", { __init: function () { if (typeof f.hotkeys === "undefined") { throw "jsTree hotkeys: jQuery hotkeys plugin not included." } if (!this.data.ui) { throw "jsTree hotkeys: jsTree UI plugin not included." } f.each(this._get_settings().hotkeys, function (h, g) { if (g !== false && f.inArray(h, e) == -1) { f(document).bind("keydown", h, function (j) { return d(h, j) }); e.push(h) } }); this.get_container().bind("lock.jstree", f.proxy(function () { if (this.data.hotkeys.enabled) { this.data.hotkeys.enabled = false; this.data.hotkeys.revert = true } }, this)).bind("unlock.jstree", f.proxy(function () { if (this.data.hotkeys.revert) { this.data.hotkeys.enabled = true } }, this)); this.enable_hotkeys() }, defaults: { up: function () { var g = this.data.ui.hovered || this.data.ui.last_selected || -1; this.hover_node(this._get_prev(g)); return false }, "ctrl+up": function () { var g = this.data.ui.hovered || this.data.ui.last_selected || -1; this.hover_node(this._get_prev(g)); return false }, "shift+up": function () { var g = this.data.ui.hovered || this.data.ui.last_selected || -1; this.hover_node(this._get_prev(g)); return false }, down: function () { var g = this.data.ui.hovered || this.data.ui.last_selected || -1; this.hover_node(this._get_next(g)); return false }, "ctrl+down": function () { var g = this.data.ui.hovered || this.data.ui.last_selected || -1; this.hover_node(this._get_next(g)); return false }, "shift+down": function () { var g = this.data.ui.hovered || this.data.ui.last_selected || -1; this.hover_node(this._get_next(g)); return false }, left: function () { var g = this.data.ui.hovered || this.data.ui.last_selected; if (g) { if (g.hasClass("jstree-open")) { this.close_node(g) } else { this.hover_node(this._get_prev(g)) } } return false }, "ctrl+left": function () { var g = this.data.ui.hovered || this.data.ui.last_selected; if (g) { if (g.hasClass("jstree-open")) { this.close_node(g) } else { this.hover_node(this._get_prev(g)) } } return false }, "shift+left": function () { var g = this.data.ui.hovered || this.data.ui.last_selected; if (g) { if (g.hasClass("jstree-open")) { this.close_node(g) } else { this.hover_node(this._get_prev(g)) } } return false }, right: function () { var g = this.data.ui.hovered || this.data.ui.last_selected; if (g && g.length) { if (g.hasClass("jstree-closed")) { this.open_node(g) } else { this.hover_node(this._get_next(g)) } } return false }, "ctrl+right": function () { var g = this.data.ui.hovered || this.data.ui.last_selected; if (g && g.length) { if (g.hasClass("jstree-closed")) { this.open_node(g) } else { this.hover_node(this._get_next(g)) } } return false }, "shift+right": function () { var g = this.data.ui.hovered || this.data.ui.last_selected; if (g && g.length) { if (g.hasClass("jstree-closed")) { this.open_node(g) } else { this.hover_node(this._get_next(g)) } } return false }, space: function () { if (this.data.ui.hovered) { this.data.ui.hovered.children("a:eq(0)").click() } return false }, "ctrl+space": function (g) { g.type = "click"; if (this.data.ui.hovered) { this.data.ui.hovered.children("a:eq(0)").trigger(g) } return false }, "shift+space": function (g) { g.type = "click"; if (this.data.ui.hovered) { this.data.ui.hovered.children("a:eq(0)").trigger(g) } return false }, f2: function () { this.rename(this.data.ui.hovered || this.data.ui.last_selected) }, del: function () { this.remove(this.data.ui.hovered || this._get_node(null)) } }, _fn: { enable_hotkeys: function () { this.data.hotkeys.enabled = true }, disable_hotkeys: function () { this.data.hotkeys.enabled = false } } }) })(jQuery); (function (d) { d.jstree.plugin("json_data", { __init: function () { var e = this._get_settings().json_data; if (e.progressive_unload) { this.get_container().bind("after_close.jstree", function (g, f) { f.rslt.obj.children("ul").remove() }) } }, defaults: { data: false, ajax: false, correct_state: true, progressive_render: false, progressive_unload: false }, _fn: { load_node: function (g, e, f) { var h = this; this.load_node_json(g, function () { h.__callback({ obj: h._get_node(g) }); e.call(this) }, f) }, _is_loaded: function (f) { var e = this._get_settings().json_data; f = this._get_node(f); return f == -1 || !f || (!e.ajax && !e.progressive_render && !d.isFunction(e.data)) || f.is(".jstree-open, .jstree-leaf") || f.children("ul").children("li").length > 0 }, refresh: function (f) { f = this._get_node(f); var e = this._get_settings().json_data; if (f && f !== -1 && e.progressive_unload && (d.isFunction(e.data) || !!e.ajax)) { f.removeData("jstree_children") } return this.__call_old() }, load_node_json: function (j, e, g) { var h = this.get_settings().json_data, m, f = function () { }, l = function () { }; j = this._get_node(j); if (j && j !== -1 && (h.progressive_render || h.progressive_unload) && !j.is(".jstree-open, .jstree-leaf") && j.children("ul").children("li").length === 0 && j.data("jstree_children")) { m = this._parse_json(j.data("jstree_children"), j); if (m) { j.append(m); if (!h.progressive_unload) { j.removeData("jstree_children") } } this.clean_node(j); if (e) { e.call(this) } return } if (j && j !== -1) { if (j.data("jstree_is_loading")) { return } else { j.data("jstree_is_loading", true) } } switch (!0) { case (!h.data && !h.ajax): throw "Neither data nor ajax settings supplied."; case (d.isFunction(h.data)): h.data.call(this, j, d.proxy(function (n) { n = this._parse_json(n, j); if (!n) { if (j === -1 || !j) { if (h.correct_state) { this.get_container().children("ul").empty() } } else { j.children("a.jstree-loading").removeClass("jstree-loading"); j.removeData("jstree_is_loading"); if (h.correct_state) { this.correct_state(j) } } if (g) { g.call(this) } } else { if (j === -1 || !j) { this.get_container().children("ul").empty().append(n.children()) } else { j.append(n).children("a.jstree-loading").removeClass("jstree-loading"); j.removeData("jstree_is_loading") } this.clean_node(j); if (e) { e.call(this) } } }, this)); break; case (!!h.data && !h.ajax) || (!!h.data && !!h.ajax && (!j || j === -1)): if (!j || j == -1) { m = this._parse_json(h.data, j); if (m) { this.get_container().children("ul").empty().append(m.children()); this.clean_node() } else { if (h.correct_state) { this.get_container().children("ul").empty() } } } if (e) { e.call(this) } break; case (!h.data && !!h.ajax) || (!!h.data && !!h.ajax && j && j !== -1): f = function (o, p, q) { var n = this.get_settings().json_data.ajax.error; if (n) { n.call(this, o, p, q) } if (j != -1 && j.length) { j.children("a.jstree-loading").removeClass("jstree-loading"); j.removeData("jstree_is_loading"); if (p === "success" && h.correct_state) { this.correct_state(j) } } else { if (p === "success" && h.correct_state) { this.get_container().children("ul").empty() } } if (g) { g.call(this) } }; l = function (q, o, n) { var p = this.get_settings().json_data.ajax.success; if (p) { q = p.call(this, q, o, n) || q } if (q === "" || (q && q.toString && q.toString().replace(/^[\s\n]+$/, "") === "") || (!d.isArray(q) && !d.isPlainObject(q))) { return f.call(this, n, o, "") } q = this._parse_json(q, j); if (q) { if (j === -1 || !j) { this.get_container().children("ul").empty().append(q.children()) } else { j.append(q).children("a.jstree-loading").removeClass("jstree-loading"); j.removeData("jstree_is_loading") } this.clean_node(j); if (e) { e.call(this) } } else { if (j === -1 || !j) { if (h.correct_state) { this.get_container().children("ul").empty(); if (e) { e.call(this) } } } else { j.children("a.jstree-loading").removeClass("jstree-loading"); j.removeData("jstree_is_loading"); if (h.correct_state) { this.correct_state(j); if (e) { e.call(this) } } } } }; h.ajax.context = this; h.ajax.error = f; h.ajax.success = l; if (!h.ajax.dataType) { h.ajax.dataType = "json" } if (d.isFunction(h.ajax.url)) { h.ajax.url = h.ajax.url.call(this, j) } if (d.isFunction(h.ajax.data)) { h.ajax.data = h.ajax.data.call(this, j) } d.ajax(h.ajax); break } }, _parse_json: function (e, l, r) { var n = false, f = this._get_settings(), v = f.json_data, u = f.core.html_titles, m, h, g, q, o; if (!e) { return n } if (v.progressive_unload && l && l !== -1) { l.data("jstree_children", n) } if (d.isArray(e)) { n = d("<ul>"); if (!e.length) { return false } for (h = 0, g = e.length; h < g; h++) { m = this._parse_json(e[h], l, true); if (m.length) { n = n.append(m) } } n = n.children() } else { if (typeof e == "string") { e = { data: e } } if (!e.data && e.data !== "") { return n } n = d("<li />"); if (e.attr) { n.attr(e.attr) } if (e.metadata) { n.data(e.metadata) } if (e.state) { n.addClass("jstree-" + e.state) } if (!d.isArray(e.data)) { m = e.data; e.data = []; e.data.push(m) } d.each(e.data, function (p, j) { m = d("<a />"); if (d.isFunction(j)) { j = j.call(this, e) } if (typeof j == "string") { m.attr("href", "#")[u ? "html" : "text"](j) } else { if (!j.attr) { j.attr = {} } if (!j.attr.href) { j.attr.href = "#" } m.attr(j.attr)[u ? "html" : "text"](j.title); if (j.language) { m.addClass(j.language) } } m.prepend("<ins class='jstree-icon'>&#160;</ins>"); if (!j.icon && e.icon) { j.icon = e.icon } if (j.icon) { if (j.icon.indexOf("/") === -1) { m.children("ins").addClass(j.icon) } else { m.children("ins").css("background", "url('" + j.icon + "') center center no-repeat") } } n.append(m) }); n.prepend("<ins class='jstree-icon'>&#160;</ins>"); if (e.children) { if (v.progressive_render && e.state !== "open") { n.addClass("jstree-closed").data("jstree_children", e.children) } else { if (v.progressive_unload) { n.data("jstree_children", e.children) } if (d.isArray(e.children) && e.children.length) { m = this._parse_json(e.children, l, true); if (m.length) { o = d("<ul />"); o.append(m); n.append(o) } } } } } if (!r) { q = d("<ul />"); q.append(n); n = q } return n }, get_json: function (l, g, e, p) { var u = [], r = this._get_settings(), m = this, j, h, o, n, q, f; l = this._get_node(l); if (!l || l === -1) { l = this.get_container().find("> ul > li") } g = d.isArray(g) ? g : ["id", "class"]; if (!p && this.data.types) { g.push(r.types.type_attr) } e = d.isArray(e) ? e : []; l.each(function () { o = d(this); j = { data: [] }; if (g.length) { j.attr = {} } d.each(g, function (t, s) { h = o.attr(s); if (h && h.length && h.replace(/jstree[^ ]*/ig, "").length) { j.attr[s] = (" " + h).replace(/ jstree[^ ]*/ig, "").replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "") } }); if (o.hasClass("jstree-open")) { j.state = "open" } if (o.hasClass("jstree-closed")) { j.state = "closed" } if (o.data()) { j.metadata = o.data() } n = o.children("a"); n.each(function () { q = d(this); if (e.length || d.inArray("languages", r.plugins) !== -1 || q.children("ins").get(0).style.backgroundImage.length || (q.children("ins").get(0).className && q.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, "").length)) { f = false; if (d.inArray("languages", r.plugins) !== -1 && d.isArray(r.languages) && r.languages.length) { d.each(r.languages, function (s, t) { if (q.hasClass(t)) { f = t; return false } }) } h = { attr: {}, title: m.get_text(q, f) }; d.each(e, function (s, t) { h.attr[t] = (" " + (q.attr(t) || "")).replace(/ jstree[^ ]*/ig, "").replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "") }); if (d.inArray("languages", r.plugins) !== -1 && d.isArray(r.languages) && r.languages.length) { d.each(r.languages, function (s, t) { if (q.hasClass(t)) { h.language = t; return true } }) } if (q.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, "").replace(/^\s+$/ig, "").length) { h.icon = q.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, "").replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "") } if (q.children("ins").get(0).style.backgroundImage.length) { h.icon = q.children("ins").get(0).style.backgroundImage.replace("url(", "").replace(")", "") } } else { h = m.get_text(q) } if (n.length > 1) { j.data.push(h) } else { j.data = h } }); o = o.find("> ul > li"); if (o.length) { j.children = m.get_json(o, g, e, true) } u.push(j) }); return u } } }) })(jQuery); (function (e) { var d = false; e.jstree.plugin("languages", { __init: function () { this._load_css() }, defaults: [], _fn: { set_lang: function (h) { var j = this._get_settings().languages, g = false, f = ".jstree-" + this.get_index() + " a"; if (!e.isArray(j) || j.length === 0) { return false } if (e.inArray(h, j) == -1) { if (!!j[h]) { h = j[h] } else { return false } } if (h == this.data.languages.current_language) { return true } g = e.vakata.css.get_css(f + "." + this.data.languages.current_language, false, d); if (g !== false) { g.style.display = "none" } g = e.vakata.css.get_css(f + "." + h, false, d); if (g !== false) { g.style.display = "" } this.data.languages.current_language = h; this.__callback(h); return true }, get_lang: function () { return this.data.languages.current_language }, _get_string: function (f, j) { var h = this._get_settings().languages, g = this._get_settings().core.strings; if (e.isArray(h) && h.length) { j = (j && e.inArray(j, h) != -1) ? j : this.data.languages.current_language } if (g[j] && g[j][f]) { return g[j][f] } if (g[f]) { return g[f] } return f }, get_text: function (h, j) { h = this._get_node(h) || this.data.ui.last_selected; if (!h.size()) { return false } var g = this._get_settings().languages, f = this._get_settings().core.html_titles; if (e.isArray(g) && g.length) { j = (j && e.inArray(j, g) != -1) ? j : this.data.languages.current_language; h = h.children("a." + j) } else { h = h.children("a:eq(0)") } if (f) { h = h.clone(); h.children("INS").remove(); return h.html() } else { h = h.contents().filter(function () { return this.nodeType == 3 })[0]; return h.nodeValue } }, set_text: function (j, m, l) { j = this._get_node(j) || this.data.ui.last_selected; if (!j.size()) { return false } var h = this._get_settings().languages, g = this._get_settings().core.html_titles, f; if (e.isArray(h) && h.length) { l = (l && e.inArray(l, h) != -1) ? l : this.data.languages.current_language; j = j.children("a." + l) } else { j = j.children("a:eq(0)") } if (g) { f = j.children("INS").clone(); j.html(m).prepend(f); this.__callback({ obj: j, name: m, lang: l }); return true } else { j = j.contents().filter(function () { return this.nodeType == 3 })[0]; this.__callback({ obj: j, name: m, lang: l }); return (j.nodeValue = m) } }, _load_css: function () { var h = this._get_settings().languages, j = "/* languages css */", f = ".jstree-" + this.get_index() + " a", g; if (e.isArray(h) && h.length) { this.data.languages.current_language = h[0]; for (g = 0; g < h.length; g++) { j += f + "." + h[g] + " {"; if (h[g] != this.data.languages.current_language) { j += " display:none; " } j += " } " } d = e.vakata.css.add_sheet({ str: j, title: "jstree-languages" }) } }, create_node: function (j, f, h, l) { var g = this.__call_old(true, j, f, h, function (n) { var p = this._get_settings().languages, m = n.children("a"), o; if (e.isArray(p) && p.length) { for (o = 0; o < p.length; o++) { if (!m.is("." + p[o])) { n.append(m.eq(0).clone().removeClass(p.join(" ")).addClass(p[o])) } } m.not("." + p.join(", .")).remove() } if (l) { l.call(this, n) } }); return g } } }) })(jQuery); (function (d) { d.jstree.plugin("cookies", { __init: function () { if (typeof d.cookie === "undefined") { throw "jsTree cookie: jQuery cookie plugin not included." } var f = this._get_settings().cookies, e; if (!!f.save_loaded) { e = d.cookie(f.save_loaded); if (e && e.length) { this.data.core.to_load = e.split(",") } } if (!!f.save_opened) { e = d.cookie(f.save_opened); if (e && e.length) { this.data.core.to_open = e.split(",") } } if (!!f.save_selected) { e = d.cookie(f.save_selected); if (e && e.length && this.data.ui) { this.data.ui.to_select = e.split(",") } } this.get_container().one((this.data.ui ? "reselect" : "reopen") + ".jstree", d.proxy(function () { this.get_container().bind("open_node.jstree close_node.jstree select_node.jstree deselect_node.jstree", d.proxy(function (g) { if (this._get_settings().cookies.auto_save) { this.save_cookie((g.handleObj.namespace + g.handleObj.type).replace("jstree", "")) } }, this)) }, this)) }, defaults: { save_loaded: "jstree_load", save_opened: "jstree_open", save_selected: "jstree_select", auto_save: true, cookie_options: {} }, _fn: { save_cookie: function (f) { if (this.data.core.refreshing) { return } var e = this._get_settings().cookies; if (!f) { if (e.save_loaded) { this.save_loaded(); d.cookie(e.save_loaded, this.data.core.to_load.join(","), e.cookie_options) } if (e.save_opened) { this.save_opened(); d.cookie(e.save_opened, this.data.core.to_open.join(","), e.cookie_options) } if (e.save_selected && this.data.ui) { this.save_selected(); d.cookie(e.save_selected, this.data.ui.to_select.join(","), e.cookie_options) } return } switch (f) { case "open_node": case "close_node": if (!!e.save_opened) { this.save_opened(); d.cookie(e.save_opened, this.data.core.to_open.join(","), e.cookie_options) } if (!!e.save_loaded) { this.save_loaded(); d.cookie(e.save_loaded, this.data.core.to_load.join(","), e.cookie_options) } break; case "select_node": case "deselect_node": if (!!e.save_selected && this.data.ui) { this.save_selected(); d.cookie(e.save_selected, this.data.ui.to_select.join(","), e.cookie_options) } break } } } }) })(jQuery); (function (d) { d.jstree.plugin("sort", { __init: function () { this.get_container().bind("load_node.jstree", d.proxy(function (h, f) { var g = this._get_node(f.rslt.obj); g = g === -1 ? this.get_container().children("ul") : g.children("ul"); this.sort(g) }, this)).bind("rename_node.jstree create_node.jstree create.jstree", d.proxy(function (g, f) { this.sort(f.rslt.obj.parent()) }, this)).bind("move_node.jstree", d.proxy(function (h, g) { var f = g.rslt.np == -1 ? this.get_container() : g.rslt.np; this.sort(f.children("ul")) }, this)) }, defaults: function (f, e) { return this.get_text(f) > this.get_text(e) ? 1 : -1 }, _fn: { sort: function (g) { var f = this._get_settings().sort, e = this; g.append(d.makeArray(g.children("li")).sort(d.proxy(f, e))); g.find("> li > ul").each(function () { e.sort(d(this)) }); this.clean_node(g) } } }) })(jQuery); (function (l) { var f = false, d = false, g = false, h = false, n = false, e = false, q = false, p = false, j = false; l.vakata.dnd = { is_down: false, is_drag: false, helper: false, scroll_spd: 10, init_x: 0, init_y: 0, threshold: 5, helper_left: 5, helper_top: 10, user_data: {}, drag_start: function (s, r, m) { if (l.vakata.dnd.is_drag) { l.vakata.drag_stop({}) } try { s.currentTarget.unselectable = "on"; s.currentTarget.onselectstart = function () { return false }; if (s.currentTarget.style) { s.currentTarget.style.MozUserSelect = "none" } } catch (o) { } l.vakata.dnd.init_x = s.pageX; l.vakata.dnd.init_y = s.pageY; l.vakata.dnd.user_data = r; l.vakata.dnd.is_down = true; l.vakata.dnd.helper = l("<div id='vakata-dragged' />").html(m); l(document).bind("mousemove", l.vakata.dnd.drag); l(document).bind("mouseup", l.vakata.dnd.drag_stop); return false }, drag: function (r) { if (!l.vakata.dnd.is_down) { return } if (!l.vakata.dnd.is_drag) { if (Math.abs(r.pageX - l.vakata.dnd.init_x) > 5 || Math.abs(r.pageY - l.vakata.dnd.init_y) > 5) { l.vakata.dnd.helper.appendTo("body"); l.vakata.dnd.is_drag = true; l(document).triggerHandler("drag_start.vakata", { event: r, data: l.vakata.dnd.user_data }) } else { return } } if (r.type === "mousemove") { var s = l(document), o = s.scrollTop(), m = s.scrollLeft(); if (r.pageY - o < 20) { if (e && q === "down") { clearInterval(e); e = false } if (!e) { q = "up"; e = setInterval(function () { l(document).scrollTop(l(document).scrollTop() - l.vakata.dnd.scroll_spd) }, 150) } } else { if (e && q === "up") { clearInterval(e); e = false } } if (l(window).height() - (r.pageY - o) < 20) { if (e && q === "up") { clearInterval(e); e = false } if (!e) { q = "down"; e = setInterval(function () { l(document).scrollTop(l(document).scrollTop() + l.vakata.dnd.scroll_spd) }, 150) } } else { if (e && q === "down") { clearInterval(e); e = false } } if (r.pageX - m < 20) { if (n && p === "right") { clearInterval(n); n = false } if (!n) { p = "left"; n = setInterval(function () { l(document).scrollLeft(l(document).scrollLeft() - l.vakata.dnd.scroll_spd) }, 150) } } else { if (n && p === "left") { clearInterval(n); n = false } } if (l(window).width() - (r.pageX - m) < 20) { if (n && p === "left") { clearInterval(n); n = false } if (!n) { p = "right"; n = setInterval(function () { l(document).scrollLeft(l(document).scrollLeft() + l.vakata.dnd.scroll_spd) }, 150) } } else { if (n && p === "right") { clearInterval(n); n = false } } } l.vakata.dnd.helper.css({ left: (r.pageX + l.vakata.dnd.helper_left) + "px", top: (r.pageY + l.vakata.dnd.helper_top) + "px" }); l(document).triggerHandler("drag.vakata", { event: r, data: l.vakata.dnd.user_data }) }, drag_stop: function (m) { if (n) { clearInterval(n) } if (e) { clearInterval(e) } l(document).unbind("mousemove", l.vakata.dnd.drag); l(document).unbind("mouseup", l.vakata.dnd.drag_stop); l(document).triggerHandler("drag_stop.vakata", { event: m, data: l.vakata.dnd.user_data }); l.vakata.dnd.helper.remove(); l.vakata.dnd.init_x = 0; l.vakata.dnd.init_y = 0; l.vakata.dnd.user_data = {}; l.vakata.dnd.is_down = false; l.vakata.dnd.is_drag = false } }; l(function () { var m = "#vakata-dragged { display:block; margin:0 0 0 0; padding:4px 4px 4px 24px; position:absolute; top:-2000px; line-height:16px; z-index:10000; } "; l.vakata.css.add_sheet({ str: m, title: "vakata" }) }); l.jstree.plugin("dnd", { __init: function () { this.data.dnd = { active: false, after: false, inside: false, before: false, off: false, prepared: false, w: 0, to1: false, to2: false, cof: false, cw: false, ch: false, i1: false, i2: false, mto: false }; this.get_container().bind("mouseenter.jstree", l.proxy(function (s) { if (l.vakata.dnd.is_drag && l.vakata.dnd.user_data.jstree) { if (this.data.themes) { g.attr("class", "jstree-" + this.data.themes.theme); if (h) { h.attr("class", "jstree-" + this.data.themes.theme) } l.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-" + this.data.themes.theme) } if (s.currentTarget === s.target && l.vakata.dnd.user_data.obj && l(l.vakata.dnd.user_data.obj).length && l(l.vakata.dnd.user_data.obj).parents(".jstree:eq(0)")[0] !== s.target) { var r = l.jstree._reference(s.target), o; if (r.data.dnd.foreign) { o = r._get_settings().dnd.drag_check.call(this, { o: f, r: r.get_container(), is_root: true }); if (o === true || o.inside === true || o.before === true || o.after === true) { l.vakata.dnd.helper.children("ins").attr("class", "jstree-ok") } } else { r.prepare_move(f, r.get_container(), "last"); if (r.check_move()) { l.vakata.dnd.helper.children("ins").attr("class", "jstree-ok") } } } } }, this)).bind("mouseup.jstree", l.proxy(function (s) { if (l.vakata.dnd.is_drag && l.vakata.dnd.user_data.jstree && s.currentTarget === s.target && l.vakata.dnd.user_data.obj && l(l.vakata.dnd.user_data.obj).length && l(l.vakata.dnd.user_data.obj).parents(".jstree:eq(0)")[0] !== s.target) { var r = l.jstree._reference(s.currentTarget), o; if (r.data.dnd.foreign) { o = r._get_settings().dnd.drag_check.call(this, { o: f, r: r.get_container(), is_root: true }); if (o === true || o.inside === true || o.before === true || o.after === true) { r._get_settings().dnd.drag_finish.call(this, { o: f, r: r.get_container(), is_root: true }) } } else { r.move_node(f, r.get_container(), "last", s[r._get_settings().dnd.copy_modifier + "Key"]) } } }, this)).bind("mouseleave.jstree", l.proxy(function (o) { if (o.relatedTarget && o.relatedTarget.id && o.relatedTarget.id === "jstree-marker-line") { return false } if (l.vakata.dnd.is_drag && l.vakata.dnd.user_data.jstree) { if (this.data.dnd.i1) { clearInterval(this.data.dnd.i1) } if (this.data.dnd.i2) { clearInterval(this.data.dnd.i2) } if (this.data.dnd.to1) { clearTimeout(this.data.dnd.to1) } if (this.data.dnd.to2) { clearTimeout(this.data.dnd.to2) } if (l.vakata.dnd.helper.children("ins").hasClass("jstree-ok")) { l.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid") } } }, this)).bind("mousemove.jstree", l.proxy(function (r) { if (l.vakata.dnd.is_drag && l.vakata.dnd.user_data.jstree) { var o = this.get_container()[0]; if (r.pageX + 24 > this.data.dnd.cof.left + this.data.dnd.cw) { if (this.data.dnd.i1) { clearInterval(this.data.dnd.i1) } this.data.dnd.i1 = setInterval(l.proxy(function () { this.scrollLeft += l.vakata.dnd.scroll_spd }, o), 100) } else { if (r.pageX - 24 < this.data.dnd.cof.left) { if (this.data.dnd.i1) { clearInterval(this.data.dnd.i1) } this.data.dnd.i1 = setInterval(l.proxy(function () { this.scrollLeft -= l.vakata.dnd.scroll_spd }, o), 100) } else { if (this.data.dnd.i1) { clearInterval(this.data.dnd.i1) } } } if (r.pageY + 24 > this.data.dnd.cof.top + this.data.dnd.ch) { if (this.data.dnd.i2) { clearInterval(this.data.dnd.i2) } this.data.dnd.i2 = setInterval(l.proxy(function () { this.scrollTop += l.vakata.dnd.scroll_spd }, o), 100) } else { if (r.pageY - 24 < this.data.dnd.cof.top) { if (this.data.dnd.i2) { clearInterval(this.data.dnd.i2) } this.data.dnd.i2 = setInterval(l.proxy(function () { this.scrollTop -= l.vakata.dnd.scroll_spd }, o), 100) } else { if (this.data.dnd.i2) { clearInterval(this.data.dnd.i2) } } } } }, this)).bind("scroll.jstree", l.proxy(function (o) { if (l.vakata.dnd.is_drag && l.vakata.dnd.user_data.jstree && g && h) { g.hide(); h.hide() } }, this)).delegate("a", "mousedown.jstree", l.proxy(function (o) { if (o.which === 1) { this.start_drag(o.currentTarget, o); return false } }, this)).delegate("a", "mouseenter.jstree", l.proxy(function (o) { if (l.vakata.dnd.is_drag && l.vakata.dnd.user_data.jstree) { this.dnd_enter(o.currentTarget) } }, this)).delegate("a", "mousemove.jstree", l.proxy(function (o) { if (l.vakata.dnd.is_drag && l.vakata.dnd.user_data.jstree) { if (!d || !d.length || d.children("a")[0] !== o.currentTarget) { this.dnd_enter(o.currentTarget) } if (typeof this.data.dnd.off.top === "undefined") { this.data.dnd.off = l(o.target).offset() } this.data.dnd.w = (o.pageY - (this.data.dnd.off.top || 0)) % this.data.core.li_height; if (this.data.dnd.w < 0) { this.data.dnd.w += this.data.core.li_height } this.dnd_show() } }, this)).delegate("a", "mouseleave.jstree", l.proxy(function (o) { if (l.vakata.dnd.is_drag && l.vakata.dnd.user_data.jstree) { if (o.relatedTarget && o.relatedTarget.id && o.relatedTarget.id === "jstree-marker-line") { return false } if (g) { g.hide() } if (h) { h.hide() } this.data.dnd.mto = setTimeout((function (r) { return function () { r.dnd_leave(o) } })(this), 0) } }, this)).delegate("a", "mouseup.jstree", l.proxy(function (o) { if (l.vakata.dnd.is_drag && l.vakata.dnd.user_data.jstree) { this.dnd_finish(o) } }, this)); l(document).bind("drag_stop.vakata", l.proxy(function () { if (this.data.dnd.to1) { clearTimeout(this.data.dnd.to1) } if (this.data.dnd.to2) { clearTimeout(this.data.dnd.to2) } if (this.data.dnd.i1) { clearInterval(this.data.dnd.i1) } if (this.data.dnd.i2) { clearInterval(this.data.dnd.i2) } this.data.dnd.after = false; this.data.dnd.before = false; this.data.dnd.inside = false; this.data.dnd.off = false; this.data.dnd.prepared = false; this.data.dnd.w = false; this.data.dnd.to1 = false; this.data.dnd.to2 = false; this.data.dnd.i1 = false; this.data.dnd.i2 = false; this.data.dnd.active = false; this.data.dnd.foreign = false; if (g) { g.css({ top: "-2000px" }) } if (h) { h.css({ top: "-2000px" }) } }, this)).bind("drag_start.vakata", l.proxy(function (s, o) { if (o.data.jstree) { var r = l(o.event.target); if (r.closest(".jstree").hasClass("jstree-" + this.get_index())) { this.dnd_enter(r) } } }, this)); var m = this._get_settings().dnd; if (m.drag_target) { l(document).delegate(m.drag_target, "mousedown.jstree-" + this.get_index(), l.proxy(function (r) { f = r.target; l.vakata.dnd.drag_start(r, { jstree: true, obj: r.target }, "<ins class='jstree-icon'></ins>" + l(r.target).text()); if (this.data.themes) { if (g) { g.attr("class", "jstree-" + this.data.themes.theme) } if (h) { h.attr("class", "jstree-" + this.data.themes.theme) } l.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-" + this.data.themes.theme) } l.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid"); var o = this.get_container(); this.data.dnd.cof = o.offset(); this.data.dnd.cw = parseInt(o.width(), 10); this.data.dnd.ch = parseInt(o.height(), 10); this.data.dnd.foreign = true; r.preventDefault() }, this)) } if (m.drop_target) { l(document).delegate(m.drop_target, "mouseenter.jstree-" + this.get_index(), l.proxy(function (o) { if (this.data.dnd.active && this._get_settings().dnd.drop_check.call(this, { o: f, r: l(o.target), e: o })) { l.vakata.dnd.helper.children("ins").attr("class", "jstree-ok") } }, this)).delegate(m.drop_target, "mouseleave.jstree-" + this.get_index(), l.proxy(function (o) { if (this.data.dnd.active) { l.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid") } }, this)).delegate(m.drop_target, "mouseup.jstree-" + this.get_index(), l.proxy(function (o) { if (this.data.dnd.active && l.vakata.dnd.helper.children("ins").hasClass("jstree-ok")) { this._get_settings().dnd.drop_finish.call(this, { o: f, r: l(o.target), e: o }) } }, this)) } }, defaults: { copy_modifier: "ctrl", check_timeout: 100, open_timeout: 500, drop_target: ".jstree-drop", drop_check: function (m) { return true }, drop_finish: l.noop, drag_target: ".jstree-draggable", drag_finish: l.noop, drag_check: function (m) { return { after: false, before: false, inside: true } } }, _fn: { dnd_prepare: function () { if (!d || !d.length) { return } this.data.dnd.off = d.offset(); if (this._get_settings().core.rtl) { this.data.dnd.off.right = this.data.dnd.off.left + d.width() } if (this.data.dnd.foreign) { var m = this._get_settings().dnd.drag_check.call(this, { o: f, r: d }); this.data.dnd.after = m.after; this.data.dnd.before = m.before; this.data.dnd.inside = m.inside; this.data.dnd.prepared = true; return this.dnd_show() } this.prepare_move(f, d, "before"); this.data.dnd.before = this.check_move(); this.prepare_move(f, d, "after"); this.data.dnd.after = this.check_move(); if (this._is_loaded(d)) { this.prepare_move(f, d, "inside"); this.data.dnd.inside = this.check_move() } else { this.data.dnd.inside = false } this.data.dnd.prepared = true; return this.dnd_show() }, dnd_show: function () { if (!this.data.dnd.prepared) { return } var t = ["before", "inside", "after"], m = false, s = this._get_settings().core.rtl, u; if (this.data.dnd.w < this.data.core.li_height / 3) { t = ["before", "inside", "after"] } else { if (this.data.dnd.w <= this.data.core.li_height * 2 / 3) { t = this.data.dnd.w < this.data.core.li_height / 2 ? ["inside", "before", "after"] : ["inside", "after", "before"] } else { t = ["after", "inside", "before"] } } l.each(t, l.proxy(function (o, r) { if (this.data.dnd[r]) { l.vakata.dnd.helper.children("ins").attr("class", "jstree-ok"); m = r; return false } }, this)); if (m === false) { l.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid") } u = s ? (this.data.dnd.off.right - 18) : (this.data.dnd.off.left + 10); switch (m) { case "before": g.css({ left: u + "px", top: (this.data.dnd.off.top - 6) + "px" }).show(); if (h) { h.css({ left: (u + 8) + "px", top: (this.data.dnd.off.top - 1) + "px" }).show() } break; case "after": g.css({ left: u + "px", top: (this.data.dnd.off.top + this.data.core.li_height - 6) + "px" }).show(); if (h) { h.css({ left: (u + 8) + "px", top: (this.data.dnd.off.top + this.data.core.li_height - 1) + "px" }).show() } break; case "inside": g.css({ left: u + (s ? -4 : 4) + "px", top: (this.data.dnd.off.top + this.data.core.li_height / 2 - 5) + "px" }).show(); if (h) { h.hide() } break; default: g.hide(); if (h) { h.hide() } break } j = m; return m }, dnd_open: function () { this.data.dnd.to2 = false; this.open_node(d, l.proxy(this.dnd_prepare, this), true) }, dnd_finish: function (m) { if (this.data.dnd.foreign) { if (this.data.dnd.after || this.data.dnd.before || this.data.dnd.inside) { this._get_settings().dnd.drag_finish.call(this, { o: f, r: d, p: j }) } } else { this.dnd_prepare(); this.move_node(f, d, j, m[this._get_settings().dnd.copy_modifier + "Key"]) } f = false; d = false; g.hide(); if (h) { h.hide() } }, dnd_enter: function (o) { if (this.data.dnd.mto) { clearTimeout(this.data.dnd.mto); this.data.dnd.mto = false } var m = this._get_settings().dnd; this.data.dnd.prepared = false; d = this._get_node(o); if (m.check_timeout) { if (this.data.dnd.to1) { clearTimeout(this.data.dnd.to1) } this.data.dnd.to1 = setTimeout(l.proxy(this.dnd_prepare, this), m.check_timeout) } else { this.dnd_prepare() } if (m.open_timeout) { if (this.data.dnd.to2) { clearTimeout(this.data.dnd.to2) } if (d && d.length && d.hasClass("jstree-closed")) { this.data.dnd.to2 = setTimeout(l.proxy(this.dnd_open, this), m.open_timeout) } } else { if (d && d.length && d.hasClass("jstree-closed")) { this.dnd_open() } } }, dnd_leave: function (m) { this.data.dnd.after = false; this.data.dnd.before = false; this.data.dnd.inside = false; l.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid"); g.hide(); if (h) { h.hide() } if (d && d[0] === m.target.parentNode) { if (this.data.dnd.to1) { clearTimeout(this.data.dnd.to1); this.data.dnd.to1 = false } if (this.data.dnd.to2) { clearTimeout(this.data.dnd.to2); this.data.dnd.to2 = false } } }, start_drag: function (s, r) { f = this._get_node(s); if (this.data.ui && this.is_selected(f)) { f = this._get_node(null, true) } var o = f.length > 1 ? this._get_string("multiple_selection") : this.get_text(f), m = this.get_container(); if (!this._get_settings().core.html_titles) { o = o.replace(/</ig, "&lt;").replace(/>/ig, "&gt;") } l.vakata.dnd.drag_start(r, { jstree: true, obj: f }, "<ins class='jstree-icon'></ins>" + o); if (this.data.themes) { if (g) { g.attr("class", "jstree-" + this.data.themes.theme) } if (h) { h.attr("class", "jstree-" + this.data.themes.theme) } l.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-" + this.data.themes.theme) } this.data.dnd.cof = m.offset(); this.data.dnd.cw = parseInt(m.width(), 10); this.data.dnd.ch = parseInt(m.height(), 10); this.data.dnd.active = true } } }); l(function () { var m = "#vakata-dragged ins { display:block; text-decoration:none; width:16px; height:16px; margin:0 0 0 0; padding:0; position:absolute; top:4px; left:4px;  -moz-border-radius:4px; border-radius:4px; -webkit-border-radius:4px; } #vakata-dragged .jstree-ok { background:green; } #vakata-dragged .jstree-invalid { background:red; } #jstree-marker { padding:0; margin:0; font-size:12px; overflow:hidden; height:12px; width:8px; position:absolute; top:-30px; z-index:10001; background-repeat:no-repeat; display:none; background-color:transparent; text-shadow:1px 1px 1px white; color:black; line-height:10px; } #jstree-marker-line { padding:0; margin:0; line-height:0%; font-size:1px; overflow:hidden; height:1px; width:100px; position:absolute; top:-30px; z-index:10000; background-repeat:no-repeat; display:none; background-color:#456c43;  cursor:pointer; border:1px solid #eeeeee; border-left:0; -moz-box-shadow: 0px 0px 2px #666; -webkit-box-shadow: 0px 0px 2px #666; box-shadow: 0px 0px 2px #666;  -moz-border-radius:1px; border-radius:1px; -webkit-border-radius:1px; }"; l.vakata.css.add_sheet({ str: m, title: "jstree" }); g = l("<div />").attr({ id: "jstree-marker" }).hide().html("&raquo;").bind("mouseleave mouseenter", function (o) { g.hide(); h.hide(); o.preventDefault(); o.stopImmediatePropagation(); return false }).appendTo("body"); h = l("<div />").attr({ id: "jstree-marker-line" }).hide().bind("mouseup", function (o) { if (d && d.length) { d.children("a").trigger(o); o.preventDefault(); o.stopImmediatePropagation(); return false } }).bind("mouseleave", function (r) { var o = l(r.relatedTarget); if (o.is(".jstree") || o.closest(".jstree").length === 0) { if (d && d.length) { d.children("a").trigger(r); g.hide(); h.hide(); r.preventDefault(); r.stopImmediatePropagation(); return false } } }).appendTo("body"); l(document).bind("drag_start.vakata", function (r, o) { if (o.data.jstree) { g.show(); if (h) { h.show() } } }); l(document).bind("drag_stop.vakata", function (r, o) { if (o.data.jstree) { g.hide(); if (h) { h.hide() } } }) }) })(jQuery); (function (d) { d.jstree.plugin("checkbox", { __init: function () { this.data.checkbox.noui = this._get_settings().checkbox.override_ui; if (this.data.ui && this.data.checkbox.noui) { this.select_node = this.deselect_node = this.deselect_all = d.noop; this.get_selected = this.get_checked } this.get_container().bind("open_node.jstree create_node.jstree clean_node.jstree refresh.jstree", d.proxy(function (g, f) { this._prepare_checkboxes(f.rslt.obj) }, this)).bind("loaded.jstree", d.proxy(function (f) { this._prepare_checkboxes() }, this)).delegate((this.data.ui && this.data.checkbox.noui ? "a" : "ins.jstree-checkbox"), "click.jstree", d.proxy(function (f) { f.preventDefault(); if (this._get_node(f.target).hasClass("jstree-checked")) { this.uncheck_node(f.target) } else { this.check_node(f.target) } if (this.data.ui && this.data.checkbox.noui) { this.save_selected(); if (this.data.cookies) { this.save_cookie("select_node") } } else { f.stopImmediatePropagation(); return false } }, this)) }, defaults: { override_ui: false, two_state: false, real_checkboxes: false, checked_parent_open: true, real_checkboxes_names: function (e) { return [("check_" + (e[0].id || Math.ceil(Math.random() * 10000))), 1] } }, __destroy: function () { this.get_container().find("input.jstree-real-checkbox").removeClass("jstree-real-checkbox").end().find("ins.jstree-checkbox").remove() }, _fn: { _checkbox_notify: function (f, e) { if (e.checked) { this.check_node(f, false) } }, _prepare_checkboxes: function (j) { j = !j || j == -1 ? this.get_container().find("> ul > li") : this._get_node(j); if (j === false) { return } var m, l = this, e, g = this._get_settings().checkbox.two_state, h = this._get_settings().checkbox.real_checkboxes, f = this._get_settings().checkbox.real_checkboxes_names; j.each(function () { e = d(this); m = e.is("li") && (e.hasClass("jstree-checked") || (h && e.children(":checked").length)) ? "jstree-checked" : "jstree-unchecked"; e.find("li").addBack().each(function () { var o = d(this), n; o.children("a" + (l.data.languages ? "" : ":eq(0)")).not(":has(.jstree-checkbox)").prepend("<ins class='jstree-checkbox'>&#160;</ins>").parent().not(".jstree-checked, .jstree-unchecked").addClass(g ? "jstree-unchecked" : m); if (h) { if (!o.children(":checkbox").length) { n = f.call(l, o); o.prepend("<input type='checkbox' class='jstree-real-checkbox' id='" + n[0] + "' name='" + n[0] + "' value='" + n[1] + "' />") } else { o.children(":checkbox").addClass("jstree-real-checkbox") } } if (!g) { if (m === "jstree-checked" || o.hasClass("jstree-checked") || o.children(":checked").length) { o.find("li").addBack().addClass("jstree-checked").children(":checkbox").prop("checked", true) } } else { if (o.hasClass("jstree-checked") || o.children(":checked").length) { o.addClass("jstree-checked").children(":checkbox").prop("checked", true) } } }) }); if (!g) { j.find(".jstree-checked").parent().parent().each(function () { l._repair_state(this) }) } }, change_state: function (h, g) { h = this._get_node(h); var e = false, f = this._get_settings().checkbox.real_checkboxes; if (!h || h === -1) { return false } g = (g === false || g === true) ? g : h.hasClass("jstree-checked"); if (this._get_settings().checkbox.two_state) { if (g) { h.removeClass("jstree-checked").addClass("jstree-unchecked"); if (f) { h.children(":checkbox").prop("checked", false) } } else { h.removeClass("jstree-unchecked").addClass("jstree-checked"); if (f) { h.children(":checkbox").prop("checked", true) } } } else { if (g) { e = h.find("li").addBack(); if (!e.filter(".jstree-checked, .jstree-undetermined").length) { return false } e.removeClass("jstree-checked jstree-undetermined").addClass("jstree-unchecked"); if (f) { e.children(":checkbox").prop("checked", false) } } else { e = h.find("li").addBack(); if (!e.filter(".jstree-unchecked, .jstree-undetermined").length) { return false } e.removeClass("jstree-unchecked jstree-undetermined").addClass("jstree-checked"); if (f) { e.children(":checkbox").prop("checked", true) } if (this.data.ui) { this.data.ui.last_selected = h } this.data.checkbox.last_selected = h } h.parentsUntil(".jstree", "li").each(function () { var j = d(this); if (g) { if (j.children("ul").children("li.jstree-checked, li.jstree-undetermined").length) { j.parentsUntil(".jstree", "li").addBack().removeClass("jstree-checked jstree-unchecked").addClass("jstree-undetermined"); if (f) { j.parentsUntil(".jstree", "li").addBack().children(":checkbox").prop("checked", false) } return false } else { j.removeClass("jstree-checked jstree-undetermined").addClass("jstree-unchecked"); if (f) { j.children(":checkbox").prop("checked", false) } } } else { if (j.children("ul").children("li.jstree-unchecked, li.jstree-undetermined").length) { j.parentsUntil(".jstree", "li").addBack().removeClass("jstree-checked jstree-unchecked").addClass("jstree-undetermined"); if (f) { j.parentsUntil(".jstree", "li").addBack().children(":checkbox").prop("checked", false) } return false } else { j.removeClass("jstree-unchecked jstree-undetermined").addClass("jstree-checked"); if (f) { j.children(":checkbox").prop("checked", true) } } } }) } if (this.data.ui && this.data.checkbox.noui) { this.data.ui.selected = this.get_checked() } this.__callback(h); return true }, check_node: function (f) { if (this.change_state(f, false)) { f = this._get_node(f); if (this._get_settings().checkbox.checked_parent_open) { var e = this; f.parents(".jstree-closed").each(function () { e.open_node(this, false, true) }) } this.__callback({ obj: f }) } }, uncheck_node: function (e) { if (this.change_state(e, true)) { this.__callback({ obj: this._get_node(e) }) } }, check_all: function () { var f = this, e = this._get_settings().checkbox.two_state ? this.get_container_ul().find("li") : this.get_container_ul().children("li"); e.each(function () { f.change_state(this, false) }); this.__callback() }, uncheck_all: function () { var f = this, e = this._get_settings().checkbox.two_state ? this.get_container_ul().find("li") : this.get_container_ul().children("li"); e.each(function () { f.change_state(this, true) }); this.__callback() }, is_checked: function (e) { e = this._get_node(e); return e.length ? e.is(".jstree-checked") : false }, get_checked: function (f, e) { f = !f || f === -1 ? this.get_container() : this._get_node(f); return e || this._get_settings().checkbox.two_state ? f.find(".jstree-checked") : f.find("> ul > .jstree-checked, .jstree-undetermined > ul > .jstree-checked") }, get_unchecked: function (f, e) { f = !f || f === -1 ? this.get_container() : this._get_node(f); return e || this._get_settings().checkbox.two_state ? f.find(".jstree-unchecked") : f.find("> ul > .jstree-unchecked, .jstree-undetermined > ul > .jstree-unchecked") }, show_checkboxes: function () { this.get_container().children("ul").removeClass("jstree-no-checkboxes") }, hide_checkboxes: function () { this.get_container().children("ul").addClass("jstree-no-checkboxes") }, _repair_state: function (h) { h = this._get_node(h); if (!h.length) { return } if (this._get_settings().checkbox.two_state) { h.find("li").addBack().not(".jstree-checked").removeClass("jstree-undetermined").addClass("jstree-unchecked").children(":checkbox").prop("checked", true); return } var g = this._get_settings().checkbox.real_checkboxes, f = h.find("> ul > .jstree-checked").length, e = h.find("> ul > .jstree-undetermined").length, j = h.find("> ul > li").length; if (j === 0) { if (h.hasClass("jstree-undetermined")) { this.change_state(h, false) } } else { if (f === 0 && e === 0) { this.change_state(h, true) } else { if (f === j) { this.change_state(h, false) } else { h.parentsUntil(".jstree", "li").addBack().removeClass("jstree-checked jstree-unchecked").addClass("jstree-undetermined"); if (g) { h.parentsUntil(".jstree", "li").addBack().children(":checkbox").prop("checked", false) } } } } }, reselect: function () { if (this.data.ui && this.data.checkbox.noui) { var f = this, e = this.data.ui.to_select; e = d.map(d.makeArray(e), function (g) { return "#" + g.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:") }); this.deselect_all(); d.each(e, function (g, h) { f.check_node(h) }); this.__callback() } else { this.__call_old() } }, save_loaded: function () { var e = this; this.data.core.to_load = []; this.get_container_ul().find("li.jstree-closed.jstree-undetermined").each(function () { if (this.id) { e.data.core.to_load.push("#" + this.id) } }) } } }); d(function () { var e = ".jstree .jstree-real-checkbox { display:none; } "; d.vakata.css.add_sheet({ str: e, title: "jstree" }) }) })(jQuery); (function (f) { f.vakata.xslt = function (g, h, t) { var l = false, o, m, j; if (l === false && window.ActiveXObject) { try { l = new ActiveXObject("Msxml2.XSLTemplate"); m = new ActiveXObject("Msxml2.DOMDocument"); m.loadXML(g); j = new ActiveXObject("Msxml2.FreeThreadedDOMDocument"); j.loadXML(h); l.stylesheet = j; o = l.createProcessor(); o.input = m; o.transform(); l = o.output } catch (n) { } } g = f.parseXML(g); h = f.parseXML(h); if (l === false && typeof (XSLTProcessor) !== "undefined") { o = new XSLTProcessor(); o.importStylesheet(h); l = o.transformToFragment(g, document); l = f("<div />").append(l).html() } if (l === false && typeof (g.transformNode) !== "undefined") { l = g.transformNode(h) } t.call(null, l) }; var e = { nest: '<?xml version="1.0" encoding="utf-8" ?><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ><xsl:output method="html" encoding="utf-8" omit-xml-declaration="yes" standalone="no" indent="no" media-type="text/html" /><xsl:template match="/">	<xsl:call-template name="nodes">		<xsl:with-param name="node" select="/root" />	</xsl:call-template></xsl:template><xsl:template name="nodes">	<xsl:param name="node" />	<ul>	<xsl:for-each select="$node/item">		<xsl:variable name="children" select="count(./item) &gt; 0" />		<li>			<xsl:attribute name="class">				<xsl:if test="position() = last()">jstree-last </xsl:if>				<xsl:choose>					<xsl:when test="@state = \'open\'">jstree-open </xsl:when>					<xsl:when test="$children or @hasChildren or @state = \'closed\'">jstree-closed </xsl:when>					<xsl:otherwise>jstree-leaf </xsl:otherwise>				</xsl:choose>				<xsl:value-of select="@class" />			</xsl:attribute>			<xsl:for-each select="@*">				<xsl:if test="name() != \'class\' and name() != \'state\' and name() != \'hasChildren\'">					<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>				</xsl:if>			</xsl:for-each>	<ins class="jstree-icon"><xsl:text>&#xa0;</xsl:text></ins>			<xsl:for-each select="content/name">				<a>				<xsl:attribute name="href">					<xsl:choose>					<xsl:when test="@href"><xsl:value-of select="@href" /></xsl:when>					<xsl:otherwise>#</xsl:otherwise>					</xsl:choose>				</xsl:attribute>				<xsl:attribute name="class"><xsl:value-of select="@lang" /> <xsl:value-of select="@class" /></xsl:attribute>				<xsl:attribute name="style"><xsl:value-of select="@style" /></xsl:attribute>				<xsl:for-each select="@*">					<xsl:if test="name() != \'style\' and name() != \'class\' and name() != \'href\'">						<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>					</xsl:if>				</xsl:for-each>					<ins>						<xsl:attribute name="class">jstree-icon 							<xsl:if test="string-length(attribute::icon) > 0 and not(contains(@icon,\'/\'))"><xsl:value-of select="@icon" /></xsl:if>						</xsl:attribute>						<xsl:if test="string-length(attribute::icon) > 0 and contains(@icon,\'/\')"><xsl:attribute name="style">background:url(<xsl:value-of select="@icon" />) center center no-repeat;</xsl:attribute></xsl:if>						<xsl:text>&#xa0;</xsl:text>					</ins>					<xsl:copy-of select="./child::node()" />				</a>			</xsl:for-each>			<xsl:if test="$children or @hasChildren"><xsl:call-template name="nodes"><xsl:with-param name="node" select="current()" /></xsl:call-template></xsl:if>		</li>	</xsl:for-each>	</ul></xsl:template></xsl:stylesheet>', flat: '<?xml version="1.0" encoding="utf-8" ?><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ><xsl:output method="html" encoding="utf-8" omit-xml-declaration="yes" standalone="no" indent="no" media-type="text/xml" /><xsl:template match="/">	<ul>	<xsl:for-each select="//item[not(@parent_id) or @parent_id=0 or not(@parent_id = //item/@id)]">		<xsl:call-template name="nodes">			<xsl:with-param name="node" select="." />			<xsl:with-param name="is_last" select="number(position() = last())" />		</xsl:call-template>	</xsl:for-each>	</ul></xsl:template><xsl:template name="nodes">	<xsl:param name="node" />	<xsl:param name="is_last" />	<xsl:variable name="children" select="count(//item[@parent_id=$node/attribute::id]) &gt; 0" />	<li>	<xsl:attribute name="class">		<xsl:if test="$is_last = true()">jstree-last </xsl:if>		<xsl:choose>			<xsl:when test="@state = \'open\'">jstree-open </xsl:when>			<xsl:when test="$children or @hasChildren or @state = \'closed\'">jstree-closed </xsl:when>			<xsl:otherwise>jstree-leaf </xsl:otherwise>		</xsl:choose>		<xsl:value-of select="@class" />	</xsl:attribute>	<xsl:for-each select="@*">		<xsl:if test="name() != \'parent_id\' and name() != \'hasChildren\' and name() != \'class\' and name() != \'state\'">		<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>		</xsl:if>	</xsl:for-each>	<ins class="jstree-icon"><xsl:text>&#xa0;</xsl:text></ins>	<xsl:for-each select="content/name">		<a>		<xsl:attribute name="href">			<xsl:choose>			<xsl:when test="@href"><xsl:value-of select="@href" /></xsl:when>			<xsl:otherwise>#</xsl:otherwise>			</xsl:choose>		</xsl:attribute>		<xsl:attribute name="class"><xsl:value-of select="@lang" /> <xsl:value-of select="@class" /></xsl:attribute>		<xsl:attribute name="style"><xsl:value-of select="@style" /></xsl:attribute>		<xsl:for-each select="@*">			<xsl:if test="name() != \'style\' and name() != \'class\' and name() != \'href\'">				<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>			</xsl:if>		</xsl:for-each>			<ins>				<xsl:attribute name="class">jstree-icon 					<xsl:if test="string-length(attribute::icon) > 0 and not(contains(@icon,\'/\'))"><xsl:value-of select="@icon" /></xsl:if>				</xsl:attribute>				<xsl:if test="string-length(attribute::icon) > 0 and contains(@icon,\'/\')"><xsl:attribute name="style">background:url(<xsl:value-of select="@icon" />) center center no-repeat;</xsl:attribute></xsl:if>				<xsl:text>&#xa0;</xsl:text>			</ins>			<xsl:copy-of select="./child::node()" />		</a>	</xsl:for-each>	<xsl:if test="$children">		<ul>		<xsl:for-each select="//item[@parent_id=$node/attribute::id]">			<xsl:call-template name="nodes">				<xsl:with-param name="node" select="." />				<xsl:with-param name="is_last" select="number(position() = last())" />			</xsl:call-template>		</xsl:for-each>		</ul>	</xsl:if>	</li></xsl:template></xsl:stylesheet>' }, d = function (g) { return g.toString().replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;") }; f.jstree.plugin("xml_data", { defaults: { data: false, ajax: false, xsl: "flat", clean_node: false, correct_state: true, get_skip_empty: false, get_include_preamble: true }, _fn: { load_node: function (j, g, h) { var l = this; this.load_node_xml(j, function () { l.__callback({ obj: l._get_node(j) }); g.call(this) }, h) }, _is_loaded: function (h) { var g = this._get_settings().xml_data; h = this._get_node(h); return h == -1 || !h || (!g.ajax && !f.isFunction(g.data)) || h.is(".jstree-open, .jstree-leaf") || h.children("ul").children("li").size() > 0 }, load_node_xml: function (m, g, j) { var l = this.get_settings().xml_data, h = function () { }, n = function () { }; m = this._get_node(m); if (m && m !== -1) { if (m.data("jstree_is_loading")) { return } else { m.data("jstree_is_loading", true) } } switch (!0) { case (!l.data && !l.ajax): throw "Neither data nor ajax settings supplied."; case (f.isFunction(l.data)): l.data.call(this, m, f.proxy(function (o) { this.parse_xml(o, f.proxy(function (p) { if (p) { p = p.replace(/ ?xmlns="[^"]*"/ig, ""); if (p.length > 10) { p = f(p); if (m === -1 || !m) { this.get_container().children("ul").empty().append(p.children()) } else { m.children("a.jstree-loading").removeClass("jstree-loading"); m.append(p); m.removeData("jstree_is_loading") } if (l.clean_node) { this.clean_node(m) } if (g) { g.call(this) } } else { if (m && m !== -1) { m.children("a.jstree-loading").removeClass("jstree-loading"); m.removeData("jstree_is_loading"); if (l.correct_state) { this.correct_state(m); if (g) { g.call(this) } } } else { if (l.correct_state) { this.get_container().children("ul").empty(); if (g) { g.call(this) } } } } } }, this)) }, this)); break; case (!!l.data && !l.ajax) || (!!l.data && !!l.ajax && (!m || m === -1)): if (!m || m == -1) { this.parse_xml(l.data, f.proxy(function (o) { if (o) { o = o.replace(/ ?xmlns="[^"]*"/ig, ""); if (o.length > 10) { o = f(o); this.get_container().children("ul").empty().append(o.children()); if (l.clean_node) { this.clean_node(m) } if (g) { g.call(this) } } } else { if (l.correct_state) { this.get_container().children("ul").empty(); if (g) { g.call(this) } } } }, this)) } break; case (!l.data && !!l.ajax) || (!!l.data && !!l.ajax && m && m !== -1): h = function (p, q, r) { var o = this.get_settings().xml_data.ajax.error; if (o) { o.call(this, p, q, r) } if (m !== -1 && m.length) { m.children("a.jstree-loading").removeClass("jstree-loading"); m.removeData("jstree_is_loading"); if (q === "success" && l.correct_state) { this.correct_state(m) } } else { if (q === "success" && l.correct_state) { this.get_container().children("ul").empty() } } if (j) { j.call(this) } }; n = function (r, p, o) { r = o.responseText; var q = this.get_settings().xml_data.ajax.success; if (q) { r = q.call(this, r, p, o) || r } if (r === "" || (r && r.toString && r.toString().replace(/^[\s\n]+$/, "") === "")) { return h.call(this, o, p, "") } this.parse_xml(r, f.proxy(function (s) { if (s) { s = s.replace(/ ?xmlns="[^"]*"/ig, ""); if (s.length > 10) { s = f(s); if (m === -1 || !m) { this.get_container().children("ul").empty().append(s.children()) } else { m.children("a.jstree-loading").removeClass("jstree-loading"); m.append(s); m.removeData("jstree_is_loading") } if (l.clean_node) { this.clean_node(m) } if (g) { g.call(this) } } else { if (m && m !== -1) { m.children("a.jstree-loading").removeClass("jstree-loading"); m.removeData("jstree_is_loading"); if (l.correct_state) { this.correct_state(m); if (g) { g.call(this) } } } else { if (l.correct_state) { this.get_container().children("ul").empty(); if (g) { g.call(this) } } } } } }, this)) }; l.ajax.context = this; l.ajax.error = h; l.ajax.success = n; if (!l.ajax.dataType) { l.ajax.dataType = "xml" } if (f.isFunction(l.ajax.url)) { l.ajax.url = l.ajax.url.call(this, m) } if (f.isFunction(l.ajax.data)) { l.ajax.data = l.ajax.data.call(this, m) } f.ajax(l.ajax); break } }, parse_xml: function (g, j) { var h = this._get_settings().xml_data; f.vakata.xslt(g, e[h.xsl], j) }, get_xml: function (q, n, j, g, t) { var v = "", u = this._get_settings(), o = this, m, l, r, p, h; if (!q) { q = "flat" } if (!t) { t = 0 } n = this._get_node(n); if (!n || n === -1) { n = this.get_container().find("> ul > li") } j = f.isArray(j) ? j : ["id", "class"]; if (!t && this.data.types && f.inArray(u.types.type_attr, j) === -1) { j.push(u.types.type_attr) } g = f.isArray(g) ? g : []; if (!t) { if (u.xml_data.get_include_preamble) { v += '<?xml version="1.0" encoding="UTF-8"?>' } v += "<root>" } n.each(function () { v += "<item"; r = f(this); f.each(j, function (x, s) { var w = r.attr(s); if (!u.xml_data.get_skip_empty || typeof w !== "undefined") { v += " " + s + '="' + d((" " + (w || "")).replace(/ jstree[^ ]*/ig, "").replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "")) + '"' } }); if (r.hasClass("jstree-open")) { v += ' state="open"' } if (r.hasClass("jstree-closed")) { v += ' state="closed"' } if (q === "flat") { v += ' parent_id="' + d(t) + '"' } v += ">"; v += "<content>"; p = r.children("a"); p.each(function () { m = f(this); h = false; v += "<name"; if (f.inArray("languages", u.plugins) !== -1) { f.each(u.languages, function (s, w) { if (m.hasClass(w)) { v += ' lang="' + d(w) + '"'; h = w; return false } }) } if (g.length) { f.each(g, function (s, x) { var w = m.attr(x); if (!u.xml_data.get_skip_empty || typeof w !== "undefined") { v += " " + x + '="' + d((" " + w || "").replace(/ jstree[^ ]*/ig, "").replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "")) + '"' } }) } if (m.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, "").replace(/^\s+$/ig, "").length) { v += ' icon="' + d(m.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, "").replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "")) + '"' } if (m.children("ins").get(0).style.backgroundImage.length) { v += ' icon="' + d(m.children("ins").get(0).style.backgroundImage.replace("url(", "").replace(")", "").replace(/'/ig, "").replace(/"/ig, "")) + '"' } v += ">"; v += "<![CDATA[" + o.get_text(m, h) + "]]>"; v += "</name>" }); v += "</content>"; l = r[0].id || true; r = r.find("> ul > li"); if (r.length) { l = o.get_xml(q, r, j, g, l) } else { l = "" } if (q == "nest") { v += l } v += "</item>"; if (q == "flat") { v += l } }); if (!t) { v += "</root>" } return v } } }) })(jQuery); (function (d) { if (d().jquery.split(".")[1] >= 8) { d.expr[":"].jstree_contains = d.expr.createPseudo(function (e) { return function (f) { return (f.textContent || f.innerText || "").toLowerCase().indexOf(e.toLowerCase()) >= 0 } }); d.expr[":"].jstree_title_contains = d.expr.createPseudo(function (e) { return function (f) { return (f.getAttribute("title") || "").toLowerCase().indexOf(e.toLowerCase()) >= 0 } }) } else { d.expr[":"].jstree_contains = function (f, g, e) { return (f.textContent || f.innerText || "").toLowerCase().indexOf(e[3].toLowerCase()) >= 0 }; d.expr[":"].jstree_title_contains = function (f, g, e) { return (f.getAttribute("title") || "").toLowerCase().indexOf(e[3].toLowerCase()) >= 0 } } d.jstree.plugin("search", { __init: function () { this.data.search.str = ""; this.data.search.result = d(); if (this._get_settings().search.show_only_matches) { this.get_container().bind("search.jstree", function (g, f) { d(this).children("ul").find("li").hide().removeClass("jstree-last"); f.rslt.nodes.parentsUntil(".jstree").addBack().show().filter("ul").each(function () { d(this).children("li:visible").eq(-1).addClass("jstree-last") }) }).bind("clear_search.jstree", function () { d(this).children("ul").find("li").css("display", "").end().end().jstree("clean_node", -1) }) } }, defaults: { ajax: false, search_method: "jstree_contains", show_only_matches: false }, _fn: { search: function (l, e) { if (d.trim(l) === "") { this.clear_search(); return } var h = this.get_settings().search, g = this, f = function () { }, j = function () { }; this.data.search.str = l; if (!e && h.ajax !== false && this.get_container_ul().find("li.jstree-closed:not(:has(ul)):eq(0)").length > 0) { this.search.supress_callback = true; f = function () { }; j = function (p, n, m) { var o = this.get_settings().search.ajax.success; if (o) { p = o.call(this, p, n, m) || p } this.data.search.to_open = p; this._search_open() }; h.ajax.context = this; h.ajax.error = f; h.ajax.success = j; if (d.isFunction(h.ajax.url)) { h.ajax.url = h.ajax.url.call(this, l) } if (d.isFunction(h.ajax.data)) { h.ajax.data = h.ajax.data.call(this, l) } if (!h.ajax.data) { h.ajax.data = { search_string: l } } if (!h.ajax.dataType || /^json/.exec(h.ajax.dataType)) { h.ajax.dataType = "json" } d.ajax(h.ajax); return } if (this.data.search.result.length) { this.clear_search() } this.data.search.result = this.get_container().find("a" + (this.data.languages ? "." + this.get_lang() : "") + ":" + (h.search_method) + "(" + this.data.search.str + ")"); this.data.search.result.addClass("jstree-search").parent().parents(".jstree-closed").each(function () { g.open_node(this, false, true) }); this.__callback({ nodes: this.data.search.result, str: l }) }, clear_search: function (e) { this.data.search.result.removeClass("jstree-search"); this.__callback(this.data.search.result); this.data.search.result = d() }, _search_open: function (f) { var j = this, e = true, h = [], g = []; if (this.data.search.to_open.length) { d.each(this.data.search.to_open, function (l, m) { if (m == "#") { return true } if (d(m).length && d(m).is(".jstree-closed")) { h.push(m) } else { g.push(m) } }); if (h.length) { this.data.search.to_open = g; d.each(h, function (l, m) { j.open_node(m, function () { j._search_open(true) }) }); e = false } } if (e) { this.search(this.data.search.str, true) } } } }) })(jQuery); (function (d) { d.vakata.context = { hide_on_mouseleave: false, cnt: d("<div id='vakata-contextmenu' />"), vis: false, tgt: false, par: false, func: false, data: false, rtl: false, show: function (r, q, n, l, j, e, m) { d.vakata.context.rtl = !!m; var g = d.vakata.context.parse(r), f, o; if (!g) { return } d.vakata.context.vis = true; d.vakata.context.tgt = q; d.vakata.context.par = e || q || null; d.vakata.context.data = j || null; d.vakata.context.cnt.html(g).css({ visibility: "hidden", display: "block", left: 0, top: 0 }); if (d.vakata.context.hide_on_mouseleave) { d.vakata.context.cnt.one("mouseleave", function (h) { d.vakata.context.hide() }) } f = d.vakata.context.cnt.height(); o = d.vakata.context.cnt.width(); if (n + o > d(document).width()) { n = d(document).width() - (o + 5); d.vakata.context.cnt.find("li > ul").addClass("right") } if (l + f > d(document).height()) { l = l - (f + q[0].offsetHeight); d.vakata.context.cnt.find("li > ul").addClass("bottom") } d.vakata.context.cnt.css({ left: n, top: l }).find("li:has(ul)").bind("mouseenter", function (u) { var p = d(document).width(), t = d(document).height(), s = d(this).children("ul").show(); if (p !== d(document).width()) { s.toggleClass("right") } if (t !== d(document).height()) { s.toggleClass("bottom") } }).bind("mouseleave", function (h) { d(this).children("ul").hide() }).end().css({ visibility: "visible" }).show(); d(document).triggerHandler("context_show.vakata") }, hide: function () { d.vakata.context.vis = false; d.vakata.context.cnt.attr("class", "").css({ visibility: "hidden" }); d(document).triggerHandler("context_hide.vakata") }, parse: function (h, g) { if (!h) { return false } var j = "", f = false, e = true; if (!g) { d.vakata.context.func = {} } j += "<ul>"; d.each(h, function (l, m) { if (!m) { return true } d.vakata.context.func[l] = m.action; if (!e && m.separator_before) { j += "<li class='vakata-separator vakata-separator-before'></li>" } e = false; j += "<li class='" + (m._class || "") + (m._disabled ? " jstree-contextmenu-disabled " : "") + "'><ins "; if (m.icon && m.icon.indexOf("/") === -1) { j += " class='" + m.icon + "' " } if (m.icon && m.icon.indexOf("/") !== -1) { j += " style='background:url(" + m.icon + ") center center no-repeat;' " } j += ">&#160;</ins><a href='#' rel='" + l + "'>"; if (m.submenu) { j += "<span style='float:" + (d.vakata.context.rtl ? "left" : "right") + ";'>&raquo;</span>" } j += m.label + "</a>"; if (m.submenu) { f = d.vakata.context.parse(m.submenu, true); if (f) { j += f } } j += "</li>"; if (m.separator_after) { j += "<li class='vakata-separator vakata-separator-after'></li>"; e = true } }); j = j.replace(/<li class\='vakata-separator vakata-separator-after'\><\/li\>$/, ""); j += "</ul>"; d(document).triggerHandler("context_parse.vakata"); return j.length > 10 ? j : false }, exec: function (e) { if (d.isFunction(d.vakata.context.func[e])) { d.vakata.context.func[e].call(d.vakata.context.data, d.vakata.context.par); return true } else { return false } } }; d(function () { var e = "#vakata-contextmenu { display:block; visibility:hidden; left:0; top:-200px; position:absolute; margin:0; padding:0; min-width:180px; background:#ebebeb; border:1px solid silver; z-index:10000; *width:180px; } #vakata-contextmenu ul { min-width:180px; *width:180px; } #vakata-contextmenu ul, #vakata-contextmenu li { margin:0; padding:0; list-style-type:none; display:block; } #vakata-contextmenu li { line-height:20px; min-height:20px; position:relative; padding:0px; } #vakata-contextmenu li a { padding:1px 6px; line-height:17px; display:block; text-decoration:none; margin:1px 1px 0 1px; } #vakata-contextmenu li ins { float:left; width:16px; height:16px; text-decoration:none; margin-right:2px; } #vakata-contextmenu li a:hover, #vakata-contextmenu li.vakata-hover > a { background:gray; color:white; } #vakata-contextmenu li ul { display:none; position:absolute; top:-2px; left:100%; background:#ebebeb; border:1px solid gray; } #vakata-contextmenu .right { right:100%; left:auto; } #vakata-contextmenu .bottom { bottom:-1px; top:auto; } #vakata-contextmenu li.vakata-separator { min-height:0; height:1px; line-height:1px; font-size:1px; overflow:hidden; margin:0 2px; background:silver; /* border-top:1px solid #fefefe; */ padding:0; } "; d.vakata.css.add_sheet({ str: e, title: "vakata" }); d.vakata.context.cnt.delegate("a", "click", function (f) { f.preventDefault() }).delegate("a", "mouseup", function (f) { if (!d(this).parent().hasClass("jstree-contextmenu-disabled") && d.vakata.context.exec(d(this).attr("rel"))) { d.vakata.context.hide() } else { d(this).blur() } }).delegate("a", "mouseover", function () { d.vakata.context.cnt.find(".vakata-hover").removeClass("vakata-hover") }).appendTo("body"); d(document).bind("mousedown", function (f) { if (d.vakata.context.vis && !d.contains(d.vakata.context.cnt[0], f.target)) { d.vakata.context.hide() } }); if (typeof d.hotkeys !== "undefined") { d(document).bind("keydown", "up", function (f) { if (d.vakata.context.vis) { var g = d.vakata.context.cnt.find("ul:visible").last().children(".vakata-hover").removeClass("vakata-hover").prevAll("li:not(.vakata-separator)").first(); if (!g.length) { g = d.vakata.context.cnt.find("ul:visible").last().children("li:not(.vakata-separator)").last() } g.addClass("vakata-hover"); f.stopImmediatePropagation(); f.preventDefault() } }).bind("keydown", "down", function (f) { if (d.vakata.context.vis) { var g = d.vakata.context.cnt.find("ul:visible").last().children(".vakata-hover").removeClass("vakata-hover").nextAll("li:not(.vakata-separator)").first(); if (!g.length) { g = d.vakata.context.cnt.find("ul:visible").last().children("li:not(.vakata-separator)").first() } g.addClass("vakata-hover"); f.stopImmediatePropagation(); f.preventDefault() } }).bind("keydown", "right", function (f) { if (d.vakata.context.vis) { d.vakata.context.cnt.find(".vakata-hover").children("ul").show().children("li:not(.vakata-separator)").removeClass("vakata-hover").first().addClass("vakata-hover"); f.stopImmediatePropagation(); f.preventDefault() } }).bind("keydown", "left", function (f) { if (d.vakata.context.vis) { d.vakata.context.cnt.find(".vakata-hover").children("ul").hide().children(".vakata-separator").removeClass("vakata-hover"); f.stopImmediatePropagation(); f.preventDefault() } }).bind("keydown", "esc", function (f) { d.vakata.context.hide(); f.preventDefault() }).bind("keydown", "space", function (f) { d.vakata.context.cnt.find(".vakata-hover").last().children("a").click(); f.preventDefault() }) } }); d.jstree.plugin("contextmenu", { __init: function () { this.get_container().delegate("a", "contextmenu.jstree", d.proxy(function (f) { f.preventDefault(); if (!d(f.currentTarget).hasClass("jstree-loading")) { this.show_contextmenu(f.currentTarget, f.pageX, f.pageY) } }, this)).delegate("a", "click.jstree", d.proxy(function (f) { if (this.data.contextmenu) { d.vakata.context.hide() } }, this)).bind("destroy.jstree", d.proxy(function () { if (this.data.contextmenu) { d.vakata.context.hide() } }, this)); d(document).bind("context_hide.vakata", d.proxy(function () { this.data.contextmenu = false }, this)) }, defaults: { select_node: false, show_at_node: true, items: { create: { separator_before: false, separator_after: true, label: "Create", action: function (e) { this.create(e) } }, rename: { separator_before: false, separator_after: false, label: "Rename", action: function (e) { this.rename(e) } }, remove: { separator_before: false, icon: false, separator_after: false, label: "Delete", action: function (e) { if (this.is_selected(e)) { this.remove() } else { this.remove(e) } } }, ccp: { separator_before: true, icon: false, separator_after: false, label: "Edit", action: false, submenu: { cut: { separator_before: false, separator_after: false, label: "Cut", action: function (e) { this.cut(e) } }, copy: { separator_before: false, icon: false, separator_after: false, label: "Copy", action: function (e) { this.copy(e) } }, paste: { separator_before: false, icon: false, separator_after: false, label: "Paste", action: function (e) { this.paste(e) } } } } } }, _fn: { show_contextmenu: function (j, e, m) { j = this._get_node(j); var h = this.get_settings().contextmenu, f = j.children("a:visible:eq(0)"), l = false, g = false; if (h.select_node && this.data.ui && !this.is_selected(j)) { this.deselect_all(); this.select_node(j, true) } if (h.show_at_node || typeof e === "undefined" || typeof m === "undefined") { l = f.offset(); e = l.left; m = l.top + this.data.core.li_height } g = j.data("jstree") && j.data("jstree").contextmenu ? j.data("jstree").contextmenu : h.items; if (d.isFunction(g)) { g = g.call(this, j) } this.data.contextmenu = true; d.vakata.context.show(g, f, e, m, this, j, this._get_settings().core.rtl); if (this.data.themes) { d.vakata.context.cnt.attr("class", "jstree-" + this.data.themes.theme + "-context") } } } }) })(jQuery); (function (d) { d.jstree.plugin("types", { __init: function () { var e = this._get_settings().types; this.data.types.attach_to = []; this.get_container().bind("init.jstree", d.proxy(function () { var h = e.types, g = e.type_attr, f = "", j = this; d.each(h, function (l, m) { d.each(m, function (o, n) { if (!/^(max_depth|max_children|icon|valid_children)$/.test(o)) { j.data.types.attach_to.push(o) } }); if (!m.icon) { return true } if (m.icon.image || m.icon.position) { if (l == "default") { f += ".jstree-" + j.get_index() + " a > .jstree-icon { " } else { f += ".jstree-" + j.get_index() + " li[" + g + '="' + l + '"] > a > .jstree-icon { ' } if (m.icon.image) { f += " background-image:url(" + m.icon.image + "); " } if (m.icon.position) { f += " background-position:" + m.icon.position + "; " } else { f += " background-position:0 0; " } f += "} " } }); if (f !== "") { d.vakata.css.add_sheet({ str: f, title: "jstree-types" }) } }, this)).bind("before.jstree", d.proxy(function (j, h) { var g, f, m = this._get_settings().types.use_data ? this._get_node(h.args[0]) : false, l = m && m !== -1 && m.length ? m.data("jstree") : false; if (l && l.types && l.types[h.func] === false) { j.stopImmediatePropagation(); return false } if (d.inArray(h.func, this.data.types.attach_to) !== -1) { if (!h.args[0] || (!h.args[0].tagName && !h.args[0].jquery)) { return } g = this._get_settings().types.types; f = this._get_type(h.args[0]); if (((g[f] && typeof g[f][h.func] !== "undefined") || (g["default"] && typeof g["default"][h.func] !== "undefined")) && this._check(h.func, h.args[0]) === false) { j.stopImmediatePropagation(); return false } } }, this)); if (c) { this.get_container().bind("load_node.jstree set_type.jstree", d.proxy(function (j, h) { var g = h && h.rslt && h.rslt.obj && h.rslt.obj !== -1 ? this._get_node(h.rslt.obj).parent() : this.get_container_ul(), l = false, f = this._get_settings().types; d.each(f.types, function (m, n) { if (n.icon && (n.icon.image || n.icon.position)) { l = m === "default" ? g.find("li > a > .jstree-icon") : g.find("li[" + f.type_attr + "='" + m + "'] > a > .jstree-icon"); if (n.icon.image) { l.css("backgroundImage", "url(" + n.icon.image + ")") } l.css("backgroundPosition", n.icon.position || "0 0") } }) }, this)) } }, defaults: { max_children: -1, max_depth: -1, valid_children: "all", use_data: false, type_attr: "rel", types: { "default": { max_children: -1, max_depth: -1, valid_children: "all" } } }, _fn: { _types_notify: function (f, e) { if (e.type && this._get_settings().types.use_data) { this.set_type(e.type, f) } }, _get_type: function (e) { e = this._get_node(e); return (!e || !e.length) ? false : e.attr(this._get_settings().types.type_attr) || "default" }, set_type: function (g, f) { f = this._get_node(f); var e = (!f.length || !g) ? false : f.attr(this._get_settings().types.type_attr, g); if (e) { this.__callback({ obj: f, type: g }) } return e }, _check: function (l, g, e) { g = this._get_node(g); var m = false, n = this._get_type(g), j = 0, h = this, o = this._get_settings().types, f = false; if (g === -1) { if (!!o[l]) { m = o[l] } else { return } } else { if (n === false) { return } f = o.use_data ? g.data("jstree") : false; if (f && f.types && typeof f.types[l] !== "undefined") { m = f.types[l] } else { if (!!o.types[n] && typeof o.types[n][l] !== "undefined") { m = o.types[n][l] } else { if (!!o.types["default"] && typeof o.types["default"][l] !== "undefined") { m = o.types["default"][l] } } } } if (d.isFunction(m)) { m = m.call(this, g) } if (l === "max_depth" && g !== -1 && e !== false && o.max_depth !== -2 && m !== 0) { g.children("a:eq(0)").parentsUntil(".jstree", "li").each(function (p) { if (o.max_depth !== -1 && o.max_depth - (p + 1) <= 0) { m = 0; return false } j = (p === 0) ? m : h._check(l, this, false); if (j !== -1 && j - (p + 1) <= 0) { m = 0; return false } if (j >= 0 && (j - (p + 1) < m || m < 0)) { m = j - (p + 1) } if (o.max_depth >= 0 && (o.max_depth - (p + 1) < m || m < 0)) { m = o.max_depth - (p + 1) } }) } return m }, check_move: function () { if (!this.__call_old()) { return false } var e = this._get_move(), j = e.rt._get_settings().types, n = e.rt._check("max_children", e.cr), l = e.rt._check("max_depth", e.cr), g = e.rt._check("valid_children", e.cr), h = 0, o = 1, f; if (g === "none") { return false } if (d.isArray(g) && e.ot && e.ot._get_type) { e.o.each(function () { if (d.inArray(e.ot._get_type(this), g) === -1) { o = false; return false } }); if (o === false) { return false } } if (j.max_children !== -2 && n !== -1) { h = e.cr === -1 ? this.get_container().find("> ul > li").not(e.o).length : e.cr.find("> ul > li").not(e.o).length; if (h + e.o.length > n) { return false } } if (j.max_depth !== -2 && l !== -1) { o = 0; if (l === 0) { return false } if (typeof e.o.d === "undefined") { f = e.o; while (f.length > 0) { f = f.find("> ul > li"); o++ } e.o.d = o } if (l - e.o.d < 0) { return false } } return true }, create_node: function (h, j, f, r, m, q) { if (!q && (m || this._is_loaded(h))) { var g = (typeof j == "string" && j.match(/^before|after$/i) && h !== -1) ? this._get_parent(h) : this._get_node(h), t = this._get_settings().types, o = this._check("max_children", g), n = this._check("max_depth", g), l = this._check("valid_children", g), e; if (typeof f === "string") { f = { data: f } } if (!f) { f = {} } if (l === "none") { return false } if (d.isArray(l)) { if (!f.attr || !f.attr[t.type_attr]) { if (!f.attr) { f.attr = {} } f.attr[t.type_attr] = l[0] } else { if (d.inArray(f.attr[t.type_attr], l) === -1) { return false } } } if (t.max_children !== -2 && o !== -1) { e = g === -1 ? this.get_container().find("> ul > li").length : g.find("> ul > li").length; if (e + 1 > o) { return false } } if (t.max_depth !== -2 && n !== -1 && (n - 1) < 0) { return false } } return this.__call_old(true, h, j, f, r, m, q) } } }) })(jQuery); (function (d) { d.jstree.plugin("html_data", { __init: function () { this.data.html_data.original_container_html = this.get_container().find(" > ul > li").clone(true); this.data.html_data.original_container_html.find("li").addBack().contents().filter(function () { return this.nodeType == 3 }).remove() }, defaults: { data: false, ajax: false, correct_state: true }, _fn: { load_node: function (g, e, f) { var h = this; this.load_node_html(g, function () { h.__callback({ obj: h._get_node(g) }); e.call(this) }, f) }, _is_loaded: function (e) { e = this._get_node(e); return e == -1 || !e || (!this._get_settings().html_data.ajax && !d.isFunction(this._get_settings().html_data.data)) || e.is(".jstree-open, .jstree-leaf") || e.children("ul").children("li").size() > 0 }, load_node_html: function (j, e, g) { var m, h = this.get_settings().html_data, f = function () { }, l = function () { }; j = this._get_node(j); if (j && j !== -1) { if (j.data("jstree_is_loading")) { return } else { j.data("jstree_is_loading", true) } } switch (!0) { case (d.isFunction(h.data)): h.data.call(this, j, d.proxy(function (n) { if (n && n !== "" && n.toString && n.toString().replace(/^[\s\n]+$/, "") !== "") { n = d(n); if (!n.is("ul")) { n = d("<ul />").append(n) } if (j == -1 || !j) { this.get_container().children("ul").empty().append(n.children()).find("li, a").filter(function () { return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS" }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon") } else { j.children("a.jstree-loading").removeClass("jstree-loading"); j.append(n).children("ul").find("li, a").filter(function () { return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS" }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon"); j.removeData("jstree_is_loading") } this.clean_node(j); if (e) { e.call(this) } } else { if (j && j !== -1) { j.children("a.jstree-loading").removeClass("jstree-loading"); j.removeData("jstree_is_loading"); if (h.correct_state) { this.correct_state(j); if (e) { e.call(this) } } } else { if (h.correct_state) { this.get_container().children("ul").empty(); if (e) { e.call(this) } } } } }, this)); break; case (!h.data && !h.ajax): if (!j || j == -1) { this.get_container().children("ul").empty().append(this.data.html_data.original_container_html).find("li, a").filter(function () { return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS" }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon"); this.clean_node() } if (e) { e.call(this) } break; case (!!h.data && !h.ajax) || (!!h.data && !!h.ajax && (!j || j === -1)): if (!j || j == -1) { m = d(h.data); if (!m.is("ul")) { m = d("<ul />").append(m) } this.get_container().children("ul").empty().append(m.children()).find("li, a").filter(function () { return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS" }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon"); this.clean_node() } if (e) { e.call(this) } break; case (!h.data && !!h.ajax) || (!!h.data && !!h.ajax && j && j !== -1): j = this._get_node(j); f = function (o, p, q) { var n = this.get_settings().html_data.ajax.error; if (n) { n.call(this, o, p, q) } if (j != -1 && j.length) { j.children("a.jstree-loading").removeClass("jstree-loading"); j.removeData("jstree_is_loading"); if (p === "success" && h.correct_state) { this.correct_state(j) } } else { if (p === "success" && h.correct_state) { this.get_container().children("ul").empty() } } if (g) { g.call(this) } }; l = function (q, o, n) { var p = this.get_settings().html_data.ajax.success; if (p) { q = p.call(this, q, o, n) || q } if (q === "" || (q && q.toString && q.toString().replace(/^[\s\n]+$/, "") === "")) { return f.call(this, n, o, "") } if (q) { q = d(q); if (!q.is("ul")) { q = d("<ul />").append(q) } if (j == -1 || !j) { this.get_container().children("ul").empty().append(q.children()).find("li, a").filter(function () { return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS" }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon") } else { j.children("a.jstree-loading").removeClass("jstree-loading"); j.append(q).children("ul").find("li, a").filter(function () { return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS" }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon"); j.removeData("jstree_is_loading") } this.clean_node(j); if (e) { e.call(this) } } else { if (j && j !== -1) { j.children("a.jstree-loading").removeClass("jstree-loading"); j.removeData("jstree_is_loading"); if (h.correct_state) { this.correct_state(j); if (e) { e.call(this) } } } else { if (h.correct_state) { this.get_container().children("ul").empty(); if (e) { e.call(this) } } } } }; h.ajax.context = this; h.ajax.error = f; h.ajax.success = l; if (!h.ajax.dataType) { h.ajax.dataType = "html" } if (d.isFunction(h.ajax.url)) { h.ajax.url = h.ajax.url.call(this, j) } if (d.isFunction(h.ajax.data)) { h.ajax.data = h.ajax.data.call(this, j) } d.ajax(h.ajax); break } } } }); d.jstree.defaults.plugins.push("html_data") })(jQuery); (function (d) { d.jstree.plugin("themeroller", { __init: function () { var e = this._get_settings().themeroller; this.get_container().addClass("ui-widget-content").addClass("jstree-themeroller").delegate("a", "mouseenter.jstree", function (f) { if (!d(f.currentTarget).hasClass("jstree-loading")) { d(this).addClass(e.item_h) } }).delegate("a", "mouseleave.jstree", function () { d(this).removeClass(e.item_h) }).bind("init.jstree", d.proxy(function (g, f) { f.inst.get_container().find("> ul > li > .jstree-loading > ins").addClass("ui-icon-refresh"); this._themeroller(f.inst.get_container().find("> ul > li")) }, this)).bind("open_node.jstree create_node.jstree", d.proxy(function (g, f) { this._themeroller(f.rslt.obj) }, this)).bind("loaded.jstree refresh.jstree", d.proxy(function (f) { this._themeroller() }, this)).bind("close_node.jstree", d.proxy(function (g, f) { this._themeroller(f.rslt.obj) }, this)).bind("delete_node.jstree", d.proxy(function (g, f) { this._themeroller(f.rslt.parent) }, this)).bind("correct_state.jstree", d.proxy(function (g, f) { f.rslt.obj.children("ins.jstree-icon").removeClass(e.opened + " " + e.closed + " ui-icon").end().find("> a > ins.ui-icon").filter(function () { return this.className.toString().replace(e.item_clsd, "").replace(e.item_open, "").replace(e.item_leaf, "").indexOf("ui-icon-") === -1 }).removeClass(e.item_open + " " + e.item_clsd).addClass(e.item_leaf || "jstree-no-icon") }, this)).bind("select_node.jstree", d.proxy(function (g, f) { f.rslt.obj.children("a").addClass(e.item_a) }, this)).bind("deselect_node.jstree deselect_all.jstree", d.proxy(function (g, f) { this.get_container().find("a." + e.item_a).removeClass(e.item_a).end().find("a.jstree-clicked").addClass(e.item_a) }, this)).bind("dehover_node.jstree", d.proxy(function (g, f) { f.rslt.obj.children("a").removeClass(e.item_h) }, this)).bind("hover_node.jstree", d.proxy(function (g, f) { this.get_container().find("a." + e.item_h).not(f.rslt.obj).removeClass(e.item_h); f.rslt.obj.children("a").addClass(e.item_h) }, this)).bind("move_node.jstree", d.proxy(function (g, f) { this._themeroller(f.rslt.o); this._themeroller(f.rslt.op) }, this)) }, __destroy: function () { var e = this._get_settings().themeroller, f = ["ui-icon"]; d.each(e, function (h, g) { g = g.split(" "); if (g.length) { f = f.concat(g) } }); this.get_container().removeClass("ui-widget-content").find("." + f.join(", .")).removeClass(f.join(" ")) }, _fn: { _themeroller: function (f) { var e = this._get_settings().themeroller; f = (!f || f == -1) ? this.get_container_ul() : this._get_node(f); f = (!f || f == -1) ? this.get_container_ul() : f.parent(); f.find("li.jstree-closed").children("ins.jstree-icon").removeClass(e.opened).addClass("ui-icon " + e.closed).end().children("a").addClass(e.item).children("ins.jstree-icon").addClass("ui-icon").filter(function () { return this.className.toString().replace(e.item_clsd, "").replace(e.item_open, "").replace(e.item_leaf, "").indexOf("ui-icon-") === -1 }).removeClass(e.item_leaf + " " + e.item_open).addClass(e.item_clsd || "jstree-no-icon").end().end().end().end().find("li.jstree-open").children("ins.jstree-icon").removeClass(e.closed).addClass("ui-icon " + e.opened).end().children("a").addClass(e.item).children("ins.jstree-icon").addClass("ui-icon").filter(function () { return this.className.toString().replace(e.item_clsd, "").replace(e.item_open, "").replace(e.item_leaf, "").indexOf("ui-icon-") === -1 }).removeClass(e.item_leaf + " " + e.item_clsd).addClass(e.item_open || "jstree-no-icon").end().end().end().end().find("li.jstree-leaf").children("ins.jstree-icon").removeClass(e.closed + " ui-icon " + e.opened).end().children("a").addClass(e.item).children("ins.jstree-icon").addClass("ui-icon").filter(function () { return this.className.toString().replace(e.item_clsd, "").replace(e.item_open, "").replace(e.item_leaf, "").indexOf("ui-icon-") === -1 }).removeClass(e.item_clsd + " " + e.item_open).addClass(e.item_leaf || "jstree-no-icon") } }, defaults: { opened: "ui-icon-triangle-1-se", closed: "ui-icon-triangle-1-e", item: "ui-state-default", item_h: "ui-state-hover", item_a: "ui-state-active", item_open: "ui-icon-folder-open", item_clsd: "ui-icon-folder-collapsed", item_leaf: "ui-icon-document" } }); d(function () { var e = ".jstree-themeroller .ui-icon { overflow:visible; } .jstree-themeroller a { padding:0 2px; } .jstree-themeroller .jstree-no-icon { display:none; }"; d.vakata.css.add_sheet({ str: e, title: "jstree" }) }) })(jQuery); (function (d) { d.jstree.plugin("unique", { __init: function () { this.get_container().bind("before.jstree", d.proxy(function (m, j) { var f = [], h = true, l, g; if (j.func == "move_node") { if (j.args[4] === true) { if (j.args[0].o && j.args[0].o.length) { j.args[0].o.children("a").each(function () { f.push(d(this).text().replace(/^\s+/g, "")) }); h = this._check_unique(f, j.args[0].np.find("> ul > li").not(j.args[0].o), "move_node") } } } if (j.func == "create_node") { if (j.args[4] || this._is_loaded(j.args[0])) { l = this._get_node(j.args[0]); if (j.args[1] && (j.args[1] === "before" || j.args[1] === "after")) { l = this._get_parent(j.args[0]); if (!l || l === -1) { l = this.get_container() } } if (typeof j.args[2] === "string") { f.push(j.args[2]) } else { if (!j.args[2] || !j.args[2].data) { f.push(this._get_string("new_node")) } else { f.push(j.args[2].data) } } h = this._check_unique(f, l.find("> ul > li"), "create_node") } } if (j.func == "rename_node") { f.push(j.args[1]); g = this._get_node(j.args[0]); l = this._get_parent(g); if (!l || l === -1) { l = this.get_container() } h = this._check_unique(f, l.find("> ul > li").not(g), "rename_node") } if (!h) { m.stopPropagation(); return false } }, this)) }, defaults: { error_callback: d.noop }, _fn: { _check_unique: function (f, j, h) { var e = [], g = true; j.children("a").each(function () { e.push(d(this).text().replace(/^\s+/g, "")) }); if (!e.length || !f.length) { return true } d.each(f, function (m, l) { if (d.inArray(l, e) !== -1) { g = false; return false } }); if (!g) { this._get_settings().unique.error_callback.call(null, f, j, h) } return g }, check_move: function () { if (!this.__call_old()) { return false } var f = this._get_move(), e = []; if (f.o && f.o.length) { f.o.children("a").each(function () { e.push(d(this).text().replace(/^\s+/g, "")) }); return this._check_unique(e, f.np.find("> ul > li").not(f.o), "check_move") } return true } } }) })(jQuery); (function (d) { d.jstree.plugin("wholerow", { __init: function () { if (!this.data.ui) { throw "jsTree wholerow: jsTree UI plugin not included." } this.data.wholerow.html = false; this.data.wholerow.to = false; this.get_container().bind("init.jstree", d.proxy(function (g, f) { this._get_settings().core.animation = 0 }, this)).bind("open_node.jstree create_node.jstree clean_node.jstree loaded.jstree", d.proxy(function (g, f) { this._prepare_wholerow_span(f && f.rslt && f.rslt.obj ? f.rslt.obj : -1) }, this)).bind("search.jstree clear_search.jstree reopen.jstree after_open.jstree after_close.jstree create_node.jstree delete_node.jstree clean_node.jstree", d.proxy(function (g, f) { if (this.data.to) { clearTimeout(this.data.to) } this.data.to = setTimeout((function (e, h) { return function () { e._prepare_wholerow_ul(h) } })(this, f && f.rslt && f.rslt.obj ? f.rslt.obj : -1), 0) }, this)).bind("deselect_all.jstree", d.proxy(function (g, f) { this.get_container().find(" > .jstree-wholerow .jstree-clicked").removeClass("jstree-clicked " + (this.data.themeroller ? this._get_settings().themeroller.item_a : "")) }, this)).bind("select_node.jstree deselect_node.jstree ", d.proxy(function (g, f) { f.rslt.obj.each(function () { var e = f.inst.get_container().find(" > .jstree-wholerow li:visible:eq(" + (parseInt(((d(this).offset().top - f.inst.get_container().offset().top + f.inst.get_container()[0].scrollTop) / f.inst.data.core.li_height), 10)) + ")"); e.children("a").attr("class", f.rslt.obj.children("a").attr("class")) }) }, this)).bind("hover_node.jstree dehover_node.jstree", d.proxy(function (h, g) { this.get_container().find(" > .jstree-wholerow .jstree-hovered").removeClass("jstree-hovered " + (this.data.themeroller ? this._get_settings().themeroller.item_h : "")); if (h.type === "hover_node") { var f = this.get_container().find(" > .jstree-wholerow li:visible:eq(" + (parseInt(((g.rslt.obj.offset().top - this.get_container().offset().top + this.get_container()[0].scrollTop) / this.data.core.li_height), 10)) + ")"); f.children("a").attr("class", g.rslt.obj.children(".jstree-hovered").attr("class")) } }, this)).delegate(".jstree-wholerow-span, ins.jstree-icon, li", "click.jstree", function (f) { var g = d(f.currentTarget); if (f.target.tagName === "A" || (f.target.tagName === "INS" && g.closest("li").is(".jstree-open, .jstree-closed"))) { return } g.closest("li").children("a:visible:eq(0)").click(); f.stopImmediatePropagation() }).delegate("li", "mouseover.jstree", d.proxy(function (f) { f.stopImmediatePropagation(); if (d(f.currentTarget).children(".jstree-hovered, .jstree-clicked").length) { return false } this.hover_node(f.currentTarget); return false }, this)).delegate("li", "mouseleave.jstree", d.proxy(function (f) { if (d(f.currentTarget).children("a").hasClass("jstree-hovered").length) { return } this.dehover_node(f.currentTarget) }, this)); if (b || c) { d.vakata.css.add_sheet({ str: ".jstree-" + this.get_index() + " { position:relative; } ", title: "jstree" }) } }, defaults: {}, __destroy: function () { this.get_container().children(".jstree-wholerow").remove(); this.get_container().find(".jstree-wholerow-span").remove() }, _fn: { _prepare_wholerow_span: function (e) { e = !e || e == -1 ? this.get_container().find("> ul > li") : this._get_node(e); if (e === false) { return } e.each(function () { d(this).find("li").addBack().each(function () { var f = d(this); if (f.children(".jstree-wholerow-span").length) { return true } f.prepend("<span class='jstree-wholerow-span' style='width:" + (f.parentsUntil(".jstree", "li").length * 18) + "px;'>&#160;</span>") }) }) }, _prepare_wholerow_ul: function () { var f = this.get_container().children("ul").eq(0), e = f.html(); f.addClass("jstree-wholerow-real"); if (this.data.wholerow.last_html !== e) { this.data.wholerow.last_html = e; this.get_container().children(".jstree-wholerow").remove(); this.get_container().append(f.clone().removeClass("jstree-wholerow-real").wrapAll("<div class='jstree-wholerow' />").parent().width(f.parent()[0].scrollWidth).css("top", (f.height() + (b ? 5 : 0)) * -1).find("li[id]").each(function () { this.removeAttribute("id") }).end()) } } } }); d(function () { var e = ".jstree .jstree-wholerow-real { position:relative; z-index:1; } .jstree .jstree-wholerow-real li { cursor:pointer; } .jstree .jstree-wholerow-real a { border-left-color:transparent !important; border-right-color:transparent !important; } .jstree .jstree-wholerow { position:relative; z-index:0; height:0; } .jstree .jstree-wholerow ul, .jstree .jstree-wholerow li { width:100%; } .jstree .jstree-wholerow, .jstree .jstree-wholerow ul, .jstree .jstree-wholerow li, .jstree .jstree-wholerow a { margin:0 !important; padding:0 !important; } .jstree .jstree-wholerow, .jstree .jstree-wholerow ul, .jstree .jstree-wholerow li { background:transparent !important; }.jstree .jstree-wholerow ins, .jstree .jstree-wholerow span, .jstree .jstree-wholerow input { display:none !important; }.jstree .jstree-wholerow a, .jstree .jstree-wholerow a:hover { text-indent:-9999px; !important; width:100%; padding:0 !important; border-right-width:0px !important; border-left-width:0px !important; } .jstree .jstree-wholerow-span { position:absolute; left:0; margin:0px; padding:0; height:18px; border-width:0; padding:0; z-index:0; }"; if (a) { e += ".jstree .jstree-wholerow a { display:block; height:18px; margin:0; padding:0; border:0; } .jstree .jstree-wholerow-real a { border-color:transparent !important; } " } if (b || c) { e += ".jstree .jstree-wholerow, .jstree .jstree-wholerow li, .jstree .jstree-wholerow ul, .jstree .jstree-wholerow a { margin:0; padding:0; line-height:18px; } .jstree .jstree-wholerow a { display:block; height:18px; line-height:18px; overflow:hidden; } " } d.vakata.css.add_sheet({ str: e, title: "jstree" }) }) })(jQuery); (function (d) { var e = ["getChildren", "getChildrenCount", "getAttr", "getName", "getProps"], f = function (j, g) { var h = true; j = j || {}; g = [].concat(g); d.each(g, function (m, l) { if (!d.isFunction(j[l])) { h = false; return false } }); return h }; d.jstree.plugin("model", { __init: function () { if (!this.data.json_data) { throw "jsTree model: jsTree json_data plugin not included." } this._get_settings().json_data.data = function (j, g) { var h = (j == -1) ? this._get_settings().model.object : j.data("jstree_model"); if (!f(h, e)) { return g.call(null, false) } if (this._get_settings().model.async) { h.getChildren(d.proxy(function (l) { this.model_done(l, g) }, this)) } else { this.model_done(h.getChildren(), g) } } }, defaults: { object: false, id_prefix: false, async: false }, _fn: { model_done: function (j, m) { var g = [], h = this._get_settings(), l = this; if (!d.isArray(j)) { j = [j] } d.each(j, function (n, p) { var o = p.getProps() || {}; o.attr = p.getAttr() || {}; if (p.getChildrenCount()) { o.state = "closed" } o.data = p.getName(); if (!d.isArray(o.data)) { o.data = [o.data] } if (l.data.types && d.isFunction(p.getType)) { o.attr[h.types.type_attr] = p.getType() } if (o.attr.id && h.model.id_prefix) { o.attr.id = h.model.id_prefix + o.attr.id } if (!o.metadata) { o.metadata = {} } o.metadata.jstree_model = p; g.push(o) }); m.call(null, g) } } }) })(jQuery) })();
(function (l, g) { var t, y, n, z, r, x, w, v, o, a, m, A, s, c, p, u, B, q, j, h, d, f, e, b; t = function (C) { return new t.prototype.init(C) }; if (typeof require !== "undefined" && typeof exports !== "undefined" && typeof module !== "undefined") { module.exports = t } else { l.Globalize = t } t.cultures = {}; t.prototype = { constructor: t, init: function (C) { this.cultures = t.cultures; this.cultureSelector = C; return this } }; t.prototype.init.prototype = t.prototype; t.cultures["default"] = { name: "en", englishName: "English", nativeName: "English", isRTL: false, language: "en", numberFormat: { pattern: ["-n"], decimals: 2, ",": ",", ".": ".", groupSizes: [3], "+": "+", "-": "-", "NaN": "NaN", negativeInfinity: "-Infinity", positiveInfinity: "Infinity", percent: { pattern: ["-n %", "n %"], decimals: 2, groupSizes: [3], ",": ",", ".": ".", symbol: "%" }, currency: { pattern: ["($n)", "$n"], decimals: 2, groupSizes: [3], ",": ",", ".": ".", symbol: "$" } }, calendars: { standard: { name: "Gregorian_USEnglish", "/": "/", ":": ":", firstDay: 0, days: { names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"] }, months: { names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""] }, AM: ["AM", "am", "AM"], PM: ["PM", "pm", "PM"], eras: [{ name: "A.D.", start: null, offset: 0 }], twoDigitYearMax: 2029, patterns: { d: "M/d/yyyy", D: "dddd, MMMM dd, yyyy", t: "h:mm tt", T: "h:mm:ss tt", f: "dddd, MMMM dd, yyyy h:mm tt", F: "dddd, MMMM dd, yyyy h:mm:ss tt", M: "MMMM dd", Y: "yyyy MMMM", S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss" } } }, messages: {} }; t.cultures["default"].calendar = t.cultures["default"].calendars.standard; t.cultures.en = t.cultures["default"]; t.cultureSelector = "en"; y = /^0x[a-f0-9]+$/i; n = /^[+\-]?infinity$/i; z = /^[+\-]?\d*\.?\d*(e[+\-]?\d+)?$/; r = /^\s+|\s+$/g; x = function (F, E) { if (F.indexOf) { return F.indexOf(E) } for (var C = 0, D = F.length; C < D; C++) { if (F[C] === E) { return C } } return -1 }; w = function (D, C) { return D.substr(D.length - C.length) === C }; v = function () { var L, E, C, D, I, J, H = arguments[0] || {}, G = 1, F = arguments.length, K = false; if (typeof H === "boolean") { K = H; H = arguments[1] || {}; G = 2 } if (typeof H !== "object" && !a(H)) { H = {} } for (; G < F; G++) { if ((L = arguments[G]) != null) { for (E in L) { C = H[E]; D = L[E]; if (H === D) { continue } if (K && D && (m(D) || (I = o(D)))) { if (I) { I = false; J = C && o(C) ? C : [] } else { J = C && m(C) ? C : {} } H[E] = v(K, J, D) } else { if (D !== g) { H[E] = D } } } } } return H }; o = Array.isArray || function (C) { return Object.prototype.toString.call(C) === "[object Array]" }; a = function (C) { return Object.prototype.toString.call(C) === "[object Function]" }; m = function (C) { return Object.prototype.toString.call(C) === "[object Object]" }; A = function (D, C) { return D.indexOf(C) === 0 }; s = function (C) { return (C + "").replace(r, "") }; c = function (C) { if (isNaN(C)) { return NaN } return Math[C < 0 ? "ceil" : "floor"](C) }; p = function (F, D, E) { var C; for (C = F.length; C < D; C += 1) { F = (E ? ("0" + F) : (F + "0")) } return F }; u = function (F, C) { var E = 0, H = false; for (var G = 0, D = F.length; G < D; G++) { var I = F.charAt(G); switch (I) { case "'": if (H) { C.push("'") } else { E++ } H = false; break; case "\\": if (H) { C.push("\\") } H = !H; break; default: C.push(I); H = false; break } } return E }; B = function (G, F) { F = F || "F"; var E, D = G.patterns, C = F.length; if (C === 1) { E = D[F]; if (!E) { throw "Invalid date format string '" + F + "'." } F = E } else { if (C === 2 && F.charAt(0) === "%") { F = F.charAt(1) } } return F }; q = function (W, aa, ab) { var O = ab.calendar, K = O.convert, ad; if (!aa || !aa.length || aa === "i") { if (ab && ab.name.length) { if (K) { ad = q(W, O.patterns.F, ab) } else { var L = new Date(W.getTime()), S = d(W, O.eras); L.setFullYear(f(W, O, S)); ad = L.toLocaleString() } } else { ad = W.toString() } return ad } var X = O.eras, D = aa === "s"; aa = B(O, aa); ad = []; var H, Y = ["0", "00", "000"], M, N, C = /([^d]|^)(d|dd)([^d]|$)/g, ac = 0, T = h(), E; function J(ae, ah) { var ag, af = ae + ""; if (ah > 1 && af.length < ah) { ag = (Y[ah - 2] + af); return ag.substr(ag.length - ah, ah) } else { ag = af } return ag } function Z() { if (M || N) { return M } M = C.test(aa); N = true; return M } function F(af, ae) { if (E) { return E[ae] } switch (ae) { case 0: return af.getFullYear(); case 1: return af.getMonth(); case 2: return af.getDate(); default: throw "Invalid part value " + ae } } if (!D && K) { E = K.fromGregorian(W) } for (; ;) { var I = T.lastIndex, R = T.exec(aa); var P = aa.slice(I, R ? R.index : aa.length); ac += u(P, ad); if (!R) { break } if (ac % 2) { ad.push(R[0]); continue } var U = R[0], G = U.length; switch (U) { case "ddd": case "dddd": var Q = (G === 3) ? O.days.namesAbbr : O.days.names; ad.push(Q[W.getDay()]); break; case "d": case "dd": M = true; ad.push(J(F(W, 2), G)); break; case "MMM": case "MMMM": var V = F(W, 1); ad.push((O.monthsGenitive && Z()) ? (O.monthsGenitive[G === 3 ? "namesAbbr" : "names"][V]) : (O.months[G === 3 ? "namesAbbr" : "names"][V])); break; case "M": case "MM": ad.push(J(F(W, 1) + 1, G)); break; case "y": case "yy": case "yyyy": V = E ? E[0] : f(W, O, d(W, X), D); if (G < 4) { V = V % 100 } ad.push(J(V, G)); break; case "h": case "hh": H = W.getHours() % 12; if (H === 0) { H = 12 } ad.push(J(H, G)); break; case "H": case "HH": ad.push(J(W.getHours(), G)); break; case "m": case "mm": ad.push(J(W.getMinutes(), G)); break; case "s": case "ss": ad.push(J(W.getSeconds(), G)); break; case "t": case "tt": V = W.getHours() < 12 ? (O.AM ? O.AM[0] : " ") : (O.PM ? O.PM[0] : " "); ad.push(G === 1 ? V.charAt(0) : V); break; case "f": case "ff": case "fff": ad.push(J(W.getMilliseconds(), 3).substr(0, G)); break; case "z": case "zz": H = W.getTimezoneOffset() / 60; ad.push((H <= 0 ? "+" : "-") + J(Math.floor(Math.abs(H)), G)); break; case "zzz": H = W.getTimezoneOffset() / 60; ad.push((H <= 0 ? "+" : "-") + J(Math.floor(Math.abs(H)), 2) + ":" + J(Math.abs(W.getTimezoneOffset() % 60), 2)); break; case "g": case "gg": if (O.eras) { ad.push(O.eras[d(W, X)].name) } break; case "/": ad.push(O["/"]); break; default: throw "Invalid date format pattern '" + U + "'." } } return ad.join("") }; (function () { var C; C = function (J, K, R) { var H = R.groupSizes, D = H[0], E = 1, O = Math.pow(10, K), F = Math.round(J * O) / O; if (!isFinite(F)) { F = J } J = F; var I = J + "", Q = "", N = I.split(/e/i), P = N.length > 1 ? parseInt(N[1], 10) : 0; I = N[0]; N = I.split("."); I = N[0]; Q = N.length > 1 ? N[1] : ""; var G; if (P > 0) { Q = p(Q, P, false); I += Q.slice(0, P); Q = Q.substr(P) } else { if (P < 0) { P = -P; I = p(I, P + 1, true); Q = I.slice(-P, I.length) + Q; I = I.slice(0, -P) } } if (K > 0) { Q = R["."] + ((Q.length > K) ? Q.slice(0, K) : p(Q, K)) } else { Q = "" } var M = I.length - 1, S = R[","], L = ""; while (M >= 0) { if (D === 0 || D > M) { return I.slice(0, M + 1) + (L.length ? (S + L + Q) : Q) } L = I.slice(M - D + 1, M + 1) + (L.length ? (S + L) : ""); M -= D; if (E < H.length) { D = H[E]; E++ } } return I.slice(0, M + 1) + S + L + Q }; j = function (O, N, H) { if (!isFinite(O)) { if (O === Infinity) { return H.numberFormat.positiveInfinity } if (O === -Infinity) { return H.numberFormat.negativeInfinity } return H.numberFormat.NaN } if (!N || N === "i") { return H.name.length ? O.toLocaleString() : O.toString() } N = N || "D"; var F = H.numberFormat, G = Math.abs(O), I = -1, M; if (N.length > 1) { I = parseInt(N.slice(1), 10) } var L = N.charAt(0).toUpperCase(), P; switch (L) { case "D": M = "n"; G = c(G); if (I !== -1) { G = p("" + G, I, true) } if (O < 0) { G = "-" + G } break; case "N": P = F; case "C": P = P || F.currency; case "P": P = P || F.percent; M = O < 0 ? P.pattern[0] : (P.pattern[1] || "n"); if (I === -1) { I = P.decimals } G = C(G * (L === "P" ? 100 : 1), I, P); break; default: throw "Bad number format specifier: " + L } var D = /n|\$|-|%/g, K = ""; for (; ;) { var J = D.lastIndex, E = D.exec(M); K += M.slice(J, E ? E.index : M.length); if (!E) { break } switch (E[0]) { case "n": K += G; break; case "$": K += F.currency.symbol; break; case "-": if (/[1-9]/.test(G)) { K += F["-"] } break; case "%": K += F.percent.symbol; break } } return K } }()); h = function () { return (/\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g) }; d = function (E, D) { if (!D) { return 0 } var H, G = E.getTime(); for (var F = 0, C = D.length; F < C; F++) { H = D[F].start; if (H === null || G >= H) { return F } } return 0 }; f = function (D, F, C, G) { var E = D.getFullYear(); if (!G && F.eras) { E -= F.eras[C].offset } return E }; (function () { var D, C, F, E, I, H, G; D = function (O, M) { if (M < 100) { var K = new Date(), J = d(K), N = f(K, O, J), L = O.twoDigitYearMax; L = typeof L === "string" ? new Date().getFullYear() % 100 + parseInt(L, 10) : L; M += N - (N % 100); if (M > L) { M -= 100 } } return M }; C = function (N, M, K) { var J, O = N.days, L = N._upperDays; if (!L) { N._upperDays = L = [G(O.names), G(O.namesAbbr), G(O.namesShort)] } M = H(M); if (K) { J = x(L[1], M); if (J === -1) { J = x(L[2], M) } } else { J = x(L[0], M) } return J }; F = function (Q, P, L) { var J = Q.months, K = Q.monthsGenitive || Q.months, N = Q._upperMonths, O = Q._upperMonthsGen; if (!N) { Q._upperMonths = N = [G(J.names), G(J.namesAbbr)]; Q._upperMonthsGen = O = [G(K.names), G(K.namesAbbr)] } P = H(P); var M = x(L ? N[1] : N[0], P); if (M < 0) { M = x(L ? O[1] : O[0], P) } return M }; E = function (J, U) { var W = J._parseRegExp; if (!W) { J._parseRegExp = W = {} } else { var N = W[U]; if (N) { return N } } var T = B(J, U).replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1"), R = ["^"], K = [], Q = 0, M = 0, Z = h(), O; while ((O = Z.exec(T)) !== null) { var Y = T.slice(Q, O.index); Q = Z.lastIndex; M += u(Y, R); if (M % 2) { R.push(O[0]); continue } var L = O[0], P = L.length, V; switch (L) { case "dddd": case "ddd": case "MMMM": case "MMM": case "gg": case "g": V = "(\\D+)"; break; case "tt": case "t": V = "(\\D*)"; break; case "yyyy": case "fff": case "ff": case "f": V = "(\\d{" + P + "})"; break; case "dd": case "d": case "MM": case "M": case "yy": case "y": case "HH": case "H": case "hh": case "h": case "mm": case "m": case "ss": case "s": V = "(\\d\\d?)"; break; case "zzz": V = "([+-]?\\d\\d?:\\d{2})"; break; case "zz": case "z": V = "([+-]?\\d\\d?)"; break; case "/": V = "(\\/)"; break; default: throw "Invalid date format pattern '" + L + "'." } if (V) { R.push(V) } K.push(O[0]) } u(T.slice(Q), R); R.push("$"); var X = R.join("").replace(/\s+/g, "\\s+"), S = { regExp: X, groups: K }; return W[U] = S }; I = function (L, J, K) { return L < J || L > K }; H = function (J) { return J.split("\u00A0").join(" ").toUpperCase() }; G = function (J) { var M = []; for (var L = 0, K = J.length; L < K; L++) { M[L] = H(J[L]) } return M }; e = function (ad, ak, al) { ad = s(ad); var W = al.calendar, aq = E(W, ak), Q = new RegExp(aq.regExp).exec(ad); if (Q === null) { return null } var am = aq.groups, ab = null, U = null, ap = null, ao = null, V = null, O = 0, ag, af = 0, an = 0, J = 0, L = null, X = false; for (var ah = 0, aj = am.length; ah < aj; ah++) { var K = Q[ah + 1]; if (K) { var ac = am[ah], N = ac.length, P = parseInt(K, 10); switch (ac) { case "dd": case "d": ao = P; if (I(ao, 1, 31)) { return null } break; case "MMM": case "MMMM": ap = F(W, K, N === 3); if (I(ap, 0, 11)) { return null } break; case "M": case "MM": ap = P - 1; if (I(ap, 0, 11)) { return null } break; case "y": case "yy": case "yyyy": U = N < 4 ? D(W, P) : P; if (I(U, 0, 9999)) { return null } break; case "h": case "hh": O = P; if (O === 12) { O = 0 } if (I(O, 0, 11)) { return null } break; case "H": case "HH": O = P; if (I(O, 0, 23)) { return null } break; case "m": case "mm": af = P; if (I(af, 0, 59)) { return null } break; case "s": case "ss": an = P; if (I(an, 0, 59)) { return null } break; case "tt": case "t": X = W.PM && (K === W.PM[0] || K === W.PM[1] || K === W.PM[2]); if (!X && (!W.AM || (K !== W.AM[0] && K !== W.AM[1] && K !== W.AM[2]))) { return null } break; case "f": case "ff": case "fff": J = P * Math.pow(10, 3 - N); if (I(J, 0, 999)) { return null } break; case "ddd": case "dddd": V = C(W, K, N === 3); if (I(V, 0, 6)) { return null } break; case "zzz": var M = K.split(/:/); if (M.length !== 2) { return null } ag = parseInt(M[0], 10); if (I(ag, -12, 13)) { return null } var S = parseInt(M[1], 10); if (I(S, 0, 59)) { return null } L = (ag * 60) + (A(K, "-") ? -S : S); break; case "z": case "zz": ag = P; if (I(ag, -12, 13)) { return null } L = ag * 60; break; case "g": case "gg": var Y = K; if (!Y || !W.eras) { return null } Y = s(Y.toLowerCase()); for (var ai = 0, ae = W.eras.length; ai < ae; ai++) { if (Y === W.eras[ai].name.toLowerCase()) { ab = ai; break } } if (ab === null) { return null } break } } } var T = new Date(), aa, R = W.convert; aa = R ? R.fromGregorian(T)[0] : T.getFullYear(); if (U === null) { U = aa } else { if (W.eras) { U += W.eras[(ab || 0)].offset } } if (ap === null) { ap = 0 } if (ao === null) { ao = 1 } if (R) { T = R.toGregorian(U, ap, ao); if (T === null) { return null } } else { T.setFullYear(U, ap, ao); if (T.getDate() !== ao) { return null } if (V !== null && T.getDay() !== V) { return null } } if (X && O < 12) { O += 12 } T.setHours(O, af, an, J); if (L !== null) { var Z = T.getMinutes() - (L + T.getTimezoneOffset()); T.setHours(T.getHours() + parseInt(Z / 60, 10), Z % 60) } return T } }()); b = function (F, E, D) { var H = E["-"], G = E["+"], C; switch (D) { case "n -": H = " " + H; G = " " + G; case "n-": if (w(F, H)) { C = ["-", F.substr(0, F.length - H.length)] } else { if (w(F, G)) { C = ["+", F.substr(0, F.length - G.length)] } } break; case "- n": H += " "; G += " "; case "-n": if (A(F, H)) { C = ["-", F.substr(H.length)] } else { if (A(F, G)) { C = ["+", F.substr(G.length)] } } break; case "(n)": if (A(F, "(") && w(F, ")")) { C = ["-", F.substr(1, F.length - 2)] } break } return C || ["", F] }; t.prototype.findClosestCulture = function (C) { return t.findClosestCulture.call(this, C) }; t.prototype.format = function (C, D, E) { return t.format.call(this, C, D, E) }; t.prototype.localize = function (C, D) { return t.localize.call(this, C, D) }; t.prototype.parseInt = function (D, C, E) { return t.parseInt.call(this, D, C, E) }; t.prototype.parseFloat = function (D, C, E) { return t.parseFloat.call(this, D, C, E) }; t.prototype.culture = function (C) { return t.culture.call(this, C) }; t.addCultureInfo = function (G, D, F) { var E = {}, C = false; if (typeof G !== "string") { F = G; G = this.culture().name; E = this.cultures[G] } else { if (typeof D !== "string") { F = D; C = (this.cultures[G] == null); E = this.cultures[G] || this.cultures["default"] } else { C = true; E = this.cultures[D] } } this.cultures[G] = v(true, {}, E, F); if (C) { this.cultures[G].calendar = this.cultures[G].calendars.standard } }; t.findClosestCulture = function (C) { var K; if (!C) { return this.findClosestCulture(this.cultureSelector) || this.cultures["default"] } if (typeof C === "string") { C = C.split(",") } if (o(C)) { var E, O = this.cultures, M = C, J, F = M.length, N = []; for (J = 0; J < F; J++) { C = s(M[J]); var D, I = C.split(";"); E = s(I[0]); if (I.length === 1) { D = 1 } else { C = s(I[1]); if (C.indexOf("q=") === 0) { C = C.substr(2); D = parseFloat(C); D = isNaN(D) ? 0 : D } else { D = 1 } } N.push({ lang: E, pri: D }) } N.sort(function (Q, P) { if (Q.pri < P.pri) { return 1 } else { if (Q.pri > P.pri) { return -1 } } return 0 }); for (J = 0; J < F; J++) { E = N[J].lang; K = O[E]; if (K) { return K } } for (J = 0; J < F; J++) { E = N[J].lang; do { var L = E.lastIndexOf("-"); if (L === -1) { break } E = E.substr(0, L); K = O[E]; if (K) { return K } } while (1) } for (J = 0; J < F; J++) { E = N[J].lang; for (var H in O) { var G = O[H]; if (G.language == E) { return G } } } } else { if (typeof C === "object") { return C } } return K || null }; t.format = function (D, E, F) { var C = this.findClosestCulture(F); if (D instanceof Date) { D = q(D, E, C) } else { if (typeof D === "number") { D = j(D, E, C) } } return D }; t.localize = function (C, D) { return this.findClosestCulture(D).messages[C] || this.cultures["default"].messages[C] }; t.parseDate = function (K, I, G) { G = this.findClosestCulture(G); var E, C, D; if (I) { if (typeof I === "string") { I = [I] } if (I.length) { for (var H = 0, F = I.length; H < F; H++) { var J = I[H]; if (J) { E = e(K, J, G); if (E) { break } } } } } else { D = G.calendar.patterns; for (C in D) { E = e(K, D[C], G); if (E) { break } } } return E || null }; t.parseInt = function (D, C, E) { return c(t.parseFloat(D, C, E)) }; t.parseFloat = function (Q, J, L) { if (typeof J !== "number") { L = J; J = 10 } var S = this.findClosestCulture(L); var V = NaN, H = S.numberFormat; if (Q.indexOf(S.numberFormat.currency.symbol) > -1) { Q = Q.replace(S.numberFormat.currency.symbol, ""); Q = Q.replace(S.numberFormat.currency["."], S.numberFormat["."]) } if (Q.indexOf(S.numberFormat.percent.symbol) > -1) { Q = Q.replace(S.numberFormat.percent.symbol, "") } Q = Q.replace(/ /g, ""); if (n.test(Q)) { V = parseFloat(Q) } else { if (!J && y.test(Q)) { V = parseInt(Q, 16) } else { var E = b(Q, H, H.pattern[0]), U = E[0], K = E[1]; if (U === "" && H.pattern[0] !== "(n)") { E = b(Q, H, "(n)"); U = E[0]; K = E[1] } if (U === "" && H.pattern[0] !== "-n") { E = b(Q, H, "-n"); U = E[0]; K = E[1] } U = U || "+"; var P, M, T = K.indexOf("e"); if (T < 0) { T = K.indexOf("E") } if (T < 0) { M = K; P = null } else { M = K.substr(0, T); P = K.substr(T + 1) } var R, I, F = H["."], C = M.indexOf(F); if (C < 0) { R = M; I = null } else { R = M.substr(0, C); I = M.substr(C + F.length) } var N = H[","]; R = R.split(N).join(""); var G = N.replace(/\u00A0/g, " "); if (N !== G) { R = R.split(G).join("") } var O = U + R; if (I !== null) { O += "." + I } if (P !== null) { var D = b(P, H, "-n"); O += "e" + (D[0] || "+") + D[1] } if (z.test(O)) { V = parseFloat(O) } } } return V }; t.culture = function (C) { if (typeof C !== "undefined") { this.cultureSelector = C } return this.findClosestCulture(C) || this.cultures["default"] } }(this)); (function ($) { $.fn.editable = function (target, options) { if ("disable" == target) { $(this).data("disabled.editable", true); return } if ("enable" == target) { $(this).data("disabled.editable", false); return } if ("destroy" == target) { $(this).unbind($(this).data("event.editable")).removeData("disabled.editable").removeData("event.editable"); return } var settings = $.extend({}, $.fn.editable.defaults, { target: target }, options); var plugin = $.editable.types[settings.type].plugin || function () { }; var submit = $.editable.types[settings.type].submit || function () { }; var buttons = $.editable.types[settings.type].buttons || $.editable.types.defaults.buttons; var content = $.editable.types[settings.type].content || $.editable.types.defaults.content; var element = $.editable.types[settings.type].element || $.editable.types.defaults.element; var reset = $.editable.types[settings.type].reset || $.editable.types.defaults.reset; var callback = settings.callback || function () { }; var oneditbegin = settings.oneditbegin || settings.onedit || function () { }; var oneditend = settings.oneditend || function () { }; var onsubmit = settings.onsubmit || function () { }; var onreset = settings.onreset || function () { }; var onerror = settings.onerror || reset; var oncomplete = settings.oncomplete || function (s) { return s }; if (settings.tooltip) { $(this).attr("title", settings.tooltip) } settings.autowidth = "auto" == settings.width; settings.autoheight = "auto" == settings.height; return this.each(function () { var self = this; var savedwidth = $(self).width(); var savedheight = $(self).height(); $(this).data("event.editable", settings.event); if (!$.trim($(this).html())) { $(this).html(settings.placeholder) } $(this).bind(settings.event, function (e) { if (true === $(this).data("disabled.editable")) { return } if (self.editing) { return } if (false === oneditbegin.apply(this, [settings, self, e])) { return } e.preventDefault(); e.stopPropagation(); if (settings.tooltip) { $(self).removeAttr("title") } if (0 == $(self).width()) { settings.width = savedwidth; settings.height = savedheight } else { if (settings.width != "none") { settings.width = settings.autowidth ? $(self).width() - settings.widthBuffer : settings.width } if (settings.height != "none") { settings.height = settings.autoheight ? $(self).outerHeight() : settings.height } } if ($(this).html().toLowerCase().replace(/(;|"|\/)/g, "") == settings.placeholder.toLowerCase().replace(/(;|"|\/)/g, "")) { $(this).html("") } self.editing = true; self.revert = $(self).html(); $(self).html(""); var form = $("<form />"); if (settings.cssclass) { if ("inherit" == settings.cssclass) { form.attr("class", $(self).attr("class")) } else { form.attr("class", settings.cssclass) } } if (settings.style) { if ("inherit" == settings.style) { form.attr("style", $(self).attr("style")); form.css("display", $(self).css("display")) } else { form.attr("style", settings.style) } } var input = element.apply(form, [settings, self]); var input_content; if (settings.loadurl) { var t = setTimeout(function () { input.disabled = true; content.apply(form, [settings.loadtext, settings, self]) }, 100); var loaddata = {}; loaddata[settings.id] = self.id; if ($.isFunction(settings.loaddata)) { $.extend(loaddata, settings.loaddata.apply(self, [self.revert, settings])) } else { $.extend(loaddata, settings.loaddata) } $.ajax({ type: settings.loadtype, url: settings.loadurl, data: loaddata, async: false, success: function (result) { window.clearTimeout(t); input_content = result; input.disabled = false } }) } else { if (settings.data) { input_content = settings.data; if ($.isFunction(settings.data)) { input_content = settings.data.apply(self, [self.revert, settings]) } } else { input_content = self.revert } } content.apply(form, [input_content, settings, self]); input.attr("name", settings.name); buttons.apply(form, [settings, self]); $(self).append(form); plugin.apply(form, [settings, self]); $(":input:visible:enabled:first", form).focus(); if (settings.select) { input.select() } input.keydown(function (e) { if (e.keyCode == 27) { e.preventDefault(); reset.apply(form, [settings, self]) } else { if (((e.keyCode == 9 && settings.submitontab) || (e.keyCode == 13 && settings.submitonenter)) && ($(this).val().length == 0)) { form.submit() } } }); var t; if ("cancel" == settings.onblur) { input.blur(function (e) { t = setTimeout(function () { reset.apply(form, [settings, self]) }, 100) }) } else { if ("submit" == settings.onblur) { input.blur(function (e) { t = setTimeout(function () { form.submit() }, 200) }) } else { if ($.isFunction(settings.onblur)) { input.blur(function (e) { settings.onblur.apply(self, [input.val(), settings]) }) } else { input.blur(function (e) { }) } } } form.submit(function (e) { if (t) { clearTimeout(t) } e.preventDefault(); if (false !== onsubmit.apply(form, [settings, self])) { if (false !== submit.apply(form, [settings, self])) { if ($.isFunction(settings.target)) { var str = settings.target.apply(self, [input.val(), settings]); $(self).html(str); self.editing = false; callback.apply(self, [self.innerHTML, settings]); if (!$.trim($(self).html())) { $(self).html(settings.placeholder) } } else { var submitdata = {}; submitdata[settings.name] = input.val(); submitdata[settings.id] = self.id; if ($.isFunction(settings.submitdata)) { $.extend(submitdata, settings.submitdata.apply(self, [self.revert, settings])) } else { $.extend(submitdata, settings.submitdata) } if ("PUT" == settings.method) { submitdata._method = "put" } $(self).html(settings.indicator); var ajaxoptions = { type: "POST", data: submitdata, dataType: "html", url: settings.target, success: function (result, status) { result = oncomplete.apply(self, [result]); if (ajaxoptions.dataType == "html") { $(self).html(result) } self.editing = false; callback.apply(self, [result, settings]); if (!$.trim($(self).html())) { $(self).html(settings.placeholder) } }, error: function (xhr, status, error) { onerror.apply(form, [settings, self, xhr]) } }; $.extend(ajaxoptions, settings.ajaxoptions); $.ajax(ajaxoptions) } } } $(self).attr("title", settings.tooltip); return false }); oneditend.apply(this, [settings, self]) }); this.reset = function (form) { if (this.editing) { if (false !== onreset.apply(form, [settings, self])) { $(self).html(self.revert); self.editing = false; if (!$.trim($(self).html())) { $(self).html(settings.placeholder) } if (settings.tooltip) { $(self).attr("title", settings.tooltip) } } } } }) }; $.editable = { types: { defaults: { element: function (settings, original) { var input = $('<input type="hidden"></input>'); $(this).append(input); return (input) }, content: function (string, settings, original) { string = string.replace(/&amp;/g, "&"); $(":input:first", this).val(string) }, reset: function (settings, original) { original.reset(this) }, buttons: function (settings, original) { var form = this; if (settings.submit) { if (settings.submit.match(/>$/)) { var submit = $(settings.submit).click(function () { if (submit.attr("type") != "submit") { form.submit() } }) } else { var submit = $('<button type="submit" />'); submit.html(settings.submit) } $(this).append(submit) } if (settings.cancel) { if (settings.cancel.match(/>$/)) { var cancel = $(settings.cancel) } else { var cancel = $('<button type="cancel" />'); cancel.html(settings.cancel) } $(this).append(cancel); $(cancel).click(function (event) { if ($.isFunction($.editable.types[settings.type].reset)) { var reset = $.editable.types[settings.type].reset } else { var reset = $.editable.types.defaults.reset } reset.apply(form, [settings, original]); return false }) } } }, text: { element: function (settings, original) { var input = $("<input />"); if (settings.width != "none") { input.css("width", settings.width) } if (settings.height != "none") { input.css("height", settings.height) } input.attr("autocomplete", "off"); $(this).append(input); return (input) } }, textarea: { element: function (settings, original) { var textarea = $("<textarea />"); if (settings.rows) { textarea.attr("rows", settings.rows) } else { if (settings.height != "none") { textarea.height(settings.height) } } if (settings.cols) { textarea.attr("cols", settings.cols) } else { if (settings.width != "none") { textarea.width(settings.width) } } $(this).append(textarea); return (textarea) } }, select: { element: function (settings, original) { var select = $("<select />"); $(this).append(select); return (select) }, content: function (data, settings, original) { if (String == data.constructor) { eval("var json = " + data) } else { var json = data } for (var key in json) { if (!json.hasOwnProperty(key)) { continue } if ("selected" == key) { continue } var option = $("<option />").val(key).append(json[key]); $("select", this).append(option) } $("select", this).children().each(function () { if ($(this).val() == json.selected || $(this).text() == $.trim(original.revert)) { $(this).attr("selected", "selected") } }); if (!settings.submit) { var form = this; $("select", this).change(function () { form.submit() }) } } } }, addInputType: function (name, input) { $.editable.types[name] = input } }; $.fn.editable.defaults = { name: "value", id: "id", type: "text", width: "auto", widthBuffer: 0, height: "auto", event: "click.editable", onblur: "cancel", submitontab: true, submitonenter: true, loadtype: "GET", loadtext: "Loading...", placeholder: "Click to edit", loaddata: {}, submitdata: {}, ajaxoptions: {} } })(jQuery);
(function (a) { if (typeof define === "function" && define.amd && define.amd.jQuery) { define(["jquery"], a) } else { a(jQuery) } }(function (e) { var a = /\+/g; function d(g) { return g } function b(g) { return decodeURIComponent(g.replace(a, " ")) } function f(g) { if (g.indexOf('"') === 0) { g = g.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\") } try { return c.json ? JSON.parse(g) : g } catch (h) { } } var c = e.cookie = function (q, p, v) { if (p !== undefined) { v = e.extend({}, c.defaults, v); if (typeof v.expires === "number") { var r = v.expires, u = v.expires = new Date(); u.setDate(u.getDate() + r) } p = c.json ? JSON.stringify(p) : String(p); return (document.cookie = [encodeURIComponent(q), "=", c.raw ? p : encodeURIComponent(p), v.expires ? "; expires=" + v.expires.toUTCString() : "", v.path ? "; path=" + v.path : "", v.domain ? "; domain=" + v.domain : "", v.secure ? "; secure" : ""].join("")) } var g = c.raw ? d : b; var s = document.cookie.split("; "); var w = q ? undefined : {}; for (var o = 0, m = s.length; o < m; o++) { var n = s[o].split("="); var h = g(n.shift()); var j = g(n.join("=")); if (q && q === h) { w = f(j); break } if (!q) { w[h] = f(j) } } return w }; c.defaults = {}; e.removeCookie = function (h, g) { if (e.cookie(h) !== undefined) { e.cookie(h, "", e.extend(g, { expires: -1 })); return true } return false } })); (function (a) { jQuery.fn.equalHeights = function (b) { b = b || 0; return this.height(b + Math.max.apply(null, this.map(function () { return jQuery(this).height() }).get())) }; jQuery.fn.equalWidths = function (b) { b = b || 0; if (a.support.cssFloat || jQuery(".gsp_i_c", this).length == 0) { return this.width(b + Math.max.apply(null, this.map(function () { return jQuery(this).width() }).get())) } else { return this.width(b + 10 + Math.max.apply(null, this.map(function () { return jQuery(".gsp_i_c", this).width() }).get())) } }; jQuery.fn.equalSize = function (c, b) { c = c || 0; b = b || 0; if (a.support.cssFloat || jQuery(".gsp_i_c", this).length == 0) { return this.width(c + Math.max.apply(null, this.map(function () { return jQuery(this).width() }).get())).height(b + Math.max.apply(null, this.map(function () { return jQuery(this).height() }).get())) } else { return this.height(b + Math.max.apply(null, this.map(function () { return jQuery(this).height() }).get())).width(c + 10 + Math.max.apply(null, this.map(function () { return jQuery(".gsp_i_c", this).width() }).get())) } } })(jQuery); (function (b, a, c) { b.fn["paging"] = function (h, g) { var e = this, d = { setOptions: function (l) { function j(r) { var m = 0, s = 0, n = 1, q = { fstack: [], asterisk: 0, inactive: 0, blockwide: 5, current: 3, rights: 0, lefts: 0 }, u, p = /[*<>pq\[\]().-]|[nc]+!?/g; var t = { "[": "first", "]": "last", "<": "prev", ">": "next", q: "left", p: "right", "-": "fill", ".": "leap" }, o = {}; while ((u = p.exec(r))) { u = ("" + u); if (c === t[u]) { if ("(" === u) { s = ++m } else { if (")" === u) { s = 0 } else { if (n) { if ("*" === u) { q.asterisk = 1; q.inactive = 0 } else { q.asterisk = 0; q.inactive = "!" === u.charAt(u.length - 1); q.blockwide = u.length - q.inactive; if (!(q.current = 1 + u.indexOf("c"))) { q.current = (1 + q.blockwide) >> 1 } } q.fstack[q.fstack.length] = ({ ftype: "block", group: 0, pos: 0 }); n = 0 } } } } else { q.fstack[q.fstack.length] = ({ ftype: t[u], group: s, pos: c === o[u] ? o[u] = 1 : ++o[u] }); if ("q" === u) { ++q.lefts } else { if ("p" === u) { ++q.rights } } } } return q } this.opts = b.extend(this.opts || { lapping: 0, perpage: 10, page: 1, refresh: { interval: 10, url: null }, format: "", onFormat: function (m) { }, onSelect: function (m) { return true }, onRefresh: function (m) { } }, l || {}); if (this.opts.perpage < 1) { this.opts.perpage = 10 } if (this.interval) { a.clearInterval(this.interval) } if (this.opts.refresh["url"]) { this.interval = a.setInterval(function (n, m) { m.ajax({ url: n.opts.refresh["url"], success: function (q) { if (typeof (q) == "object") { var p = q } else { try { var p = m.parseJSON(q) } catch (r) { return } } r.opts.onRefresh(p) } }) }, 1000 * this.opts.refresh["interval"], this, b) } this.format = j(this.opts.format); return this }, setNumber: function (j) { this.number = (c === j || j < 0) ? -1 : j; return this }, setPage: function (w) { if (c === w) { if (w = this.opts.page, null === w) { return this } } else { if (this.opts.page == w) { return this } } this.opts.page = (w |= 0); var q = this.number; var j = this.opts; var y, l; var m, r; var n = 1, x = this.format; var u, t, o, p; var v = x.fstack.length, s = v; if (j.perpage <= j.lapping) { j.lapping = j.perpage - 1 } p = q <= j.lapping ? 0 : j.lapping | 0; if (q < 0) { q = -1; m = -1; y = Math.max(1, w - x.current + 1 - p); l = y + x.blockwide } else { m = 1 + Math.ceil((q - j.perpage) / (j.perpage - p)); w = Math.max(1, Math.min(w < 0 ? 1 + m + w : w, m)); if (x.asterisk) { y = 1; l = 1 + m; x.current = w; x.blockwide = m } else { y = Math.max(1, Math.min(w - x.current, m - x.blockwide) + 1); l = x.inactive ? y + x.blockwide : Math.min(y + x.blockwide, 1 + m) } } while (s--) { t = 0; o = x.fstack[s]; switch (o.ftype) { case "left": t = (o.pos < y); break; case "right": t = (l <= m - x.rights + o.pos); break; case "first": t = (x.current < w); break; case "last": t = (x.blockwide < x.current + m - w); break; case "prev": t = (1 < w); break; case "next": t = (w < m); break } n |= t << o.group } u = { number: q, lapping: p, pages: m, perpage: j.perpage, page: w, slice: [(t = w * (j.perpage - p) + p) - j.perpage, Math.min(t, q)] }; r = b(document.createElement("div")); while (++s < v) { o = x.fstack[s]; t = (n >> o.group & 1); switch (o.ftype) { case "block": for (; y < l; ++y) { u.value = y; u.pos = 1 + x.blockwide - l + y; u.active = y <= m || q < 0; u.first = 1 === y; u.last = y == m && 0 < q; t = document.createElement("div"); t.innerHTML = j.onFormat.call(u, o.ftype); b("a", t = b(t)).data("page", u.value).click(f); r.append(t.contents()) } continue; case "left": u.value = u.pos = o.pos; u.active = o.pos < y; break; case "right": u.value = m - x.rights + o.pos; u.pos = o.pos; u.active = l <= u.value; break; case "first": u.value = 1; u.pos = o.pos; u.active = t && x.current < w; break; case "last": u.value = m; u.pos = o.pos; u.active = t && x.blockwide < x.current + m - w; break; case "prev": u.value = Math.max(1, w - 1); u.pos = o.pos; u.active = t && 1 < w; break; case "next": u.pos = o.pos; if ((u.active = (q < 0))) { u.value = 1 + w } else { u.value = Math.min(1 + w, m); u.active = t && w < m } break; case "leap": case "fill": u.pos = o.pos; u.active = t; r.append(j.onFormat.call(u, o.ftype)); continue } u.last = u.first = c; t = document.createElement("div"); t.innerHTML = j.onFormat.call(u, o.ftype); b("a", t = b(t)).data("page", u.value).click(f); r.append(t.contents()) } e.html(r.contents()); this.locate = j.onSelect.call({ number: q, lapping: p, pages: m, slice: u.slice }, w); return this } }; function f(j) { j.preventDefault(); var l = j.target; do { if ("a" === l.nodeName.toLowerCase()) { break } } while ((l = l.parentNode)); d.setPage(b.data(l, "page")); if (d.locate) { a.location = l.href } } return d.setNumber(h)["setOptions"](g)["setPage"]() } }(jQuery, this)); (function (b) { var a = 0; b.fn.splitter = function (c) { c = c || {}; return this.each(function () { if (b(this).is(".splitter")) { return } var o; function h(y) { u.removeClass(n.barStateClasses).addClass(y) } function l(y) { if (y.which != 1) { return } u.removeClass(n.barHoverClass); if (n.outline) { o = o || u.clone(false).insertAfter(s); u.removeClass(n.barDockedClass) } h(n.barActiveClass); j.css("-webkit-user-select", "none").find("iframe").addClass(n.iframeClass); s._posSplit = s[0][n.pxSplit] - y[n.eventPos]; b(document).bind("mousemove" + n.eventNamespace, m).bind("mouseup" + n.eventNamespace, q) } function m(z) { var B = s._posSplit + z[n.eventPos], A = Math.max(0, Math.min(B, d._DA - u._DA)), y = Math.max(s._min, d._DA - r._max, Math.min(B, s._max, d._DA - u._DA - r._min)); if (n.outline) { if ((n.dockPane == s && B < Math.max(s._min, u._DA)) || (n.dockPane == r && B > Math.min(B, s._max, d._DA - u._DA - r._min))) { u.addClass(n.barDockedClass).css(n.origin, A) } else { u.removeClass(n.barDockedClass).css(n.origin, y) } u._DA = u[0][n.pxSplit] } else { f(B) } h(B == y ? n.barActiveClass : n.barLimitClass) } function q(y) { h(n.barNormalClass); u.addClass(n.barHoverClass); var z = s._posSplit + y[n.eventPos]; if (n.outline) { o.remove(); o = null; f(z) } j.css("-webkit-user-select", "text").find("iframe").removeClass(n.iframeClass); b(document).unbind("mousemove" + n.eventNamespace + " mouseup" + n.eventNamespace) } function f(y) { u._DA = u[0][n.pxSplit]; if ((n.dockPane == s && y < Math.max(s._min, u._DA)) || (n.dockPane == r && y > Math.min(y, s._max, d._DA - u._DA - r._min))) { u.addClass(n.barDockedClass); u._DA = u[0][n.pxSplit]; y = n.dockPane == s ? 0 : d._DA - u._DA; if (u._pos == null) { u._pos = s[0][n.pxSplit] } } else { u.removeClass(n.barDockedClass); u._DA = u[0][n.pxSplit]; u._pos = null; y = Math.max(s._min, d._DA - r._max, Math.min(y, s._max, d._DA - u._DA - r._min)) } u.css(n.origin, y).css(n.fixed, d._DF); s.css(n.origin, 0).css(n.split, y).css(n.fixed, d._DF); r.css(n.origin, y + u._DA).css(n.split, d._DA - u._DA - y).css(n.fixed, d._DF); if (!v()) { for (i = 0; i <= a; i++) { j.trigger("resize" + g + i) } } } function t(B, A) { var z = 0; for (var y = 1; y < arguments.length; y++) { z += Math.max(parseInt(B.css(arguments[y]), 10) || 0, 0) } return z } function v() { return (b.browser.msie && (parseInt(b.browser.version) < 9)) } var x = (c.splitHorizontal ? "h" : c.splitVertical ? "v" : c.type) || "v"; var g = ".splitter"; var n = b.extend({ splitterClass: "splitter gsp-ui-widget gsp-ui-widget-content", paneClass: "splitter-pane", barClass: "splitter-bar", barNormalClass: "gsp-ui-state-default", barHoverClass: "gsp-ui-state-hover", barActiveClass: "gsp-ui-state-highlight", barLimitClass: "gsp-ui-state-error", iframeClass: "splitter-iframe-hide", eventNamespace: g + (++a), pxPerKey: 8, tabIndex: 0, accessKey: "" }, { v: { keyLeft: 39, keyRight: 37, cursor: "e-resize", barStateClass: "splitter-bar-vertical", barDockedClass: "splitter-bar-vertical-docked" }, h: { keyTop: 40, keyBottom: 38, cursor: "n-resize", barStateClass: "splitter-bar-horizontal", barDockedClass: "splitter-bar-horizontal-docked" } }[x], c, { v: { type: "v", eventPos: "pageX", origin: "left", split: "width", pxSplit: "offsetWidth", side1: "Left", side2: "Right", fixed: "height", pxFixed: "offsetHeight", side3: "Top", side4: "Bottom" }, h: { type: "h", eventPos: "pageY", origin: "top", split: "height", pxSplit: "offsetHeight", side1: "Top", side2: "Bottom", fixed: "width", pxFixed: "offsetWidth", side3: "Left", side4: "Right" } }[x]); n.barStateClasses = [n.barNormalClass, n.barHoverClass, n.barActiveClass, n.barLimitClass].join(" "); var d = b(this).css({ position: "relative" }).addClass(n.splitterClass); var j = b(">*", d[0]).addClass(n.paneClass).css({ position: "absolute", "z-index": "1", "-moz-outline-style": "none" }); var s = b(j[0]), r = b(j[1]); n.dockPane = n.dock && (/right|bottom/.test(n.dock) ? r : s); var e = b('<a href="javascript:void(0)"></a>').attr({ accessKey: n.accessKey, tabIndex: n.tabIndex, title: n.splitbarClass }).bind((b.browser.opera ? "click" : "focus") + n.eventNamespace, function () { this.focus(); u.addClass(n.barActiveClass) }).bind("keydown" + n.eventNamespace, function (A) { var z = A.which || A.keyCode; var y = z == n["key" + n.side1] ? 1 : z == n["key" + n.side2] ? -1 : 0; if (y) { f(s[0][n.pxSplit] + y * n.pxPerKey, false) } }).bind("blur" + n.eventNamespace, function () { u.removeClass(n.barActiveClass) }); var u = b("<div></div>").insertAfter(s).addClass(n.barClass).addClass(n.barStateClass).append(e).attr({ unselectable: "on" }).css({ position: "absolute", "user-select": "none", "-webkit-user-select": "none", "-khtml-user-select": "none", "-moz-user-select": "none", "z-index": "100" }).bind("mousedown" + n.eventNamespace, l).bind("mouseover" + n.eventNamespace, function () { b(this).addClass(n.barHoverClass) }).bind("mouseout" + n.eventNamespace, function () { b(this).removeClass(n.barHoverClass) }); if (/^(auto|default|)$/.test(u.css("cursor"))) { u.css("cursor", n.cursor) } u._DA = u[0][n.pxSplit]; d._PBF = t(d, "border" + n.side3 + "Width", "border" + n.side4 + "Width"); d._PBA = t(d, "border" + n.side1 + "Width", "border" + n.side2 + "Width"); s._pane = n.side1; r._pane = n.side2; b.each([s, r], function () { this._splitter_style = this.style; this._min = n["min" + this._pane] || t(this, "min-" + n.split); this._max = n["max" + this._pane] || t(this, "max-" + n.split) || 9999; this._init = n["size" + this._pane] === true ? parseInt(b.css(this[0], n.split), 10) : n["size" + this._pane] }); var w = s._init; if (!isNaN(r._init)) { w = d[0][n.pxSplit] - d._PBA - r._init - u._DA } if (n.cookie) { if (!b.cookie) { alert("jQuery.splitter(): jQuery cookie plugin required") } var p = parseInt(b.cookie(n.cookie), 10); if (!isNaN(p)) { w = p } b(window).bind("unload" + n.eventNamespace, function () { var y = String(u.css(n.origin)); b.cookie(n.cookie, y, { expires: n.cookieExpires || 365, path: n.cookiePath || document.location.pathname }) }) } if (isNaN(w)) { w = Math.round((d[0][n.pxSplit] - d._PBA - u._DA) / 2) } if (n.anchorToWindow) { n.resizeTo = window } if (n.resizeTo) { d._hadjust = t(d, "borderTopWidth", "borderBottomWidth", "marginBottom", "paddingBottom"); d._hadjust += t(b("body"), "paddingBottom"); d._hadjust += t(b("html"), "paddingBottom"); d._hadjust += 1; d._hmin = Math.max(t(d, "minHeight"), 20); b(window).bind("resize" + n.eventNamespace, function (z) { if (z.target == window) { var y = d.offset().top; var A = b(n.resizeTo).height(); d.css("height", Math.max(A - y - d._hadjust - 0, d._hmin) + "px"); if (!v()) { d.trigger("resize" + n.eventNamespace) } } }).trigger("resize" + n.eventNamespace) } else { if (n.resizeToWidth && !v()) { b(window).bind("resize" + n.eventNamespace, function (y) { if (y.target == window) { d.trigger("resize" + n.eventNamespace) } }) } } if (n.dock) { d.bind("toggleDock" + n.eventNamespace, function () { var y = n.dockPane[0][n.pxSplit]; d.trigger(y ? "dock" + n.eventNamespace : "undock" + n.eventNamespace) }).bind("dock" + n.eventNamespace, function () { var z = s[0][n.pxSplit]; if (!z) { return } u._pos = z; var y = {}; y[n.origin] = n.dockPane == s ? 0 : d[0][n.pxSplit] - d._PBA - u[0][n.pxSplit]; u.animate(y, n.dockSpeed || 1, n.dockEasing, function () { u.addClass(n.barDockedClass); f(y[n.origin]) }) }).bind("undock" + n.eventNamespace, function () { var z = n.dockPane[0][n.pxSplit]; if (z) { return } var y = {}; y[n.origin] = u._pos + "px"; u.removeClass(n.barDockedClass).animate(y, n.undockSpeed || n.dockSpeed || 1, n.undockEasing || n.dockEasing, function () { f(u._pos); u._pos = null }) }); if (n.dockKey) { b('<a title="' + n.splitbarClass + ' toggle dock" href="javascript:void(0)"></a>').attr({ accessKey: n.dockKey, tabIndex: -1 }).appendTo(u).bind(b.browser.opera ? "click" : "focus", function () { d.trigger("toggleDock" + n.eventNamespace); this.blur() }) } u.bind("dblclick", function () { d.trigger("toggleDock" + n.eventNamespace) }) } d.bind("destroy" + n.eventNamespace, function () { b([window, document]).unbind(n.eventNamespace); u.unbind().remove(); j.removeClass(n.paneClass); d.removeClass(n.splitterClass).add(j).unbind(n.eventNamespace).attr("style", function (y) { return this._splitter_style || "" }); d = u = e = j = s = r = n = c = null }).bind("resize" + n.eventNamespace, function (z, y) { if (z.target != this) { return } d._DF = d[0][n.pxFixed] - d._PBF; d._DA = d[0][n.pxSplit] - d._PBA; if (d._DF <= 0 || d._DA <= 0) { return } f(!isNaN(y) ? y : (!(n.sizeRight || n.sizeBottom) ? s[0][n.pxSplit] : d._DA - r[0][n.pxSplit] - u._DA)); h(n.barNormalClass) }).trigger("resize" + n.eventNamespace, [w]) }) } })(jQuery); (function (a) { a.fn.autoSuggest = function (f, c) { var j = { asHtmlID: false, startText: "Enter Name Here", emptyText: "No Results Found", preFill: {}, limitText: "No More Selections Are Allowed", selectedItemProp: "value", selectedValuesProp: "value", searchObjProps: "value", queryParam: "q", retrieveLimit: false, extraParams: "", matchCase: false, minChars: 1, keyDelay: 400, resultsHighlight: true, neverSubmit: false, selectionLimit: false, showResultList: true, start: function () { }, selectionClick: function (l) { }, selectionAdded: function (l) { }, selectionRemoved: function (l) { l.remove() }, formatList: false, beforeRetrieve: function (l) { return l }, retrieveComplete: function (l) { return l }, resultClick: function (l) { }, resultsComplete: function () { } }; var e = a.extend(j, c); var d = "object"; var h = 0; if (typeof f == "string") { d = "string"; var b = f } else { var g = f; for (k in f) { if (f.hasOwnProperty(k)) { h++ } } } if ((d == "object" && h > 0) || d == "string") { return this.each(function (z) { if (!e.asHtmlID) { z = z + "" + Math.floor(Math.random() * 100); var m = "as-input-" + z } else { z = e.asHtmlID; var m = z } e.start.call(this); var B = a(this); B.attr("autocomplete", "off").addClass("as-input").attr("id", m).val(e.startText); var F = false; B.wrap('<ul class="as-selections" id="as-selections-' + z + '"></ul>').wrap('<li class="as-original" id="as-original-' + z + '"></li>'); var G = a("#as-selections-" + z); var v = a("#as-original-" + z); var o = a('<div class="as-results" id="as-results-' + z + '"></div>').hide(); var p = a('<ul class="as-list"></ul>'); var J = a('<input type="hidden" class="as-values" name="as_values_' + z + '" id="as-values-' + z + '" />'); var u = ""; if (typeof e.preFill == "string") { var C = e.preFill.split(","); for (var H = 0; H < C.length; H++) { var n = {}; n[e.selectedValuesProp] = C[H]; if (C[H] != "") { I(n, "000" + H) } } u = e.preFill } else { u = ""; var K = 0; for (k in e.preFill) { if (e.preFill.hasOwnProperty(k)) { K++ } } if (K > 0) { for (var H = 0; H < K; H++) { var D = e.preFill[H][e.selectedValuesProp]; if (D == undefined) { D = "" } u = u + D + ","; if (D != "") { I(e.preFill[H], "000" + H) } } } } if (u != "") { B.val(""); var A = u.substring(u.length - 1); if (A != ",") { u = u + "," } J.val("," + u); a("li.as-selection-item", G).addClass("blur").removeClass("selected") } B.after(J); G.click(function () { F = true; B.focus() }).mousedown(function () { F = false }).after(o); var y = null; var E = ""; var q = 0; var r = false; B.focus(function () { if (a(this).val() == e.startText && J.val() == "") { a(this).val("") } else { if (F) { a("li.as-selection-item", G).removeClass("blur"); if (a(this).val() != "") { p.css("width", G.outerWidth()); o.show() } } } F = true; return true }).blur(function () { if (a(this).val() == "" && J.val() == "" && u == "") { a(this).val(e.startText) } else { if (F) { a("li.as-selection-item", G).addClass("blur").removeClass("selected"); o.hide() } } }).keydown(function (P) { lastKeyPressCode = P.keyCode; first_focus = false; switch (P.keyCode) { case 38: P.preventDefault(); w("up"); break; case 40: P.preventDefault(); w("down"); break; case 8: if (B.val() == "") { var L = J.val().split(","); L = L[L.length - 2]; G.children().not(v.prev()).removeClass("selected"); if (v.prev().hasClass("selected")) { J.val(J.val().replace("," + L + ",", ",")); e.selectionRemoved.call(this, v.prev()) } else { e.selectionClick.call(this, v.prev()); v.prev().addClass("selected") } } if (B.val().length == 1) { o.hide(); E = "" } if (a(":visible", o).length > 0) { if (y) { clearTimeout(y) } y = setTimeout(function () { l() }, e.keyDelay) } break; case 9: case 188: case 13: var O = a("li.active:first", o); if (O.length > 0) { r = false; O.click().removeClass("active"); o.hide(); if (e.neverSubmit || O.length > 0) { P.preventDefault() } } else { r = true; var N = B.val().replace(/(,)/g, ""); if (N != "" && J.val().search("," + N + ",") < 0 && N.length >= e.minChars) { P.preventDefault(); var M = {}; M[e.selectedItemProp] = N; M[e.selectedValuesProp] = N; var x = a("li", G).length; I(M, "00" + (x + 1)); B.val("") } } break; case 27: o.hide(); B.val(""); break; default: if (e.showResultList) { if (e.selectionLimit && a("li.as-selection-item", G).length >= e.selectionLimit) { p.html('<li class="as-message">' + e.limitText + "</li>"); o.show() } else { if (y) { clearTimeout(y) } y = setTimeout(function () { l() }, e.keyDelay) } } break } }); function l() { if (lastKeyPressCode == 46 || (lastKeyPressCode > 8 && lastKeyPressCode < 32)) { return o.hide() } var L = B.val().replace(/[\\]+|[\/]+/g, ""); if (L == E) { return } E = L; if (L.length >= e.minChars) { G.addClass("loading"); if (d == "string") { var x = ""; if (e.retrieveLimit) { x = "&limit=" + encodeURIComponent(e.retrieveLimit) } if (e.beforeRetrieve) { L = e.beforeRetrieve.call(this, L) } a.getJSON(b + "?" + e.queryParam + "=" + encodeURIComponent(L) + x + e.extraParams, function (N) { h = 0; var M = e.retrieveComplete.call(this, N); for (k in M) { if (M.hasOwnProperty(k)) { h++ } } s(M, L) }) } else { if (e.beforeRetrieve) { L = e.beforeRetrieve.call(this, L) } s(g, L) } } else { G.removeClass("loading"); o.hide() } } var t = 0; function s(N, T) { if (!e.matchCase) { T = T.toLowerCase() } var V = 0; o.html(p.html("")).hide(); for (var O = 0; O < h; O++) { var P = O; t++; var Q = false; if (e.searchObjProps == "value") { var R = N[P].value } else { var R = ""; var S = e.searchObjProps.split(","); for (var U = 0; U < S.length; U++) { var x = a.trim(S[U]); R = R + N[P][x] + " " } } if (R) { if (!e.matchCase) { R = R.toLowerCase() } if (R.search(T) != -1 && J.val().search("," + N[P][e.selectedValuesProp] + ",") == -1) { Q = true } } if (Q) { var M = a('<li class="as-result-item" id="as-result-item-' + P + '"></li>').click(function () { var Z = a(this).data("data"); var X = Z.num; if (a("#as-selection-" + X, G).length <= 0 && !r) { var Y = Z.attributes; B.val("").focus(); E = ""; I(Y, X); e.resultClick.call(this, Z); o.hide() } r = false }).mousedown(function () { F = false }).mouseover(function () { a("li", p).removeClass("active"); a(this).addClass("active") }).data("data", { attributes: N[P], num: t }); var W = a.extend({}, N[P]); if (!e.matchCase) { var L = new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + T + ")(?![^<>]*>)(?![^&;]+;)", "gi") } else { var L = new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + T + ")(?![^<>]*>)(?![^&;]+;)", "g") } if (e.resultsHighlight) { W[e.selectedItemProp] = W[e.selectedItemProp].replace(L, "<em>$1</em>") } if (!e.formatList) { M = M.html(W[e.selectedItemProp]) } else { M = e.formatList.call(this, W, M) } p.append(M); delete W; V++; if (e.retrieveLimit && e.retrieveLimit == V) { break } } } G.removeClass("loading"); if (V <= 0) { p.html('<li class="as-message">' + e.emptyText + "</li>") } p.css("width", G.outerWidth()); o.show(); e.resultsComplete.call(this) } function I(M, x) { J.val(J.val() + M[e.selectedValuesProp] + ","); var L = a('<li class="as-selection-item" id="as-selection-' + x + '"></li>').click(function () { e.selectionClick.call(this, a(this)); G.children().removeClass("selected"); a(this).addClass("selected") }).mousedown(function () { F = false }); var N = a('<a class="as-close">&times;</a>').click(function () { J.val(J.val().replace("," + M[e.selectedValuesProp] + ",", ",")); e.selectionRemoved.call(this, L); F = true; B.focus(); return false }); v.before(L.html(M[e.selectedItemProp]).prepend(N)); e.selectionAdded.call(this, v.prev()) } function w(M) { if (a(":visible", o).length > 0) { var x = a("li", o); if (M == "down") { var N = x.eq(0) } else { var N = x.filter(":last") } var L = a("li.active:first", o); if (L.length > 0) { if (M == "down") { N = L.next() } else { N = L.prev() } } x.removeClass("active"); N.addClass("active") } } }) } } })(jQuery); (function (a) { a.widget("ui.menubar", { version: "@VERSION", options: { autoExpand: false, buttons: false, items: "li", menuElement: "ul", menuIcon: false, position: { my: "left top", at: "left bottom" } }, _create: function () { var b = this; this.menuItems = this.element.children(this.options.items); this.items = this.menuItems.children("button, a"); this.menuItems.addClass("ui-menubar-item").attr("role", "presentation"); this.items.slice(1).attr("tabIndex", -1); this.element.addClass("ui-menubar ui-widget-header ui-helper-clearfix").attr("role", "menubar"); this._focusable(this.items); this._hoverable(this.items); this.items.siblings(this.options.menuElement).menu({ position: { within: this.options.position.within }, select: function (c, d) { d.item.parents("ul.ui-menu:last").hide(); b._close(); a(c.target).prev().focus(); b._trigger("select", c, d) }, menus: b.options.menuElement }).hide().attr({ "aria-hidden": "true", "aria-expanded": "false" }).bind("keydown.menubar", function (c) { var d = a(this); if (d.is(":hidden")) { return } switch (c.keyCode) { case a.ui.keyCode.LEFT: b.previous(c); c.preventDefault(); break; case a.ui.keyCode.RIGHT: b.next(c); c.preventDefault(); break } }); this.items.each(function () { var c = a(this), d = c.next(b.options.menuElement); if (d.length) { c.bind("click.menubar focus.menubar mouseenter.menubar", function (e) { if (e.type === "focus" && !e.originalEvent) { return } e.preventDefault(); if (e.type === "click" && d.is(":visible") && b.active && b.active[0] === d[0]) { b._close(); return } if ((b.open && e.type === "mouseenter") || e.type === "click" || b.options.autoExpand) { if (b.options.autoExpand) { clearTimeout(b.closeTimer) } if (b.options.autoExpand) { b.openTimer = window.setTimeout(function () { b._open(e, d) }, 200) } else { b._open(e, d) } } }).bind("keydown", function (e) { switch (e.keyCode) { case a.ui.keyCode.SPACE: case a.ui.keyCode.UP: case a.ui.keyCode.DOWN: b._open(e, a(this).next()); e.preventDefault(); break; case a.ui.keyCode.LEFT: b.previous(e); e.preventDefault(); break; case a.ui.keyCode.RIGHT: b.next(e); e.preventDefault(); break } }).attr("aria-haspopup", "true"); if (b.options.menuIcon) { c.addClass("ui-state-default").append("<span class='ui-button-icon-secondary ui-icon ui-icon-triangle-1-s'></span>"); c.removeClass("ui-button-text-only").addClass("ui-button-text-icon-secondary") } } else { c.bind("click.menubar mouseenter.menubar", function (e) { if ((b.open && e.type === "mouseenter") || e.type === "click") { b._close() } }) } c.addClass("ui-button ui-widget ui-button-text-only ui-menubar-link").attr("role", "menuitem").wrapInner("<span class='ui-button-text'></span>"); if (b.options.buttons) { c.removeClass("ui-menubar-link").addClass("ui-state-default") } }); b._on({ keydown: function (c) { if (c.keyCode === a.ui.keyCode.ESCAPE && b.active && b.active.menu("collapse", c) !== true) { var d = b.active; b.active.blur(); b._close(c); d.prev().focus() } }, focusin: function (c) { clearTimeout(b.closeTimer) }, focusout: function (c) { clearTimeout(b.openTimer); b.closeTimer = setTimeout(function () { b._close(c) }, 150) }, "mouseleave .ui-menubar-item": function (c) { if (b.options.autoExpand) { clearTimeout(b.openTimer); b.closeTimer = setTimeout(function () { b._close(c) }, 150) } }, "mouseenter .ui-menubar-item": function (c) { clearTimeout(b.closeTimer) } }); this.openSubmenus = 0 }, _destroy: function () { this.menuItems.removeClass("ui-menubar-item").removeAttr("role"); this.element.removeClass("ui-menubar ui-widget-header ui-helper-clearfix").removeAttr("role").unbind(".menubar"); this.items.unbind(".menubar").removeClass("ui-button ui-widget ui-button-text-only ui-menubar-link ui-state-default").removeAttr("role").removeAttr("aria-haspopup").children("span.ui-button-text").each(function (b, d) { var c = a(this); c.parent().html(c.html()) }).end().children(".ui-icon").remove(); this.element.find(":ui-menu").menu("destroy").show().removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("tabindex").unbind(".menubar") }, _close: function () { if (!this.active || !this.active.length) { return } this.active.menu("collapseAll").hide().attr({ "aria-hidden": "true", "aria-expanded": "false" }); this.active.prev().removeClass("ui-state-active").removeAttr("tabIndex"); this.active = null; this.open = false; this.openSubmenus = 0 }, _open: function (c, d) { if (this.active && this.active[0] === d[0]) { return } if (this.active) { this.active.menu("collapseAll").hide().attr({ "aria-hidden": "true", "aria-expanded": "false" }); this.active.prev().removeClass("ui-state-active") } var b = d.prev().addClass("ui-state-active").attr("tabIndex", -1); this.active = d.slideDown(200).position(a.extend({ of: b }, this.options.position)).removeAttr("aria-hidden").attr("aria-expanded", "true").menu("focus", c, d.children(".ui-menu-item").first()).focus().focusin(); this.open = true }, next: function (b) { if (this.open && this.active.data("menu").active.has(".ui-menu").length) { this.openSubmenus++; return } this.openSubmenus = 0; this._move("next", "first", b) }, previous: function (b) { if (this.open && this.openSubmenus) { this.openSubmenus--; return } this.openSubmenus = 0; this._move("prev", "last", b) }, _move: function (f, d, e) { var c, b; if (this.open) { c = this.active.closest(".ui-menubar-item")[f + "All"](this.options.items).first().children(".ui-menu").eq(0); b = this.menuItems[d]().children(".ui-menu").eq(0) } else { if (e) { c = a(e.target).closest(".ui-menubar-item")[f + "All"](this.options.items).children(".ui-menubar-link").eq(0); b = this.menuItems[d]().children(".ui-menubar-link").eq(0) } else { c = b = this.menuItems.children("a").eq(0) } } if (c.length) { if (this.open) { this._open(e, c) } else { c.removeAttr("tabIndex")[0].focus() } } else { if (this.open) { this._open(e, b) } else { b.removeAttr("tabIndex")[0].focus() } } } }) }(jQuery)); (function (b) { b.fn.rateit = function (h, f) { var c = {}; var g = "init"; var e = function (j) { return j.charAt(0).toUpperCase() + j.substr(1) }; if (this.length == 0) { return this } var d = b.type(h); if (d == "object" || h === undefined || h == null) { c = b.extend({}, b.fn.rateit.defaults, h) } else { if (d == "string" && f === undefined) { return this.data("rateit" + e(h)) } else { if (d == "string") { g = "setvalue" } } } return this.each(function () { var r = b(this); var s = function (t, u) { arguments[0] = "rateit" + e(t); return r.data.apply(r, arguments) }; if (!r.hasClass("rateit")) { r.addClass("rateit") } var j = r.css("direction") != "rtl"; if (g == "setvalue") { if (!s("init")) { throw "Can't set value before init" } if (h == "readonly" && !s("readonly")) { r.find(".rateit-range").unbind(); s("wired", false) } if (h == "value" && f == null) { f = s("min") } if (s("backingfld")) { var m = b(s("backingfld")); if (h == "value") { m.val(f) } if (h == "min" && m[0].min) { m[0].min = f } if (h == "max" && m[0].max) { m[0].max = f } if (h == "step" && m[0].step) { m[0].step = f } } s(h, f) } if (!s("init")) { s("min", s("min") || c.min); s("max", s("max") || c.max); s("step", s("step") || c.step); s("readonly", s("readonly") !== undefined ? s("readonly") : c.readonly); s("resetable", s("resetable") !== undefined ? s("resetable") : c.resetable); s("backingfld", s("backingfld") || c.backingfld); s("starwidth", s("starwidth") || c.starwidth); s("starheight", s("starheight") || c.starheight); s("value", s("value") || c.value || c.min); s("ispreset", s("ispreset") !== undefined ? s("ispreset") : c.ispreset); if (s("backingfld")) { var m = b(s("backingfld")); s("value", m.hide().val()); if (m.attr("disabled") || m.attr("readonly")) { s("readonly", true) } if (m[0].nodeName == "INPUT") { if (m[0].type == "range" || m[0].type == "text") { s("min", parseInt(m.attr("min")) || s("min")); s("max", parseInt(m.attr("max")) || s("max")); s("step", parseInt(m.attr("step")) || s("step")) } } if (m[0].nodeName == "SELECT" && m[0].options.length > 1) { s("min", Number(m[0].options[0].value)); s("max", Number(m[0].options[m[0].length - 1].value)); s("step", Number(m[0].options[1].value) - Number(m[0].options[0].value)) } } r.append('<div class="rateit-reset"></div><div class="rateit-range"><div class="rateit-selected" style="height:' + s("starheight") + 'px"></div><div class="rateit-hover" style="height:' + s("starheight") + 'px"></div></div>'); if (!j) { r.find(".rateit-reset").css("float", "right"); r.find(".rateit-selected").addClass("rateit-selected-rtl"); r.find(".rateit-hover").addClass("rateit-hover-rtl") } s("init", true) } var o = r.find(".rateit-range"); o.width(s("starwidth") * (s("max") - s("min"))).height(s("starheight")); var n = "rateit-preset" + ((j) ? "" : "-rtl"); if (s("ispreset")) { r.find(".rateit-selected").addClass(n) } else { r.find(".rateit-selected").removeClass(n) } if (s("value") != null) { var l = (s("value") - s("min")) * s("starwidth"); r.find(".rateit-selected").width(l) } var p = r.find(".rateit-reset"); if (p.data("wired") !== true) { p.click(function () { s("value", s("min")); o.find(".rateit-hover").hide().width(0); o.find(".rateit-selected").width(0).show(); if (s("backingfld")) { b(s("backingfld")).val(s("min")) } r.trigger("reset") }).data("wired", true) } var q = function (u, w) { var v = (w.changedTouches) ? w.changedTouches[0].pageX : w.pageX; var t = v - b(u).offset().left; if (!j) { t = o.width() - t } if (t > o.width()) { t = o.width() } if (t < 0) { t = 0 } return l = Math.ceil(t / s("starwidth") * (1 / s("step"))) }; if (!s("readonly")) { if (!s("resetable")) { p.hide() } if (!s("wired")) { o.bind("touchmove touchend", a); o.mousemove(function (x) { var y = q(this, x); var t = y * s("starwidth") * s("step"); var u = o.find(".rateit-hover"); if (u.data("width") != t) { o.find(".rateit-selected").hide(); u.width(t).show().data("width", t); var v = [(y * s("step")) + s("min")]; r.trigger("hover", v).trigger("over", v) } }); o.mouseleave(function (t) { o.find(".rateit-hover").hide().width(0).data("width", ""); r.trigger("hover", [null]).trigger("over", [null]); o.find(".rateit-selected").show() }); o.mouseup(function (u) { var v = q(this, u); var t = (v * s("step")) + s("min"); s("value", t); if (s("backingfld")) { b(s("backingfld")).val(t) } if (s("ispreset")) { o.find(".rateit-selected").removeClass(n); s("ispreset", false) } o.find(".rateit-hover").hide(); o.find(".rateit-selected").width(v * s("starwidth") * s("step")).show(); r.trigger("hover", [null]).trigger("over", [null]).trigger("rated", [t]) }); s("wired", true) } if (s("resetable")) { p.show() } } else { p.hide() } }) }; function a(e) { var f = e.originalEvent.changedTouches, g = f[0], c = ""; switch (e.type) { case "touchmove": c = "mousemove"; break; case "touchend": c = "mouseup"; break; default: return } var d = document.createEvent("MouseEvent"); d.initMouseEvent(c, true, true, window, 1, g.screenX, g.screenY, g.clientX, g.clientY, false, false, false, false, 0, null); g.target.dispatchEvent(d); e.preventDefault() } b.fn.rateit.defaults = { min: 0, max: 5, step: 0.5, starwidth: 16, starheight: 16, readonly: false, resetable: true, ispreset: false } })(jQuery); (function (a) { a.supersized = function (b) { var c = this; c.init = function () { a.supersized.vars = a.extend(a.supersized.vars, a.supersized.themeVars); a.supersized.vars.options = a.extend({}, a.supersized.defaultOptions, a.supersized.themeOptions, b); c.options = a.supersized.vars.options; c._build() }; c._build = function () { var g = 0, d = "", l = "", h, e = "", j; a("body").children(":visible").hide().addClass("supersized_hidden"); a("body").append(a(a.supersized.vars.options.html_template), '<div id="supersized-loader"></div><ul id="supersized"></ul>'); var f = "#supersized"; c.$el = a(f); c.el = f; vars = a.supersized.vars; c.$el.data("supersized", c); api = c.$el.data("supersized"); while (g <= c.options.slides.length - 1) { switch (c.options.slide_links) { case "num": h = g; break; case "name": h = c.options.slides[g].title; break; case "blank": h = ""; break } d = d + '<li class="slide-' + g + '"></li>'; if (g == c.options.start_slide - 1) { if (c.options.slide_links) { l = l + '<li class="slide-link-' + g + ' current-slide"><a>' + h + "</a></li>" } if (c.options.thumb_links) { c.options.slides[g].thumb ? j = c.options.slides[g].thumb : j = c.options.slides[g].image; e = e + '<li class="thumb' + g + ' current-thumb"><img src="' + j + '"/></li>' } } else { if (c.options.slide_links) { l = l + '<li class="slide-link-' + g + '" ><a>' + h + "</a></li>" } if (c.options.thumb_links) { c.options.slides[g].thumb ? j = c.options.slides[g].thumb : j = c.options.slides[g].image; e = e + '<li class="thumb' + g + '"><img src="' + j + '"/></li>' } } g++ } if (c.options.slide_links) { a(vars.slide_list).html(l) } if (c.options.thumb_links && vars.thumb_tray.length) { a(vars.thumb_tray).append('<ul id="' + vars.thumb_list.replace("#", "") + '">' + e + "</ul>") } a(c.el).append(d); if (c.options.thumbnail_navigation) { vars.current_slide - 1 < 0 ? prevThumb = c.options.slides.length - 1 : prevThumb = vars.current_slide - 1; a(vars.prev_thumb).show().html(a("<img/>").attr("src", c.options.slides[prevThumb].image)); vars.current_slide == c.options.slides.length - 1 ? nextThumb = 0 : nextThumb = vars.current_slide + 1; a(vars.next_thumb).show().html(a("<img/>").attr("src", c.options.slides[nextThumb].image)) } c._start() }; c._start = function () { if (c.options.start_slide) { vars.current_slide = c.options.start_slide - 1 } else { vars.current_slide = Math.floor(Math.random() * c.options.slides.length) } var o = c.options.new_window ? ' target="_blank"' : ""; if (c.options.performance == 3) { c.$el.addClass("speed") } else { if ((c.options.performance == 1) || (c.options.performance == 2)) { c.$el.addClass("quality") } } if (c.options.random) { arr = c.options.slides; for (var g, m, h = arr.length; h; g = parseInt(Math.random() * h), m = arr[--h], arr[h] = arr[g], arr[g] = m) { } c.options.slides = arr } if (c.options.slides.length > 1) { if (c.options.slides.length > 2) { vars.current_slide - 1 < 0 ? loadPrev = c.options.slides.length - 1 : loadPrev = vars.current_slide - 1; var f = (c.options.slides[loadPrev].url) ? "href='" + c.options.slides[loadPrev].url + "'" : ""; var q = a('<img src="' + c.options.slides[loadPrev].image + '"/>'); var n = c.el + " li:eq(" + loadPrev + ")"; q.appendTo(n).wrap("<a " + f + o + "></a>").parent().parent().addClass("image-loading prevslide"); q.load(function () { a(this).data("origWidth", a(this).width()).data("origHeight", a(this).height()); c.resizeNow() }) } } else { } f = (api.getField("url")) ? "href='" + api.getField("url") + "'" : ""; var l = a('<img src="' + api.getField("image") + '"/>'); var e = c.el + " li:eq(" + vars.current_slide + ")"; l.appendTo(e).wrap("<a " + f + o + "></a>").parent().parent().addClass("image-loading activeslide").css("visibility", "visible"); l.load(function () { c._origDim(a(this)); c.resizeNow(); c.launch(); if (typeof theme != "undefined" && typeof theme._init == "function") { theme._init() } }); if (c.options.slides.length > 1) { vars.current_slide == c.options.slides.length - 1 ? loadNext = 0 : loadNext = vars.current_slide + 1; f = (c.options.slides[loadNext].url) ? "href='" + c.options.slides[loadNext].url + "'" : ""; var d = a('<img src="' + c.options.slides[loadNext].image + '"/>'); var p = c.el + " li:eq(" + loadNext + ")"; d.appendTo(p).wrap("<a " + f + o + "></a>").parent().parent().addClass("image-loading"); d.load(function () { a(this).data("origWidth", a(this).width()).data("origHeight", a(this).height()); c.resizeNow() }) } c.$el.css("visibility", "hidden"); a(".load-item").hide() }; c.launch = function () { a("#supersized-loader").remove(); if (typeof theme != "undefined" && typeof theme.beforeAnimation == "function") { theme.beforeAnimation("next") } a(".load-item").show(); if (c.options.keyboard_nav) { a(document.documentElement).on("keyup.supersized", function (d) { if (vars.in_animation) { return false } if (a(document.activeElement).is("input, textarea")) { return false } if ((d.keyCode == 37) || (d.keyCode == 40)) { clearInterval(vars.slideshow_interval); c.prevSlide() } else { if ((d.keyCode == 39) || (d.keyCode == 38)) { clearInterval(vars.slideshow_interval); c.nextSlide() } else { if (d.keyCode == 32 && !vars.hover_pause) { clearInterval(vars.slideshow_interval); c.playToggle() } } } }) } if (c.options.slideshow && c.options.pause_hover) { a(c.el).hover(function () { if (vars.in_animation) { return false } vars.hover_pause = true; if (!vars.is_paused) { vars.hover_pause = "resume"; c.playToggle() } }, function () { if (vars.hover_pause == "resume") { c.playToggle(); vars.hover_pause = false } }) } if (c.options.slide_links) { a(vars.slide_list + "> li").click(function () { index = a(vars.slide_list + "> li").index(this); targetSlide = index + 1; c.goTo(targetSlide); return false }) } if (c.options.thumb_links) { a(vars.thumb_list + "> li").click(function () { index = a(vars.thumb_list + "> li").index(this); targetSlide = index + 1; api.goTo(targetSlide); return false }) } if (c.options.slideshow && c.options.slides.length > 1) { if (c.options.autoplay && c.options.slides.length > 1) { vars.slideshow_interval = setInterval(c.nextSlide, c.options.slide_interval) } else { vars.is_paused = true } a(".load-item img").bind("contextmenu mousedown", function () { return false }) } a(window).resize(function () { c.resizeNow() }) }; c.resizeNow = function () { return c.$el.each(function () { a("img", c.el).each(function () { thisSlide = a(this); var e = (thisSlide.data("origHeight") / thisSlide.data("origWidth")).toFixed(2); var d = c.$el.width(), g = c.$el.height(), h; if (c.options.fit_always) { if ((g / d) > e) { f() } else { j() } } else { if ((g <= c.options.min_height) && (d <= c.options.min_width)) { if ((g / d) > e) { c.options.fit_landscape && e < 1 ? f(true) : j(true) } else { c.options.fit_portrait && e >= 1 ? j(true) : f(true) } } else { if (d <= c.options.min_width) { if ((g / d) > e) { c.options.fit_landscape && e < 1 ? f(true) : j() } else { c.options.fit_portrait && e >= 1 ? j() : f(true) } } else { if (g <= c.options.min_height) { if ((g / d) > e) { c.options.fit_landscape && e < 1 ? f() : j(true) } else { c.options.fit_portrait && e >= 1 ? j(true) : f() } } else { if ((g / d) > e) { c.options.fit_landscape && e < 1 ? f() : j() } else { c.options.fit_portrait && e >= 1 ? j() : f() } } } } } function f(l) { if (l) { if (thisSlide.width() < d || thisSlide.width() < c.options.min_width) { if (thisSlide.width() * e >= c.options.min_height) { thisSlide.width(c.options.min_width); thisSlide.height(thisSlide.width() * e) } else { j() } } } else { if (c.options.min_height >= g && !c.options.fit_landscape) { if (d * e >= c.options.min_height || (d * e >= c.options.min_height && e <= 1)) { thisSlide.width(d); thisSlide.height(d * e) } else { if (e > 1) { thisSlide.height(c.options.min_height); thisSlide.width(thisSlide.height() / e) } else { if (thisSlide.width() < d) { thisSlide.width(d); thisSlide.height(thisSlide.width() * e) } } } } else { thisSlide.width(d); thisSlide.height(d * e) } } } function j(l) { if (l) { if (thisSlide.height() < g) { if (thisSlide.height() / e >= c.options.min_width) { thisSlide.height(c.options.min_height); thisSlide.width(thisSlide.height() / e) } else { f(true) } } } else { if (c.options.min_width >= d) { if (g / e >= c.options.min_width || e > 1) { thisSlide.height(g); thisSlide.width(g / e) } else { if (e <= 1) { thisSlide.width(c.options.min_width); thisSlide.height(thisSlide.width() * e) } } } else { thisSlide.height(g); thisSlide.width(g / e) } } } if (thisSlide.parents("li").hasClass("image-loading")) { a(".image-loading").removeClass("image-loading") } if (c.options.horizontal_center) { a(this).css("left", (d - a(this).width()) / 2) } if (c.options.vertical_center) { a(this).css("top", (g - a(this).height()) / 2) } }); if (c.options.image_protect) { a("img", c.el).bind("contextmenu mousedown", function () { return false }) } return false }) }; c.nextSlide = function () { if (c.options.slideshow && !vars.is_paused && c.options.auto_exit && (vars.current_slide == c.options.slides.length - 1)) { c.destroy(); return false } var h = vars.current_slide; if (vars.current_slide < c.options.slides.length - 1) { vars.current_slide++ } else { if (c.options.loop) { vars.current_slide = 0 } } if (h == vars.current_slide) { vars.in_animation = false; return false } if (vars.in_animation || !api.options.slideshow) { return false } else { vars.in_animation = true } clearInterval(vars.slideshow_interval); var g = c.options.slides, d = c.$el.find(".activeslide"); a(".prevslide").removeClass("prevslide"); d.removeClass("activeslide").addClass("prevslide"); var f = a(c.el + " li:eq(" + vars.current_slide + ")"), j = c.$el.find(".prevslide"); if (c.options.performance == 1) { c.$el.removeClass("quality").addClass("speed") } loadSlide = false; vars.current_slide == c.options.slides.length - 1 ? loadSlide = 0 : loadSlide = vars.current_slide + 1; var m = c.el + " li:eq(" + loadSlide + ")"; if (!a(m).html()) { var l = c.options.new_window ? ' target="_blank"' : ""; imageLink = (c.options.slides[loadSlide].url) ? "href='" + c.options.slides[loadSlide].url + "'" : ""; var e = a('<img src="' + c.options.slides[loadSlide].image + '"/>'); e.appendTo(m).wrap("<a " + imageLink + l + "></a>").parent().parent().addClass("image-loading").css("visibility", "hidden"); e.load(function () { c._origDim(a(this)); c.resizeNow() }) } if (c.options.thumbnail_navigation == 1) { vars.current_slide - 1 < 0 ? prevThumb = c.options.slides.length - 1 : prevThumb = vars.current_slide - 1; a(vars.prev_thumb).html(a("<img/>").attr("src", c.options.slides[prevThumb].image)); nextThumb = loadSlide; a(vars.next_thumb).html(a("<img/>").attr("src", c.options.slides[nextThumb].image)) } if (typeof theme != "undefined" && typeof theme.beforeAnimation == "function") { theme.beforeAnimation("next") } if (c.options.slide_links) { a(".current-slide").removeClass("current-slide"); a(vars.slide_list + "> li").eq(vars.current_slide).addClass("current-slide") } f.css("visibility", "hidden").addClass("activeslide"); switch (c.options.transition) { case 0: case "none": f.css("visibility", "visible"); vars.in_animation = false; c.afterAnimation(); break; case 1: case "fade": f.css({ opacity: 0, visibility: "visible" }).animate({ opacity: 1, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 2: case "slideTop": f.css({ top: -c.$el.height(), visibility: "visible" }).animate({ top: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 3: case "slideRight": f.css({ left: c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 4: case "slideBottom": f.css({ top: c.$el.height(), visibility: "visible" }).animate({ top: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 5: case "slideLeft": f.css({ left: -c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 6: case "carouselRight": f.css({ left: c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); d.animate({ left: -c.$el.width(), avoidTransforms: false }, c.options.transition_speed); break; case 7: case "carouselLeft": f.css({ left: -c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); d.animate({ left: c.$el.width(), avoidTransforms: false }, c.options.transition_speed); break } return false }; c.prevSlide = function () { if (vars.in_animation || !api.options.slideshow) { return false } else { vars.in_animation = true } var h = vars.current_slide; if (vars.current_slide > 0) { vars.current_slide-- } else { if (c.options.loop) { vars.current_slide = c.options.slides.length - 1 } } if (h == vars.current_slide) { vars.in_animation = false; return false } clearInterval(vars.slideshow_interval); var g = c.options.slides, d = c.$el.find(".activeslide"); a(".prevslide").removeClass("prevslide"); d.removeClass("activeslide").addClass("prevslide"); var f = a(c.el + " li:eq(" + vars.current_slide + ")"), j = c.$el.find(".prevslide"); if (c.options.performance == 1) { c.$el.removeClass("quality").addClass("speed") } loadSlide = vars.current_slide; var m = c.el + " li:eq(" + loadSlide + ")"; if (!a(m).html()) { var l = c.options.new_window ? ' target="_blank"' : ""; imageLink = (c.options.slides[loadSlide].url) ? "href='" + c.options.slides[loadSlide].url + "'" : ""; var e = a('<img src="' + c.options.slides[loadSlide].image + '"/>'); e.appendTo(m).wrap("<a " + imageLink + l + "></a>").parent().parent().addClass("image-loading").css("visibility", "hidden"); e.load(function () { c._origDim(a(this)); c.resizeNow() }) } if (c.options.thumbnail_navigation == 1) { loadSlide == 0 ? prevThumb = c.options.slides.length - 1 : prevThumb = loadSlide - 1; a(vars.prev_thumb).html(a("<img/>").attr("src", c.options.slides[prevThumb].image)); vars.current_slide == c.options.slides.length - 1 ? nextThumb = 0 : nextThumb = vars.current_slide + 1; a(vars.next_thumb).html(a("<img/>").attr("src", c.options.slides[nextThumb].image)) } if (typeof theme != "undefined" && typeof theme.beforeAnimation == "function") { theme.beforeAnimation("prev") } if (c.options.slide_links) { a(".current-slide").removeClass("current-slide"); a(vars.slide_list + "> li").eq(vars.current_slide).addClass("current-slide") } f.css("visibility", "hidden").addClass("activeslide"); switch (c.options.transition) { case 0: case "none": f.css("visibility", "visible"); vars.in_animation = false; c.afterAnimation(); break; case 1: case "fade": f.css({ opacity: 0, visibility: "visible" }).animate({ opacity: 1, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 2: case "slideTop": f.css({ top: c.$el.height(), visibility: "visible" }).animate({ top: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 3: case "slideRight": f.css({ left: -c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 4: case "slideBottom": f.css({ top: -c.$el.height(), visibility: "visible" }).animate({ top: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 5: case "slideLeft": f.css({ left: c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 6: case "carouselRight": f.css({ left: -c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); d.css({ left: 0 }).animate({ left: c.$el.width(), avoidTransforms: false }, c.options.transition_speed); break; case 7: case "carouselLeft": f.css({ left: c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); d.css({ left: 0 }).animate({ left: -c.$el.width(), avoidTransforms: false }, c.options.transition_speed); break } return false }; c.playToggle = function () { if (vars.in_animation || !api.options.slideshow) { return false } if (vars.is_paused) { vars.is_paused = false; if (typeof theme != "undefined" && typeof theme.playToggle == "function") { theme.playToggle("play") } vars.slideshow_interval = setInterval(c.nextSlide, c.options.slide_interval) } else { vars.is_paused = true; if (typeof theme != "undefined" && typeof theme.playToggle == "function") { theme.playToggle("pause") } clearInterval(vars.slideshow_interval) } return false }; c.destroy = function () { if (vars.in_animation || !api.options.slideshow) { return } if (vars.is_paused) { api.playToggle() } clearInterval(vars.slideshow_interval); a(document.documentElement).off(".supersized"); a(".ssControlsContainer *").off("click"); vars = null; api = null; a("#supersized-loader,#supersized,.ssControlsContainer").remove(); a("body .supersized_hidden").show().removeClass("supersized_hidden"); c.options.on_destroy.apply() }; c.goTo = function (e) { if (vars.in_animation || !api.options.slideshow) { return false } var d = c.options.slides.length; if (e < 0) { e = d } else { if (e > d) { e = 1 } } e = d - e + 1; clearInterval(vars.slideshow_interval); if (typeof theme != "undefined" && typeof theme.goTo == "function") { theme.goTo() } if (vars.current_slide == d - e) { if (!(vars.is_paused)) { vars.slideshow_interval = setInterval(c.nextSlide, c.options.slide_interval) } return false } if (d - e > vars.current_slide) { vars.current_slide = d - e - 1; vars.update_images = "next"; c._placeSlide(vars.update_images) } else { if (d - e < vars.current_slide) { vars.current_slide = d - e + 1; vars.update_images = "prev"; c._placeSlide(vars.update_images) } } if (c.options.slide_links) { a(vars.slide_list + "> .current-slide").removeClass("current-slide"); a(vars.slide_list + "> li").eq((d - e)).addClass("current-slide") } if (c.options.thumb_links) { a(vars.thumb_list + "> .current-thumb").removeClass("current-thumb"); a(vars.thumb_list + "> li").eq((d - e)).addClass("current-thumb") } }; c._placeSlide = function (d) { var g = c.options.new_window ? ' target="_blank"' : ""; loadSlide = false; if (d == "next") { vars.current_slide == c.options.slides.length - 1 ? loadSlide = 0 : loadSlide = vars.current_slide + 1; var f = c.el + " li:eq(" + loadSlide + ")"; if (!a(f).html()) { var g = c.options.new_window ? ' target="_blank"' : ""; imageLink = (c.options.slides[loadSlide].url) ? "href='" + c.options.slides[loadSlide].url + "'" : ""; var e = a('<img src="' + c.options.slides[loadSlide].image + '"/>'); e.appendTo(f).wrap("<a " + imageLink + g + "></a>").parent().parent().addClass("image-loading").css("visibility", "hidden"); e.load(function () { c._origDim(a(this)); c.resizeNow() }) } c.nextSlide() } else { if (d == "prev") { vars.current_slide - 1 < 0 ? loadSlide = c.options.slides.length - 1 : loadSlide = vars.current_slide - 1; var f = c.el + " li:eq(" + loadSlide + ")"; if (!a(f).html()) { var g = c.options.new_window ? ' target="_blank"' : ""; imageLink = (c.options.slides[loadSlide].url) ? "href='" + c.options.slides[loadSlide].url + "'" : ""; var e = a('<img src="' + c.options.slides[loadSlide].image + '"/>'); e.appendTo(f).wrap("<a " + imageLink + g + "></a>").parent().parent().addClass("image-loading").css("visibility", "hidden"); e.load(function () { c._origDim(a(this)); c.resizeNow() }) } c.prevSlide() } } }; c._origDim = function (d) { d.data("origWidth", d.width()).data("origHeight", d.height()) }; c.afterAnimation = function () { if (c.options.performance == 1) { c.$el.removeClass("speed").addClass("quality") } if (vars.update_images) { vars.current_slide - 1 < 0 ? setPrev = c.options.slides.length - 1 : setPrev = vars.current_slide - 1; vars.update_images = false; a(".prevslide").removeClass("prevslide"); a(c.el + " li:eq(" + setPrev + ")").addClass("prevslide") } vars.in_animation = false; if (!vars.is_paused && c.options.slideshow) { vars.slideshow_interval = setInterval(c.nextSlide, c.options.slide_interval); if (!c.options.loop && !c.options.auto_exit && vars.current_slide == c.options.slides.length - 1) { c.playToggle() } } if (typeof theme != "undefined" && typeof theme.afterAnimation == "function") { theme.afterAnimation() } return false }; c.getField = function (d) { return c.options.slides[vars.current_slide][d] }; c.init() }; a.supersized.vars = { thumb_tray: "#thumb-tray", thumb_list: "#thumb-list", slide_list: "#slide-list", current_slide: 0, in_animation: false, is_paused: false, hover_pause: false, slideshow_interval: false, update_images: false, options: {} }; a.supersized.defaultOptions = { slideshow: 1, autoplay: 1, auto_exit: 0, start_slide: 1, loop: 1, random: 0, slide_interval: 5000, transition: 1, transition_speed: 750, new_window: 1, pause_hover: 0, keyboard_nav: 1, performance: 1, image_protect: 1, fit_always: 0, fit_landscape: 0, fit_portrait: 1, min_width: 0, min_height: 0, horizontal_center: 1, vertical_center: 1, slide_links: 1, thumb_links: 1, thumbnail_navigation: 0, on_destroy: function () { } }; a.fn.supersized = function (b) { return this.each(function () { (new a.supersized(b)) }) } })(jQuery); (function (a) { theme = { _init: function () { if (api.options.slide_links) { var b = a(vars.slide_list).parent().width() - 400; a(vars.slide_list).css("margin-left", -a(vars.slide_list).width() / 2).css("max-width", b) } if (api.options.autoplay) { if (api.options.progress_bar) { theme.progressBar() } else { a(vars.progress_bar).parent().hide() } } else { if (a(vars.play_button).attr("src")) { a(vars.play_button).attr("src", api.options.image_path + "play.png") } if (api.options.progress_bar) { a(vars.progress_bar).stop().css({ left: -a(window).width() }) } else { a(vars.progress_bar).parent().hide() } } a(vars.thumb_tray).css({ bottom: -(a(vars.thumb_tray).outerHeight() + 5) }); a(vars.tray_button).toggle(function () { a(vars.thumb_tray).stop().animate({ bottom: 0, avoidTransforms: true }, 300); if (a(vars.tray_arrow).attr("src")) { a(vars.tray_arrow).attr("src", api.options.image_path + "button-tray-down.png") } return false }, function () { a(vars.thumb_tray).stop().animate({ bottom: -(a(vars.thumb_tray).outerHeight() + 5), avoidTransforms: true }, 300); if (a(vars.tray_arrow).attr("src")) { a(vars.tray_arrow).attr("src", api.options.image_path + "button-tray-up.png") } return false }); a(vars.thumb_list).width(a("> li", vars.thumb_list).length * a("> li", vars.thumb_list).outerWidth(true)); if (a(vars.slide_total).length) { a(vars.slide_total).html(api.options.slides.length) } if (api.options.thumb_links) { if (a(vars.thumb_list).width() <= a(vars.thumb_tray).width()) { a(vars.thumb_back + "," + vars.thumb_forward).fadeOut(0) } vars.thumb_interval = Math.floor(a(vars.thumb_tray).width() / a("> li", vars.thumb_list).outerWidth(true)) * a("> li", vars.thumb_list).outerWidth(true); vars.thumb_page = 0; a(vars.thumb_forward).click(function () { if (vars.thumb_page - vars.thumb_interval <= -a(vars.thumb_list).width()) { vars.thumb_page = 0; a(vars.thumb_list).stop().animate({ left: vars.thumb_page }, { duration: 500, easing: "easeOutExpo" }) } else { vars.thumb_page = vars.thumb_page - vars.thumb_interval; a(vars.thumb_list).stop().animate({ left: vars.thumb_page }, { duration: 500, easing: "easeOutExpo" }) } }); a(vars.thumb_back).click(function () { if (vars.thumb_page + vars.thumb_interval > 0) { vars.thumb_page = Math.floor(a(vars.thumb_list).width() / vars.thumb_interval) * -vars.thumb_interval; if (a(vars.thumb_list).width() <= -vars.thumb_page) { vars.thumb_page = vars.thumb_page + vars.thumb_interval } a(vars.thumb_list).stop().animate({ left: vars.thumb_page }, { duration: 500, easing: "easeOutExpo" }) } else { vars.thumb_page = vars.thumb_page + vars.thumb_interval; a(vars.thumb_list).stop().animate({ left: vars.thumb_page }, { duration: 500, easing: "easeOutExpo" }) } }) } a(vars.next_slide).click(function () { api.nextSlide() }); a(vars.prev_slide).click(function () { api.prevSlide() }); if (jQuery.support.opacity) { a(vars.prev_slide + "," + vars.next_slide).mouseover(function () { a(this).stop().animate({ opacity: 1 }, 100) }).mouseout(function () { a(this).stop().animate({ opacity: 0.6 }, 100) }) } if (api.options.thumbnail_navigation) { a(vars.next_thumb).click(function () { api.nextSlide() }); a(vars.prev_thumb).click(function () { api.prevSlide() }) } a(vars.play_button).click(function () { api.playToggle() }); if (api.options.mouse_scrub) { a(vars.thumb_tray).mousemove(function (g) { var d = a(vars.thumb_tray).width(), h = a(vars.thumb_list).width(); if (h > d) { var c = 1, f = g.pageX - c; if (f > 10 || f < -10) { c = g.pageX; newX = (d - h) * (g.pageX / d); f = parseInt(Math.abs(parseInt(a(vars.thumb_list).css("left")) - newX)).toFixed(0); a(vars.thumb_list).stop().animate({ left: newX }, { duration: f * 3, easing: "easeOutExpo" }) } } }) } a(window).resize(function () { if (api.options.progress_bar && !vars.in_animation) { if (vars.slideshow_interval) { clearInterval(vars.slideshow_interval) } if (api.options.slides.length - 1 > 0) { clearInterval(vars.slideshow_interval) } a(vars.progress_bar).stop().css({ left: -a(window).width() }); if (!vars.progressDelay && api.options.slideshow) { vars.progressDelay = setTimeout(function () { if (!vars.is_paused) { theme.progressBar(); vars.slideshow_interval = setInterval(api.nextSlide, api.options.slide_interval) } vars.progressDelay = false }, 1000) } } if (api.options.thumb_links && vars.thumb_tray.length) { vars.thumb_page = 0; vars.thumb_interval = Math.floor(a(vars.thumb_tray).width() / a("> li", vars.thumb_list).outerWidth(true)) * a("> li", vars.thumb_list).outerWidth(true); if (a(vars.thumb_list).width() > a(vars.thumb_tray).width()) { a(vars.thumb_back + "," + vars.thumb_forward).fadeIn("fast"); a(vars.thumb_list).stop().animate({ left: 0 }, 200) } else { a(vars.thumb_back + "," + vars.thumb_forward).fadeOut("fast") } } if (api.options.slide_links) { b = a(vars.slide_list).parent().width() - 400; a(vars.slide_list).css("margin-left", -a(vars.slide_list).width() / 2).css("max-width", b); console.log(b) } }) }, goTo: function () { if (api.options.progress_bar && !vars.is_paused) { a(vars.progress_bar).stop().css({ left: -a(window).width() }); theme.progressBar() } }, playToggle: function (b) { if (b == "play") { if (a(vars.play_button).attr("src")) { a(vars.play_button).attr("src", api.options.image_path + "pause.png") } if (api.options.progress_bar && !vars.is_paused) { theme.progressBar() } } else { if (b == "pause") { if (a(vars.play_button).attr("src")) { a(vars.play_button).attr("src", api.options.image_path + "play.png") } if (api.options.progress_bar && vars.is_paused) { a(vars.progress_bar).stop().css({ left: -a(window).width() }) } } } }, beforeAnimation: function (b) { if (api.options.progress_bar && !vars.is_paused) { a(vars.progress_bar).stop().css({ left: -a(window).width() }) } if (a(vars.slide_caption).length) { (api.getField("title")) ? a(vars.slide_caption).html(api.getField("title")) : a(vars.slide_caption).html("") } if (vars.slide_current.length) { a(vars.slide_current).html(vars.current_slide + 1) } if (api.options.thumb_links) { a(".current-thumb").removeClass("current-thumb"); a("li", vars.thumb_list).eq(vars.current_slide).addClass("current-thumb"); if (a(vars.thumb_list).width() > a(vars.thumb_tray).width()) { if (b == "next") { if (vars.current_slide == 0) { vars.thumb_page = 0; a(vars.thumb_list).stop().animate({ left: vars.thumb_page }, { duration: 500, easing: "easeOutExpo" }) } else { if (a(".current-thumb").offset().left - a(vars.thumb_tray).offset().left >= vars.thumb_interval) { vars.thumb_page = vars.thumb_page - vars.thumb_interval; a(vars.thumb_list).stop().animate({ left: vars.thumb_page }, { duration: 500, easing: "easeOutExpo" }) } } } else { if (b == "prev") { if (vars.current_slide == api.options.slides.length - 1) { vars.thumb_page = Math.floor(a(vars.thumb_list).width() / vars.thumb_interval) * -vars.thumb_interval; if (a(vars.thumb_list).width() <= -vars.thumb_page) { vars.thumb_page = vars.thumb_page + vars.thumb_interval } a(vars.thumb_list).stop().animate({ left: vars.thumb_page }, { duration: 500, easing: "easeOutExpo" }) } else { if (a(".current-thumb").offset().left - a(vars.thumb_tray).offset().left < 0) { if (vars.thumb_page + vars.thumb_interval > 0) { return false } vars.thumb_page = vars.thumb_page + vars.thumb_interval; a(vars.thumb_list).stop().animate({ left: vars.thumb_page }, { duration: 500, easing: "easeOutExpo" }) } } } } } } }, afterAnimation: function () { if (api.options.progress_bar && !vars.is_paused) { theme.progressBar() } }, progressBar: function () { a(vars.progress_bar).stop().css({ left: -a(window).width() }).animate({ left: 0 }, api.options.slide_interval) } }; a.supersized.themeVars = { progress_delay: false, thumb_page: false, thumb_interval: false, play_button: "#pauseplay", next_slide: "#nextslide", prev_slide: "#prevslide", next_thumb: "#nextthumb", prev_thumb: "#prevthumb", slide_caption: "#slidecaption", slide_current: ".slidenumber", slide_total: ".totalslides", slide_list: "#slide-list", thumb_tray: "#thumb-tray", thumb_list: "#thumb-list", thumb_forward: "#thumb-forward", thumb_back: "#thumb-back", tray_arrow: "#tray-arrow", tray_button: "#tray-button", progress_bar: "#progress-bar" }; a.supersized.themeOptions = { progress_bar: 1, image_path: "img/", mouse_scrub: 0, html_template: '<div class="ssControlsContainer">     <!--Thumbnail Navigation-->     <div id="prevthumb"></div>     <div id="nextthumb"></div>     <!--Arrow Navigation-->     <a id="prevslide" class="load-item"></a>     <a id="nextslide" class="load-item"></a>     <div id="thumb-tray" class="load-item">       <div id="thumb-back"></div>       <div id="thumb-forward"></div>     </div>     <!--Time Bar-->     <div id="progress-back" class="load-item">       <div id="progress-bar"></div>     </div>     <!--Control Bar-->     <div id="controls-wrapper" class="load-item">       <div id="controls">         <a id="play-button">           <img id="pauseplay" src="img/pause.png" /></a>         <a id="stop-button">           <img src="img/stop.png" /></a>         <!--Slide counter-->         <div id="slidecounter">           <span class="slidenumber"></span>/ <span class="totalslides"></span>         </div>         <!--Slide captions displayed here-->         <div id="slidecaption"></div>         <!--Thumb Tray button-->         <a id="tray-button">           <img id="tray-arrow" src="img/button-tray-up.png" /></a>         <!--Navigation-->         <ul id="slide-list"></ul>       </div>     </div> </div>' } })(jQuery); (function (b, c) { var a = 0; b.widget("ech.multiselect", { options: { header: true, height: 175, minWidth: 225, classes: "", checkAllText: "Check all", uncheckAllText: "Uncheck all", noneSelectedText: "Select options", selectedText: "# selected", selectedList: 0, show: null, hide: null, autoOpen: false, multiple: true, position: {} }, _create: function () { var g = this.element.hide(), j = this.options; this.speed = b.fx.speeds._default; this._isOpen = false; var f = (this.button = b('<button type="button"><span class="ui-icon ui-icon-triangle-2-n-s"></span></button>')).addClass("ui-multiselect ui-widget ui-state-default ui-corner-all").addClass(j.classes).attr({ title: g.attr("title"), "aria-haspopup": true, tabIndex: g.attr("tabIndex") }).insertAfter(g), d = (this.buttonlabel = b("<span />")).html(j.noneSelectedText).appendTo(f), h = (this.menu = b("<div />")).addClass("ui-multiselect-menu ui-widget ui-widget-content ui-corner-all").addClass(j.classes).appendTo(document.body), m = (this.header = b("<div />")).addClass("ui-widget-header ui-corner-all ui-multiselect-header ui-helper-clearfix").appendTo(h), e = (this.headerLinkContainer = b("<ul />")).addClass("ui-helper-reset").html(function () { if (j.header === true) { return '<li><a class="ui-multiselect-all" href="#"><span class="ui-icon ui-icon-check"></span><span>' + j.checkAllText + '</span></a></li><li><a class="ui-multiselect-none" href="#"><span class="ui-icon ui-icon-closethick"></span><span>' + j.uncheckAllText + "</span></a></li>" } else { if (typeof j.header === "string") { return "<li>" + j.header + "</li>" } else { return "" } } }).append('<li class="ui-multiselect-close"><a href="#" class="ui-multiselect-close"><span class="ui-icon ui-icon-circle-close"></span></a></li>').appendTo(m), l = (this.checkboxContainer = b("<ul />")).addClass("ui-multiselect-checkboxes ui-helper-reset").appendTo(h); this._bindEvents(); this.refresh(true); if (!j.multiple) { h.addClass("ui-multiselect-single") } }, _init: function () { if (this.options.header === false) { this.header.hide() } if (!this.options.multiple) { this.headerLinkContainer.find(".ui-multiselect-all, .ui-multiselect-none").hide() } if (this.options.autoOpen) { this.open() } if (this.element.is(":disabled")) { this.disable() } }, refresh: function (j) { var f = this.element, h = this.options, g = this.menu, m = this.checkboxContainer, d = [], e = "", l = f.attr("id") || a++; f.find("option").each(function (p) { var q = b(this), v = this.parentNode, t = this.innerHTML, x = this.title, u = this.value, o = "ui-multiselect-" + (this.id || l + "-option-" + p), y = this.disabled, n = this.selected, s = ["ui-corner-all"], r = (y ? "ui-multiselect-disabled " : " ") + this.className, w; if (v.tagName === "OPTGROUP") { w = v.getAttribute("label"); if (b.inArray(w, d) === -1) { e += '<li class="ui-multiselect-optgroup-label ' + v.className + '"><a href="#">' + w + "</a></li>"; d.push(w) } } if (y) { s.push("ui-state-disabled") } if (n && !h.multiple) { s.push("ui-state-active") } e += '<li class="' + r + '">'; e += '<label for="' + o + '" title="' + x + '" class="' + s.join(" ") + '">'; e += '<input id="' + o + '" name="multiselect_' + l + '" type="' + (h.multiple ? "checkbox" : "radio") + '" value="' + u + '" title="' + t + '"'; if (n) { e += ' checked="checked"'; e += ' aria-selected="true"' } if (y) { e += ' disabled="disabled"'; e += ' aria-disabled="true"' } e += " /><span>" + t + "</span></label></li>" }); m.html(e); this.labels = g.find("label"); this.inputs = this.labels.children("input"); this._setButtonWidth(); this._setMenuWidth(); this.button[0].defaultValue = this.update(); if (!j) { this._trigger("refresh") } }, update: function () { var h = this.options, e = this.inputs, d = e.filter(":checked"), f = d.length, g; if (f === 0) { g = h.noneSelectedText } else { if (b.isFunction(h.selectedText)) { g = h.selectedText.call(this, f, e.length, d.get()) } else { if (/\d/.test(h.selectedList) && h.selectedList > 0 && f <= h.selectedList) { g = d.map(function () { return b(this).next().html() }).get().join(", ") } else { g = h.selectedText.replace("#", f).replace("#", e.length) } } } this.buttonlabel.html(g); return g }, _bindEvents: function () { var d = this, e = this.button; function f() { d[d._isOpen ? "close" : "open"](); return false } e.find("span").bind("click.multiselect", f); e.bind({ click: f, keypress: function (g) { switch (g.which) { case 27: case 38: case 37: d.close(); break; case 39: case 40: d.open(); break } }, mouseenter: function () { if (!e.hasClass("ui-state-disabled")) { b(this).addClass("ui-state-hover") } }, mouseleave: function () { b(this).removeClass("ui-state-hover") }, focus: function () { if (!e.hasClass("ui-state-disabled")) { b(this).addClass("ui-state-focus") } }, blur: function () { b(this).removeClass("ui-state-focus") } }); this.header.delegate("a", "click.multiselect", function (g) { if (b(this).hasClass("ui-multiselect-close")) { d.close() } else { d[b(this).hasClass("ui-multiselect-all") ? "checkAll" : "uncheckAll"]() } g.preventDefault() }); this.menu.delegate("li.ui-multiselect-optgroup-label a", "click.multiselect", function (m) { m.preventDefault(); var l = b(this), j = l.parent().nextUntil("li.ui-multiselect-optgroup-label").find("input:visible:not(:disabled)"), g = j.get(), h = l.parent().text(); if (d._trigger("beforeoptgrouptoggle", m, { inputs: g, label: h }) === false) { return } d._toggleChecked(j.filter(":checked").length !== j.length, j); d._trigger("optgrouptoggle", m, { inputs: g, label: h, checked: g[0].checked }) }).delegate("label", "mouseenter.multiselect", function () { if (!b(this).hasClass("ui-state-disabled")) { d.labels.removeClass("ui-state-hover"); b(this).addClass("ui-state-hover").find("input").focus() } }).delegate("label", "keydown.multiselect", function (g) { g.preventDefault(); switch (g.which) { case 9: case 27: d.close(); break; case 38: case 40: case 37: case 39: d._traverse(g.which, this); break; case 13: b(this).find("input")[0].click(); break } }).delegate('input[type="checkbox"], input[type="radio"]', "click.multiselect", function (l) { var j = b(this), m = this.value, h = this.checked, g = d.element.find("option"); if (this.disabled || d._trigger("click", l, { value: m, text: this.title, checked: h }) === false) { l.preventDefault(); return } j.focus(); j.attr("aria-selected", h); g.each(function () { if (this.value === m) { this.selected = h } else { if (!d.options.multiple) { this.selected = false } } }); if (!d.options.multiple) { d.labels.removeClass("ui-state-active"); j.closest("label").toggleClass("ui-state-active", h); d.close() } d.element.trigger("change"); setTimeout(b.proxy(d.update, d), 10) }); b(document).bind("mousedown.multiselect", function (g) { if (d._isOpen && !b.contains(d.menu[0], g.target) && !b.contains(d.button[0], g.target) && g.target !== d.button[0]) { d.close() } }); b(this.element[0].form).bind("reset.multiselect", function () { setTimeout(b.proxy(d.refresh, d), 10) }) }, _setButtonWidth: function () { var d = this.element.outerWidth(), e = this.options; if (/\d/.test(e.minWidth) && d < e.minWidth) { d = e.minWidth } this.button.width(d) }, _setMenuWidth: function () { var d = this.menu, e = this.button.outerWidth() - parseInt(d.css("padding-left"), 10) - parseInt(d.css("padding-right"), 10) - parseInt(d.css("border-right-width"), 10) - parseInt(d.css("border-left-width"), 10); d.width(e || this.button.outerWidth()) }, _traverse: function (h, j) { var f = b(j), e = h === 38 || h === 37, d = f.parent()[e ? "prevAll" : "nextAll"]("li:not(.ui-multiselect-disabled, .ui-multiselect-optgroup-label)")[e ? "last" : "first"](); if (!d.length) { var g = this.menu.find("ul").last(); this.menu.find("label")[e ? "last" : "first"]().trigger("mouseover"); g.scrollTop(e ? g.height() : 0) } else { d.find("label").trigger("mouseover") } }, _toggleState: function (e, d) { return function () { if (!this.disabled) { this[e] = d } if (d) { this.setAttribute("aria-selected", true) } else { this.removeAttribute("aria-selected") } } }, _toggleChecked: function (d, h) { var g = (h && h.length) ? h : this.inputs, f = this; g.each(this._toggleState("checked", d)); g.eq(0).focus(); this.update(); var e = g.map(function () { return this.value }).get(); this.element.find("option").each(function () { if (!this.disabled && b.inArray(this.value, e) > -1) { f._toggleState("selected", d).call(this) } }); if (g.length) { this.element.trigger("change") } }, _toggleDisabled: function (e) { this.button.attr({ disabled: e, "aria-disabled": e })[e ? "addClass" : "removeClass"]("ui-state-disabled"); var d = this.menu.find("input"); var f = "ech-multiselect-disabled"; if (e) { d = d.filter(":enabled").data(f, true) } else { d = d.filter(function () { return b.data(this, f) === true }).removeData(f) } d.attr({ disabled: e, "arial-disabled": e }).parent()[e ? "addClass" : "removeClass"]("ui-state-disabled"); this.element.attr({ disabled: e, "aria-disabled": e }) }, open: function (j) { var p = this, h = this.button, d = this.menu, g = this.speed, f = this.options, l = []; if (this._trigger("beforeopen") === false || h.hasClass("ui-state-disabled") || this._isOpen) { return } var n = d.find("ul").last(), q = f.show, m = h.offset(); if (b.isArray(f.show)) { q = f.show[0]; g = f.show[1] || p.speed } if (q) { l = [q, g] } n.scrollTop(0).height(f.height); if (b.ui.position && !b.isEmptyObject(f.position)) { f.position.of = f.position.of || h; d.show().position(f.position).hide() } else { d.css({ top: m.top + h.outerHeight(), left: m.left }) } b.fn.show.apply(d, l); this.labels.eq(0).trigger("mouseover").trigger("mouseenter").find("input").trigger("focus"); h.addClass("ui-state-active"); this._isOpen = true; this._trigger("open") }, close: function () { if (this._trigger("beforeclose") === false) { return } var g = this.options, e = g.hide, f = this.speed, d = []; if (b.isArray(g.hide)) { e = g.hide[0]; f = g.hide[1] || this.speed } if (e) { d = [e, f] } b.fn.hide.apply(this.menu, d); this.button.removeClass("ui-state-active").trigger("blur").trigger("mouseleave"); this._isOpen = false; this._trigger("close") }, enable: function () { this._toggleDisabled(false) }, disable: function () { this._toggleDisabled(true) }, checkAll: function (d) { this._toggleChecked(true); this._trigger("checkAll") }, uncheckAll: function () { this._toggleChecked(false); this._trigger("uncheckAll") }, getChecked: function () { return this.menu.find("input").filter(":checked") }, destroy: function () { b.Widget.prototype.destroy.call(this); this.button.remove(); this.menu.remove(); this.element.show(); return this }, isOpen: function () { return this._isOpen }, widget: function () { return this.menu }, getButton: function () { return this.button }, _setOption: function (d, e) { var f = this.menu; switch (d) { case "header": f.find("div.ui-multiselect-header")[e ? "show" : "hide"](); break; case "checkAllText": f.find("a.ui-multiselect-all span").eq(-1).text(e); break; case "uncheckAllText": f.find("a.ui-multiselect-none span").eq(-1).text(e); break; case "height": f.find("ul").last().height(parseInt(e, 10)); break; case "minWidth": this.options[d] = parseInt(e, 10); this._setButtonWidth(); this._setMenuWidth(); break; case "selectedText": case "selectedList": case "noneSelectedText": this.options[d] = e; this.update(); break; case "classes": f.add(this.button).removeClass(this.options.classes).addClass(e); break; case "multiple": f.toggleClass("ui-multiselect-single", !e); this.options.multiple = e; this.element[0].multiple = e; this.refresh() } b.Widget.prototype._setOption.apply(this, arguments) } }) })(jQuery);
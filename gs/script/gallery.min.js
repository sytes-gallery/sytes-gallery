(function (c, b, a, d) { b.Gsp = {}; b.Gsp.Constants = {}; b.Gsp.Constants.ViewSize_Thumbnail = 1; b.Gsp.Constants.ViewSize_Optimized = 2; b.Gsp.Constants.ViewSize_Original = 3; b.Gsp.Constants.ViewSize_External = 4; b.Gsp.Constants.MimeType_Other = 1; b.Gsp.Constants.MimeType_Image = 2; b.Gsp.Constants.MimeType_Video = 3; b.Gsp.Constants.MimeType_Audio = 4; b.Gsp.Constants.ItemType_Album = 3; b.Gsp.Constants.ItemType_Image = 4; b.Gsp.Constants.ItemType_Audio = 5; b.Gsp.Constants.ItemType_Video = 6; b.Gsp.Constants.ItemType_Generic = 7; b.Gsp.Constants.ItemType_External = 8; b.Gsp.Constants.VirtualType_NotVirtual = 1; b.Gsp.Constants.IntMinValue = -2147483648; b.Gsp.AppRoot = ""; b.Gsp.GalleryResourcesRoot = ""; b.Gsp.msAjaxComponentId = ""; b.Gsp.href = ""; b.Gsp.escape = function (e) { return e.replace(/\'/g, "&#39;").replace(/\"/g, "&quot;") }; b.Gsp.htmlEncode = function (e) { return c("<div/>").text(e).html() }; b.Gsp.htmlDecode = function (e) { return c("<div/>").html(e).text() }; Array.prototype.gspRemove = function (g, f) { var e = this.slice((f || g) + 1 || this.length); this.length = g < 0 ? this.length + g : g; return this.push.apply(this, e) }; String.prototype.format = function () { var e = arguments; return this.replace(/{(\d+)}/g, function (f, g) { return typeof e[g] != "undefined" ? e[g] : f }) }; if (!String.prototype.trim) { String.prototype.trim = function () { return this.replace(/^\s+|\s+$/g, "") } } b.Gsp.hasFormValidation = function () { return (typeof a.createElement("input").checkValidity == "function") }; b.Gsp.isTouchScreen = function () { return !!("ontouchstart" in b) || !!navigator.msMaxTouchPoints }; b.Gsp.isNullOrEmpty = function (e) { if ((!e && e !== false) || !(e.length > 0)) { return true } return false }; b.Gsp.deepCopy = function (f) { var g = f, e; if (f && typeof f === "object") { g = Object.prototype.toString.call(f) === "[object Array]" ? [] : {}; for (e in f) { g[e] = b.Gsp.deepCopy(f[e]) } } return g }; b.Gsp.convertAlbumToGalleryItem = function (e) { return { Id: e.Id, IsAlbum: true, MimeType: 0, ItemType: 3, NumAlbums: e.NumAlbums, NumMediaItems: e.NumMediaItems, Caption: e.Caption, Title: e.Title } }; b.Gsp.convertMediaItemToGalleryItem = function (e) { return { Id: e.Id, IsAlbum: false, MimeType: e.MimeType, ItemType: e.ItemType, NumAlbums: 0, NumMediaItems: 0, Caption: "", Title: e.Title } }; b.Gsp.getItemTypeDesc = function (e) { switch (e) { case b.Gsp.Constants.ItemType_Album: return "Album"; case b.Gsp.Constants.ItemType_Image: return "Image"; case b.Gsp.Constants.ItemType_Audio: return "Audio"; case b.Gsp.Constants.ItemType_Video: return "Video"; case b.Gsp.Constants.ItemType_Generic: return "Generic"; case b.Gsp.Constants.ItemType_External: return "External"; default: return "Unknown" } }; b.Gsp.findGalleryItem = function (f, g, e) { if (f.Album != null && f.Album.GalleryItems != null) { return c.grep(f.Album.GalleryItems, function (h) { return h.Id === g && h.ItemType === e })[0] } else { return null } }; b.Gsp.findMediaItem = function (f, g, e) { if (f.Album != null && f.Album.MediaItems != null) { return c.grep(f.Album.MediaItems, function (h) { return h.Id === g && h.ItemType === e })[0] } else { return null } }; b.Gsp.findMetaItem = function (f, e) { return c.grep(f, function (g) { return g.MTypeId === e })[0] || null }; b.Gsp.findAlbum = function (f, g, e) { if (f.Album != null) { if (f.Album.Id === g && e === b.Gsp.Constants.ItemType_Album) { return f.Album } else { if (f.Album.GalleryItems != null) { return c.grep(f.Album.GalleryItems, function (h) { return h.Id === g && h.ItemType === e })[0] } else { return null } } } else { return null } }; b.Gsp.getView = function (e, h) { var g = null; for (var f = 0; f < e.Views.length; f++) { if (e.Views[f].ViewSize == h) { return e.Views[f] } else { if (e.Views[f].ViewSize == Gsp.Constants.ViewSize_Original) { g = e.Views[f] } } } return g }; b.Gsp.Init = function () { c(".gsp_ns input:submit, .gsp_ns button").button(); c.views.converters({ getItemTypeDesc: function (e) { return b.Gsp.getItemTypeDesc(e) }, stripHtml: function (e) { return Gsp.escape(e.replace(/(<[^<>]*>)/g, "")) } }); c.views.helpers({ format: function (f, g, e) { return Globalize.format(f, g, e) }, parseDate: function (g, e, f) { return Globalize.parseDate(g, e, f) }, parseInt: function (g, f, e) { return Globalize.parseInt(g, f, e) }, parseFloat: function (g, f, e) { return Globalize.parseFloat(g, f, e) }, findMetaItem: function (f, e) { return b.Gsp.findMetaItem(f, e) || { Id: 0, GTypeId: 0, IsEditable: false, MediaId: 0, MTypeId: e, Value: "" } }, getAlbumUrl: function (f, e) { return Gsp.GetAlbumUrl(f, e) }, getGalleryItemUrl: function (g, f) { var e = { aid: g.IsAlbum ? g.Id : null, moid: g.IsAlbum ? null : g.Id }; if (!f) { e.title = null; e.tag = null; e.people = null; e.search = null } return Gsp.GetUrl(b.Gsp.href, e) }, getMediaUrl: function (g, f) { var e = { aid: null, moid: g }; if (!f) { e.title = null; e.tag = null; e.people = null; e.search = null } return Gsp.GetUrl(a.location.href, e) }, getDownloadUrl: function (e) { return Gsp.GetUrl(b.location.href, { g: "task_downloadobjects", moid: null, aid: e }) }, getAddUrl: function (e) { return Gsp.GetUrl(b.location.href, { g: "task_addobjects", aid: e.Album.Id }) } }); b.Gsp.href = b.location.href.replace(/#\d+/, "") }; c(a).ready(Gsp.Init); b.Gsp.ReloadPage = function () { b.location = Gsp.RemoveQSParm(b.location.href, "msg") }; b.Gsp.GetAlbumUrl = function (g, f) { var e = { aid: null, moid: null }; if (!f) { e.title = null; e.tag = null; e.people = null; e.search = null } if (g > Gsp.Constants.IntMinValue) { e.aid = g } return Gsp.GetUrl(a.location.href, e) }; b.Gsp.GetUrl = function (f, e) { if (typeof e.ss === "undefined") { e.ss = null } if (typeof e.msg === "undefined") { e.msg = null } c.each(e, function (h, g) { f = Gsp.AddQSParm(Gsp.RemoveQSParm(f, h), h, g) }); return f }; b.Gsp.IsQSParmPresent = function (f) { var e = Gsp.GetQS[f]; return ((e != null) && (e.length > 0)) }; b.Gsp.GetQS = function () { var f = {}, h = location.search.substring(1), g = /([^&=]+)=([^&]*)/g, e; while (e = g.exec(h)) { f[decodeURIComponent(e[1])] = decodeURIComponent(e[2]) } return f }; b.Gsp.GetQSParm = function (e) { return b.Gsp.GetQS()[e] }; b.Gsp.AddQSParm = function (g, l, k) { if (!l || !k) { return g } l = encodeURIComponent(l); k = encodeURIComponent(k); var j = g.split("?"); if (j.length < 2) { return g + "?" + l + "=" + k } var f = j[1].split(/[&;]/g); for (var h = f.length - 1; h >= 0; h--) { var e = f[h].split("="); if (e[0] == l) { e[1] = k; f[h] = e.join("="); break } } if (h < 0) { f[f.length] = [l, k].join("=") } return j[0] + "?" + f.join("&") }; b.Gsp.RemoveQSParm = function (e, k) { var h = e.split("?"); if (h.length < 2) { return e } var j = encodeURIComponent(k) + "="; var g = h[1].split(/[&;]/g); for (var f = g.length - 1; f >= 0; f--) { if (g[f].lastIndexOf(j, 0) !== -1) { g.splice(f, 1) } } if (g.length > 0) { return h[0] + "?" + g.join("&") } else { return h[0] } }; b.Gsp.DisposeAjaxComponent = function (f) { if (typeof Sys === "undefined" || typeof Sys.Application === "undefined") { return } if (f && f.length > 0) { var e = Sys.Application.findComponent(f); if (e) { e.dispose() } } }; b.Gsp.DataService = new function () { logOff = function (e) { c.post(b.Gsp.AppRoot + "/api/task/logoff", function (f) { e(f) }) }; deleteMediaObject = function (g, h, e, f) { c.ajax(({ type: "DELETE", url: b.Gsp.AppRoot + "/api/mediaitems/" + g, complete: h, success: e, error: f })) }; saveAlbum = function (g, i, e, h) { var f = Gsp.deepCopy(g); f.MediaItems = null; f.GalleryItems = null; f.MetaItems = null; f.Permissions = null; c.ajax(({ type: "POST", url: url = b.Gsp.AppRoot + "/api/albums/post", data: JSON.stringify(f), contentType: "application/json; charset=utf-8", dataType: "json", complete: i, success: e, error: h })) }; saveMeta = function (g, h, e, f) { c.ajax(({ type: "PUT", url: b.Gsp.AppRoot + "/api/galleryitemmeta", data: JSON.stringify(g), contentType: "application/json; charset=utf-8", dataType: "json", complete: h, success: e, error: f })) }; return { logOff: logOff, deleteMediaObject: deleteMediaObject, saveAlbum: saveAlbum, saveMeta: saveMeta } }(); c.fn.gspTreeView = function (h, e) { var f = c.extend({}, c.fn.gspTreeView.defaults, e); var g = new GspTreeView(this, h, f); g.render(); return this }; c.fn.gspTreeView.defaults = { allowMultiSelect: false, albumIdsToSelect: "", checkedAlbumIdsHiddenFieldClientId: "", theme: "gsp", requiredSecurityPermissions: 1, navigateUrl: "" }; b.GspTreeView = function (g, f, e) { this.$target = g; this.TreeViewOptions = e; this.Data = f }; GspTreeView.prototype.render = function () { var e = this; this.$target.jstree({ themes: { theme: this.TreeViewOptions.theme, dots: false, icons: false }, json_data: { data: this.Data, ajax: { url: b.Gsp.GalleryResourcesRoot + "/handler/gettreeview.ashx", data: function (f) { a.body.style.cursor = "wait"; return { id: f.data("id"), secaction: e.TreeViewOptions.requiredSecurityPermissions, sc: f.children().is("input:checkbox"), navurl: e.TreeViewOptions.navigateUrl } }, success: function (g, f) { a.body.style.cursor = "default" }, error: function (f, h, g) { a.body.style.cursor = "default"; if (h == "error") { alert("Oops! An error occurred while retrieving the treeview data. It has been logged in the gallery's event log.") } } } }, ui: { selected_parent_close: false }, checkbox: { real_checkboxes: true, override_ui: false, two_state: true }, plugins: ["themes", "ui", "json_data", "checkbox"] }).bind("select_node.jstree", function (g, f) { e.onNodeSelect(g, f) }).bind("open_node.jstree", function (g, f) { e.onNodeOpen(g, f) }).bind("deselect_node.jstree", function (g, f) { }).bind("check_node.jstree", function (g, f) { e.onNodeCheckOrUncheck(g, f) }).bind("uncheck_node.jstree", function (g, f) { e.onNodeCheckOrUncheck(g, f) }).bind("get_json.jstree", function (g, f) { }).bind("change_state.jstree", function (g, f) { e.onChangeState(g, f) }).bind("loaded.jstree", function (g, f) { e.onLoaded(g, f) }) }; GspTreeView.prototype.onChangeState = function (g, f) { var i = c(f.inst.get_checked()).not(function (e) { var j = c(this).parents(".jstree-checked"); return (j.length > 0) }); var h = i.map(function () { return c(this).data("id") }).get().join(); c("#" + this.TreeViewOptions.checkedAlbumIdsHiddenFieldClientId).val(h) }; GspTreeView.prototype.onLoaded = function (h, g) { var f = this; c.each(this.TreeViewOptions.albumIdsToSelect, function (e, j) { var i = c("li[data-id=" + j + "]", f.$target); if (i.length > 0) { f.$target.jstree("select_node", "#" + i[0].id) } }); if (this.$target.jstree("get_checked").length > 1) { this.$target.jstree("deselect_all") } }; GspTreeView.prototype.onNodeOpen = function (h, g) { var f = g.inst; var i = g.args[0]; if (this.TreeViewOptions.allowMultiSelect && f.is_checked(i)) { this.checkAll(f, i) } }; GspTreeView.prototype.onNodeSelect = function (h, g) { var f = g.inst; var i = c(g.args[0]); if (this.TreeViewOptions.allowMultiSelect) { if (f.is_checked(i)) { this.uncheckAll(f, i, true) } else { this.checkAll(f, i) } } else { if (!f.is_checked(i)) { g.inst.uncheck_all(); f.check_node(i) } } }; GspTreeView.prototype.onNodeCheckOrUncheck = function (h, g) { var f = g.inst; var i = c(g.args[0]); if (f.isCheckNodeEventInProgress) { return } f.isCheckNodeEventInProgress = true; if (f.is_checked(i)) { f.uncheck_node(i) } else { f.check_node(i) } this.onNodeSelect(h, g); f.isCheckNodeEventInProgress = null }; GspTreeView.prototype.checkAll = function (f, g) { f.check_node(g); var e = this; if (f.is_open(g)) { c.each(f._get_children(g), function (j, h) { e.checkAll(f, h) }) } }; GspTreeView.prototype.uncheckAll = function (f, h, g) { if (h == null || h == -1) { return } f.uncheck_node(h); if (g) { this.uncheckAll(f, f._get_parent(h), g) } else { var e = this; c.each(f._get_children(h), function (k, j) { e.uncheckAll(f, j, g) }) } }; c.fn.gspMedia = function (g, f) { var e = new GspMedia(g, this, f); e.initialize(); return this }; b.GspMedia = function (g, f, e) { this.TemplateName = g; this.$target = f; this.IdPrefix = e.Settings.ClientId; this.Data = e; this.Toolbar = null; this.Timer = null; this.inCallback = false }; GspMedia.prototype.initialize = function () { if (!this.Data.MediaItem) { c.gspShowMsg("Cannot Render Media Object", "<p>Cannot render the media object template. Navigate to a media object and then return to this page.</p><p>You'll know you got it right when you see 'moid' In the URL's query string.</p><p>ERROR: this.Data.MediaItem is null.</p>", { msgType: "error", autoCloseDelay: 0 }); return } this.jsRenderSetup(); this.overwriteMediaObject(); this.attachEvents(); this.configureMediaItem(); this.render(); this.preloadImages() }; GspMedia.prototype.jsRenderSetup = function () { var e = this; c.views.helpers({ prevUrl: function () { var f = e.getPreviousMediaObject(); return f ? e.getPermalink(f.Id) : Gsp.GetAlbumUrl(e.Data.Album.Id) }, nextUrl: function () { var f = e.getNextMediaObject(); return f ? e.getPermalink(f.Id) : Gsp.GetAlbumUrl(e.Data.Album.Id) }, getEmbedCode: function () { var f = Gsp.GetUrl(e.Data.App.AppUrl + "/" + e.Data.App.GalleryResourcesPath + "/embed.aspx" + location.search, { aid: null, moid: e.Data.MediaItem.Id }); return "<iframe allowtransparency='true' frameborder='0' sandbox='allow-same-origin allow-forms allow-scripts' scrolling='auto' src='" + f + "' style='width:100%;height:100%'></iframe>" } }) }; GspMedia.prototype.configureMediaItem = function () { this.setSize(Gsp.Constants.ViewSize_Optimized) }; GspMedia.prototype.render = function () { this.dataBind(); this.bindToolbar(); this.runMediaObjectScript(); if (this.Data.Settings.SlideShowIsRunning) { this.startSlideshow() } if (history.replaceState) { history.replaceState(null, "", this.getPermalink(this.Data.MediaItem.Id)) } }; GspMedia.prototype.setSize = function (g) { var f = 0; for (var e = 0; e < this.Data.MediaItem.Views.length; e++) { if (this.Data.MediaItem.Views[e].ViewSize == g) { this.Data.MediaItem.ViewIndex = e; return } else { if (this.Data.MediaItem.Views[e].ViewSize == Gsp.Constants.ViewSize_Original || this.Data.MediaItem.Views[e].ViewSize == Gsp.Constants.ViewSize_External) { f = e } } } this.Data.MediaItem.ViewIndex = f }; GspMedia.prototype.startSlideshow = function () { var e = this; if (this.Data.Settings.SlideShowType == "FullScreen") { this.removeCursorNavigationHandler(); var f = new b.GspFullScreenSlideShow(this.Data, { on_exit: function () { e.Data.Settings.SlideShowIsRunning = false; e.addCursorNavigationHandler(e) } }); this.Data.Settings.SlideShowIsRunning = f.startSlideShow() } else { if (this.Data.Settings.SlideShowType == "Inline") { if (this.Timer && this.Timer.isRunning) { return true } this.Data.Settings.SlideShowIsRunning = true; if (this.getNextMediaObject() != null) { this.Timer = new GspTimer(this.showNextMediaObject, this.Data.Settings.SlideShowIntervalMs, this); this.Timer.start() } else { this.Data.Settings.SlideShowIsRunning = false; c.gspShowMsg(this.Data.Resource.MoNoSsHdr, this.Data.Resource.MoNoSsBdy, { msgType: "info" }) } } } return this.Data.Settings.SlideShowIsRunning }; GspMedia.prototype.stopSlideshow = function () { if (this.Timer) { this.Timer.stop() } this.Data.Settings.SlideShowIsRunning = false }; GspMedia.prototype.dataBind = function () { Gsp.DisposeAjaxComponent(b.Gsp.msAjaxComponentId); this.$target.html(c.render[this.TemplateName](this.Data)); this.animateMediaObject(); this.attachMediaEvents(); this.makeCaptionEditable() }; GspMedia.prototype.makeCaptionEditable = function () { if (!this.Data.Album.Permissions.EditMediaObject) { return } var e = this; c(".gsp_mediaObjectTitle", this.$target).addClass("gsp_editableContent").hover(function () { c(this).removeClass("gsp_editableContent").addClass("gsp_editableContentHover") }, function () { c(this).removeClass("gsp_editableContentHover").addClass("gsp_editableContent") }).editable(b.Gsp.AppRoot + "/api/mediaitems", { type: "textarea", rows: 4, tooltip: this.Data.Resource.MediaCaptionEditTt, event: "click", submit: this.Data.Resource.MediaCaptionEditSave, cancel: this.Data.Resource.MediaCaptionEditCancel, cssclass: "gsp_editableContentForm", indicator: '<img class="gsp_wait" src="' + this.Data.App.SkinPath + '/images/wait-squares.gif" />', style: "inherit", onblur: "", oneditbegin: function (g, f, h) { return e.onEditBegin(c(f), h) }, onreset: function (f, g) { e.setCaptionHover(c(g), true) }, onsubmit: function (g, f) { e.Data.MediaItem.Title = c("textarea, input, select", c(f)).val(); g.ajaxoptions.data = JSON.stringify(e.Data.MediaItem) }, oncomplete: function (h) { var f = e.Data.MediaItem; var g = c.parseJSON(h); f.Title = g.ActionTarget.Title; e.$target.trigger("mediaUpdate." + e.Data.Settings.ClientId, [e.Data.ActiveGalleryItems]); return f.Title }, callback: function (g, f) { e.Data.MediaItem.Title = g; e.setCaptionHover(c(this), true) }, ajaxoptions: { type: "PUT", contentType: "application/json;charset=utf-8" } }) }; GspMedia.prototype.onEditBegin = function (f, g) { this.setCaptionHover(f, false); return (g.target.tagName != "A") }; GspMedia.prototype.setCaptionHover = function (f, e) { if (e) { f.hover(function () { f.removeClass("gsp_editableContent").addClass("gsp_editableContentHover") }, function () { f.removeClass("gsp_editableContentHover").addClass("gsp_editableContent") }) } else { f.removeClass("gsp_editableContentHover").addClass("gsp_editableContent").unbind("mouseenter").unbind("mouseleave") } }; GspMedia.prototype.animateMediaObject = function () { var f = this; var h = function (j) { var k = f.Data.MediaItem.ItemType == Gsp.Constants.ItemType_Image; var i = f.Data.Settings.TransitionType != "none"; if (k && i) { j.hide(); return true } else { return false } }; var e = c(".gsp_moContainer", this.$target); if (h(e)) { switch (this.Data.Settings.TransitionType) { case "none": e.show(); case "fade": e.fadeIn(this.Data.Settings.TransitionDurationMs); break; default: var g = {}; if (this.Data.Settings.TransitionType === "scale") { g = { percent: 100 } } e.toggle(this.Data.Settings.TransitionType, g, this.Data.Settings.TransitionDurationMs); break } } }; GspMedia.prototype.showPreviousMediaObject = function (f) { this.Data.MediaItem = this.getPreviousMediaObject(); if (this.Data.MediaItem) { if (f) { f.preventDefault() } this.Data.ActiveGalleryItems = [b.Gsp.convertMediaItemToGalleryItem(this.Data.MediaItem)]; c("#" + this.IdPrefix + "_moid").val(this.Data.MediaItem.Id); this.setSize(Gsp.Constants.ViewSize_Optimized); this.render(); this.$target.trigger("previous." + this.Data.Settings.ClientId, [this.Data.ActiveGalleryItems]) } else { this.redirectToAlbum() } }; GspMedia.prototype.showNextMediaObject = function (f) { this.Data.MediaItem = this.getNextMediaObject(); if (this.Data.MediaItem) { if (f) { f.preventDefault() } this.Data.ActiveGalleryItems = [b.Gsp.convertMediaItemToGalleryItem(this.Data.MediaItem)]; c("#" + this.IdPrefix + "_moid").val(this.Data.MediaItem.Id); this.setSize(Gsp.Constants.ViewSize_Optimized); this.render(); this.$target.trigger("next." + this.Data.Settings.ClientId, [this.Data.ActiveGalleryItems]) } else { this.redirectToAlbum() } }; GspMedia.prototype.getPreviousMediaObject = function () { return this.Data.Album.MediaItems[c.inArray(this.Data.MediaItem, this.Data.Album.MediaItems) - 1] }; GspMedia.prototype.getNextMediaObject = function () { if (this.Data.Settings.SlideShowIsRunning) { var e = this.Data.MediaItem; do { e = this.Data.Album.MediaItems[c.inArray(e, this.Data.Album.MediaItems) + 1] } while (e && e.MimeType != Gsp.Constants.MimeType_Image); return e } else { return this.Data.Album.MediaItems[c.inArray(this.Data.MediaItem, this.Data.Album.MediaItems) + 1] } }; GspMedia.prototype.redirectToAlbum = function () { b.location = Gsp.GetAlbumUrl(this.Data.Album.Id) }; GspMedia.prototype.runMediaObjectScript = function () { if (this.Data.MediaItem.Views[this.Data.MediaItem.ViewIndex].ScriptOutput.length > 0) { (new Function((this.Data.MediaItem.Views[this.Data.MediaItem.ViewIndex].ScriptOutput)))() } }; GspMedia.prototype.getPermalink = function (e) { return Gsp.GetUrl(a.location.href, { moid: e }) }; GspMedia.prototype.bindToolbar = function () { this.Toolbar = this.buildMediaToolbar(this) }; GspMedia.prototype.overwriteMediaObject = function () { for (var e = 0; e < this.Data.Album.MediaItems.length; e++) { if (this.Data.Album.MediaItems[e].Id == this.Data.MediaItem.Id) { this.Data.MediaItem = this.Data.Album.MediaItems[e]; return } } }; GspMedia.prototype.attachEvents = function () { var e = this; c("#" + this.Data.Settings.MediaClientId).on("metaUpdate." + this.Data.Settings.ClientId, function (g, f) { e.onMetaUpdate(g, f) }); this.addCursorNavigationHandler(e) }; GspMedia.prototype.attachMediaEvents = function () { var e = this; c(".gsp_mvPrevBtn", this.$target).on("click", function (f) { e.showPreviousMediaObject(f) }); c(".gsp_mvNextBtn", this.$target).on("click", function (f) { e.showNextMediaObject(f) }) }; GspMedia.prototype.addCursorNavigationHandler = function (e) { if (this.Data.Settings.ShowMediaObjectNavigation) { c(a.documentElement).on("keydown." + this.Data.Settings.ClientId, function (f) { if ((f.target.tagName == "INPUT") || (f.target.tagName == "TEXTAREA")) { return } if (f.keyCode == 37) { e.showPreviousMediaObject(f) } if (f.keyCode == 39) { e.showNextMediaObject(f) } }) } }; GspMedia.prototype.removeCursorNavigationHandler = function () { c(a.documentElement).off("keydown." + this.Data.Settings.ClientId) }; GspMedia.prototype.onMetaUpdate = function (g, f) { if (f.MetaItem.MTypeId == 29) { this.render() } else { if (f.MetaItem.MTypeId == 112) { this.render() } } }; GspMedia.prototype.preloadImages = function () { var e = c.map(this.Data.Album.MediaItems, function (g) { for (var f = 0; f < g.Views.length; f++) { if ((g.Views[f].ViewType == Gsp.Constants.MimeType_Image) && (g.Views[f].ViewSize == Gsp.Constants.ViewSize_Optimized)) { return g.Views[f].Url } } }); c(e).each(function () { c("<img>").attr("src", this) }) }; GspMedia.prototype.buildMediaToolbar = function () { var f = this; if (!this.Data.Settings.ShowMediaObjectToolbar) { c(".gsp_mvToolbar", this.$target).hide(); return null } var e = new GspMediaToolbar(); e.EmbedButton = c(".gsp_mvTbEmbed", this.$target); e.SlideshowButton = c(".gsp_mvTbSlideshow", this.$target); e.MoveButton = c(".gsp_mvTbMove", this.$target); e.CopyButton = c(".gsp_mvTbCopy", this.$target); e.RotateButton = c(".gsp_mvTbRotate", this.$target); e.DeleteButton = c(".gsp_mvTbDelete", this.$target); if (this.Data.Settings.ShowUrlsButton) { var g = c(".gsp_mo_share_dlg", this.$target); g.dialog({ appendTo: "#" + f.Data.Settings.ClientId, autoOpen: false, draggable: false, resizable: false, closeOnEscape: true, dialogClass: "gsp_mo_share_dlg_container", width: 420, minHeight: 0, show: "fade", hide: "fade", position: { my: "left top", at: "left bottom", of: c(".gsp_mvTbEmbed", this.$target) }, open: function (k, j) { c(this).parent().focus(); c(a).on("click", function (l) { if (c(l.target).parents(".gsp_mo_share_dlg_container").length == 0) { g.dialog("close"); c(this).unbind(l) } }) } }); c("input.gsp_mo_share_dlg_ipt,textarea.gsp_mo_share_dlg_ipt").click(function (j) { c(this).select() }); c(".gsp_mo_share_dlg_ipt_select", g).on("change", function (k) { var j = function (m) { var l = f.Data.App.AppUrl + "/" + f.Data.App.GalleryResourcesPath + "/handler/getmedia.ashx?moid=" + f.Data.MediaItem.Id + "&dt=" + m + "&g=" + f.Data.Settings.GalleryId + "&sa=1"; return l }; c(".gsp_mo_share_dwnld", g).attr("href", j(this.value)) }).change(); e.EmbedButton.button({ text: false, icons: { primary: "gsp-ui-icon gsp-ui-icon-embed" } }).click(function (j) { if (g.dialog("isOpen") === true) { g.dialog("close") } else { g.dialog("open") } return false }) } else { e.EmbedButton.hide() } if (this.Data.Settings.ShowSlideShowButton) { var h = function () { var k = { text: false, label: f.Data.Resource.MoTbSsStart, icons: { primary: "gsp-ui-icon gsp-ui-icon-ssplay" } }; var j = { text: false, label: f.Data.Resource.MoTbSsStop, icons: { primary: "gsp-ui-icon gsp-ui-icon-sspause" } }; e.SlideshowButton.prop("checked", f.Data.Settings.SlideShowIsRunning).button(f.Data.Settings.SlideShowIsRunning ? j : k).click(function (l) { if (c(this).prop("checked")) { if (f.startSlideshow()) { c(this).removeClass("gsp_mvTbSlideshow_pause").addClass("gsp_mvTbSlideshow_play").button("option", j) } } else { f.stopSlideshow(); c(this).removeClass("gsp_mvTbSlideshow_play").addClass("gsp_mvTbSlideshow_pause").button("option", k) } }) }; var i = function () { e.SlideshowButton.button({ text: false, icons: { primary: "gsp-ui-icon gsp-ui-icon-ssplay" } }).click(function (j) { f.startSlideshow(); return false }) }; if (this.Data.Settings.SlideShowType == "Inline") { h() } else { if (this.Data.Settings.SlideShowType == "FullScreen") { i() } else { c.gspShowMsg("Error", "Unrecognized SlideShowType value: " + this.Data.Settings.SlideShowType, { msgType: "error", autoCloseDelay: 0 }) } } } else { e.SlideshowButton.add(e.SlideshowButton.next()).hide() } if (this.Data.Settings.ShowTransferMediaObjectButton && this.Data.Album.Permissions.DeleteMediaObject && this.Data.User.CanAddMediaToAtLeastOneAlbum) { e.MoveButton.button({ text: false, icons: { primary: "gsp-ui-icon gsp-ui-icon-move" } }).click(function (j) { b.location = Gsp.GetUrl(b.location.href, { g: "task_transferobject", moid: f.Data.MediaItem.Id, tt: "move", skipstep1: "true" }); j.preventDefault() }) } else { e.MoveButton.hide() } if (this.Data.Settings.ShowCopyMediaObjectButton && this.Data.User.CanAddMediaToAtLeastOneAlbum) { e.CopyButton.button({ text: false, icons: { primary: "gsp-ui-icon gsp-ui-icon-copy" } }).click(function (j) { b.location = Gsp.GetUrl(b.location.href, { g: "task_transferobject", moid: f.Data.MediaItem.Id, tt: "copy", skipstep1: "true" }); j.preventDefault() }) } else { e.CopyButton.hide() } if (this.Data.Settings.ShowRotateMediaObjectButton && this.Data.Album.Permissions.EditMediaObject && !this.Data.Settings.IsReadOnlyGallery) { e.RotateButton.button({ text: false, icons: { primary: "gsp-ui-icon gsp-ui-icon-rotate" } }).click(function (j) { b.location = Gsp.GetUrl(b.location.href, { g: "task_rotateimage", moid: f.Data.MediaItem.Id }); j.preventDefault() }) } else { e.RotateButton.hide() } if (this.Data.Settings.ShowDeleteMediaObjectButton && this.Data.Album.Permissions.DeleteMediaObject) { e.DeleteButton.button({ text: false, icons: { primary: "gsp-ui-icon gsp-ui-icon-delete" } }).click(function (k) { var j = function (m) { f.Data.Album.MediaItems.gspRemove(m); if (m >= f.Data.Album.MediaItems.length) { m = f.Data.Album.MediaItems.length - 1 } if (m >= 0) { c.each(f.Data.Album.MediaItems, function (n, o) { o.Index = n + 1 }); f.Data.Album.NumGalleryItems--; f.Data.Album.NumMediaItems--; f.Data.MediaItem = f.Data.Album.MediaItems[m - 1]; f.showNextMediaObject() } else { f.Data.MediaItem = null } }; if (confirm(f.Data.Resource.MediaDeleteConfirm)) { var l = f.Data.MediaItem.Id; j(c.inArray(f.Data.MediaItem, f.Data.Album.MediaItems)); b.Gsp.DataService.deleteMediaObject(l, null, function () { if (f.Data.MediaItem == null) { f.redirectToAlbum() } }) } k.preventDefault() }) } else { e.DeleteButton.hide() } return e }; b.GspMediaToolbar = function () { this.EmbedButton = null; this.SlideshowButton = null; this.MoveButton = null; this.CopyButton = null; this.RotateButton = null; this.DeleteButton = null }; c.fn.gspThumbnails = function (i, h) { var g = this; var f = this; var e = function () { var q = function () { c("#" + h.Settings.ThumbnailClientId).on("metaUpdate." + h.Settings.ClientId, function (z, x) { var y = c(".ui-selected", this); var w = m(); w.filter(function () { return y.is("div[data-id=" + c(this).data("id") + "][data-it=" + c(this).data("it") + "]") }).addClass("ui-selected"); var v = c(".thmb", g).parent().selectable("option", "stop"); if (typeof (v) == "function") { v() } }) }; var m = function () { g.html(c.render[i](h)); var v = c(".thmb", g); r(v); k(v); o(v); return v }; var p = function () { c(".gsp_abm_sum_pvt_trigger", f).click(function (w) { var x = this; var v = function () { h.Album.IsPrivate = !h.Album.IsPrivate; c(x).find("img").attr("src", h.Album.IsPrivate ? h.App.SkinPath + "/images/lock-active-s.png" : h.App.SkinPath + "/images/lock-s.png").attr("title", h.Album.IsPrivate ? h.Resource.AbmIsPvtTt : h.Resource.AbmNotPvtTt) }; if (!h.Settings.AllowAnonBrowsing) { c.gspShowMsg(h.Resource.AbmAnonDisabledTitle, h.Resource.AbmAnonDisabledMsg); return false } f.addClass("gsp_wait"); v(); Gsp.DataService.saveAlbum(h.Album, null, function () { var y = (h.Album.IsPrivate ? h.Resource.AbmIsPvtTt : h.Resource.AbmNotPvtTt); c.gspShowMsg(h.Resource.AbmPvtChngd, y); f.removeClass("gsp_wait") }, function (y) { v(); c.gspShowMsg("Cannot Edit Album", y.responseText, { msgType: "error", autoCloseDelay: 0 }); f.removeClass("gsp_wait") }); return false }) }; var s = function () { var v = function () { f.addClass("gsp_wait"); c.ajax({ type: "POST", url: url = b.Gsp.AppRoot + "/api/albums/" + h.Album.Id + "/sortalbum?sortByMetaNameId=" + h.Album.SortById + "&sortAscending=" + h.Album.SortUp, success: function () { c.ajax({ type: "GET", url: b.Gsp.AppRoot + "/api/albums/" + h.Album.Id + "/galleryitems", success: function (z) { h.Album.GalleryItems = z; m(); f.removeClass("gsp_wait") }, error: function (z) { c.gspShowMsg("Action Aborted", z.responseText, { msgType: "error", autoCloseDelay: 0 }); f.removeClass("gsp_wait") } }) }, error: function (z) { c.gspShowMsg("Action Aborted", z.responseText, { msgType: "error", autoCloseDelay: 0 }); f.removeClass("gsp_wait") } }) }; var y = function () { var z = function () { var A = {}; A.Album = Gsp.deepCopy(h.Album); A.SortByMetaNameId = h.Album.SortById; A.SortAscending = h.Album.SortUp; A.Album.Albums = null; A.Album.MediaItems = null; A.Album.MetaItems = null; if (A.Album.Id > Gsp.Constants.IntMinValue) { A.Album.GalleryItems = null } return A }; f.addClass("gsp_wait"); c.ajax(({ type: "POST", url: b.Gsp.AppRoot + "/api/albums/getsortedalbum", data: JSON.stringify(z()), contentType: "application/json; charset=utf-8", dataType: "json", success: function (A) { h.Album.GalleryItems = A; m(); f.removeClass("gsp_wait") }, error: function (A) { c.gspShowMsg("Action Aborted", A.responseText, { msgType: "error", autoCloseDelay: 0 }); f.removeClass("gsp_wait") } })) }; var x = function () { if (h.Album.Permissions.EditAlbum && h.Album.VirtualType == Gsp.Constants.VirtualType_NotVirtual) { v() } else { y() } }; var w = function () { return (h.Album.SortUp ? '<span class="ui-icon ui-icon-circle-arrow-n" />' : '<span class="ui-icon ui-icon ui-icon-circle-arrow-s" />') }; c(".gsp_abm_sum_rs", f).button({ text: false, icons: { primary: "ui-icon-arrowthick-2-n-s" } }).click(function () { h.Album.SortUp = !h.Album.SortUp; x(); return false }).next().button({ text: false, icons: { primary: "ui-icon-triangle-1-s" } }).click(function () { var z = c(this).parent().next().show().position({ my: "right top", at: "right bottom", of: this }); c(a).one("click", function () { z.hide() }); return false }).parent().buttonset().next().hide().menu().children().click(function () { var z = c("a", c(this)).data("id"); if (z != null) { h.Album.SortUp = true; h.Album.SortById = z; x() } return false }).children("a[data-id=" + h.Album.SortById + "]").parent().prepend(w()) }; var l = function () { var v = c(".gsp_abm_sum_share_dlg", f); v.dialog({ appendTo: "#" + h.Settings.ClientId, autoOpen: false, draggable: false, resizable: false, closeOnEscape: true, dialogClass: "gsp_abm_sum_share_dlg_container", width: 420, minHeight: 0, show: "fade", hide: "fade", position: { my: "right top", at: "right bottom", of: c(".gsp_abm_sum_sa_trigger", f) }, open: function (x, w) { c(this).parent().focus(); c(a).on("click", function (y) { if (c(y.target).parents(".gsp_abm_sum_share_dlg_container").length == 0) { v.dialog("close"); c(this).unbind(y) } }) } }); c(".gsp_abm_sum_sa_trigger", f).click(function (w) { if (v.dialog("isOpen") === true) { v.dialog("close") } else { v.dialog("option", "hide", null).dialog("close").dialog("option", "hide", "fade"); v.dialog("open") } return false }); c("input.gsp_abm_sum_share_dlg_ipt").click(function (w) { c(this).select() }) }; var j = function () { c(".gsp_abm_sum_ss_trigger", f).click(function (y) { var x = function () { if (h.Album != null && h.Album.GalleryItems != null) { return c.grep(h.Album.GalleryItems, function (z) { return z.ItemType === b.Gsp.Constants.ItemType_Image })[0] } else { return null } }; var w = x(); if (w != null) { var v = { aid: null, moid: null, ss: 1 }; v.moid = w.Id; b.location = Gsp.GetUrl(a.location.href, v) } else { c.gspShowMsg(h.Resource.MoNoSsHdr, h.Resource.MoNoSsBdy, { msgType: "info" }) } return false }) }; var u = function () { var v = c(".gsp_abm_sum_ownr_dlg", f); v.dialog({ appendTo: "#" + h.Settings.ClientId, autoOpen: false, draggable: false, resizable: false, closeOnEscape: true, dialogClass: "gsp_abm_sum_ownr_dlg_container", width: 420, minHeight: 0, show: "fade", hide: "fade", position: { my: "left top", at: "left bottom", of: c(".gsp_abm_sum_ownr_trigger", f) }, open: function (y, x) { c(".gsp_abm_sum_ownr_dlg_o > span", c(this)).gspTooltip({ title: h.Resource.AbmOwnr, content: h.Resource.AbmOwnrTtDtl }); var w = this; setTimeout(function () { c(w).parent().find(".gsp_abm_sum_ownr_dlg_ipt").focus() }, 500); c(a).on("click", function (z) { if (c(z.target).parents(".gsp_abm_sum_ownr_dlg_container").length == 0) { v.dialog("close"); c(this).unbind(z) } }) }, buttons: { Save: function () { var w = h.Album.Owner; h.Album.Owner = c(this).find(".gsp_abm_sum_ownr_dlg_ipt").val(); if (w != h.Album.Owner) { f.addClass("gsp_wait"); Gsp.DataService.saveAlbum(h.Album, null, function () { if (Gsp.isNullOrEmpty(h.Album.Owner)) { c.gspShowMsg(h.Resource.AbmOwnrChngd, h.Resource.AbmOwnrClrd.format(w)) } else { c.gspShowMsg(h.Resource.AbmOwnrChngd, h.Resource.AbmOwnrChngdDtl.format(h.Album.Owner)) } f.removeClass("gsp_wait") }, function (x) { h.Album.Owner = w; c.gspShowMsg("Cannot Edit Album", x.responseText, { msgType: "error", autoCloseDelay: 0 }); f.removeClass("gsp_wait") }) } c(this).dialog("close") }, Cancel: function () { c(this).dialog("close") } } }); c(".gsp_abm_sum_ownr_trigger", f).click(function (w) { if (v.dialog("isOpen") === true) { v.dialog("close") } else { v.dialog("option", "hide", null).dialog("close").dialog("option", "hide", "fade"); v.dialog("open") } return false }) }; var o = function (v) { c(".gsp_abm_sum", f).click(function () { v.removeClass("ui-selected"); h.ActiveGalleryItems = [b.Gsp.convertAlbumToGalleryItem(h.Album)]; f.trigger("select." + h.Settings.ClientId, [h.ActiveGalleryItems]) }); p(); s(); l(); j(); u() }; var k = function (y) { if (h.Settings.PageSize <= 0 || h.Album.GalleryItems.length <= h.Settings.PageSize) { return } var v; var A = { start: 0, end: 0 }; y.hide(); var z = { format: "[< c >]", page: null, lapping: 0, perpage: h.Settings.PageSize, onSelect: function (B) { var C = this.slice; y.slice(A[0], A[1]).hide(); y.slice(C[0], C[1]).fadeIn(); A = C; return true }, onFormat: function (B) { switch (B) { case "block": return '<span class="gsp_pagerText">' + h.Resource.AbmPgrStatus.format(this.value, this.pages) + "</span>"; case "next": if (this.active) { return '<a href="#' + this.value + '" title="' + h.Resource.AbmPgrNextTt + '">›</a>' } else { return '<span class="gsp_disabled">›</span>' } case "prev": if (this.active) { return '<a href="#' + this.value + '" title="' + h.Resource.AbmPgrPrevTt + '">‹</a>' } else { return '<span class="gsp_disabled">‹</span>' } case "first": if (this.active) { return '<a href="#' + this.value + '" title="' + h.Resource.AbmPgrFirstTt + '" class="gsp_first-child">«</a>' } else { return '<span class="gsp_disabled gsp_first-child">«</span>' } case "last": if (this.active) { return '<a href="#' + this.value + '" title="' + h.Resource.AbmPgrLastTt + '" class="gsp_last-child">»</a>' } else { return '<span class="gsp_disabled gsp_last-child">»</span>' } } } }; var x = c(); var w = '<div class="gsp_pager"></div>'; if (h.Settings.PagerLocation == "Top" || h.Settings.PagerLocation == "TopAndBottom") { x = c(w).prependTo(g) } if (h.Settings.PagerLocation == "Bottom" || h.Settings.PagerLocation == "TopAndBottom") { x = x.add(c(w).appendTo(g)) } v = x.paging(h.Album.GalleryItems.length, z); c(b).on("hashchange", (function () { if (b.location.hash) { v.setPage(b.location.hash.substr(1)) } else { v.setPage(1) } })); c(b).trigger("hashchange") }; var t = function (x, w) { var v = c(".ui-selected", g).map(function () { var y = c(this); var A = y.data("id"); var z = y.data("it"); return c.map(h.Album.GalleryItems, function (B) { return (B.Id === A && B.ItemType === z ? B : null) })[0] }).get(); h.ActiveGalleryItems = v.length > 0 ? v : [b.Gsp.convertAlbumToGalleryItem(h.Album)]; f.trigger("select." + h.Settings.ClientId, [h.ActiveGalleryItems]) }; var r = function (v) { v.equalSize(); c(".gsp_go_t", v).css("width", ""); v.parent().selectable({ stop: t }); c("a", g).mousedown(function (w) { w.stopImmediatePropagation(); return false }) }; var n = function () { c.views.converters({ stripHtmlAndTruncate: function (x) { var w = x.replace(/(<[^<>]*>)/g, ""); var v = h.Settings.MaxThmbTitleDisplayLength; return (w.length > v ? Gsp.escape(w.substr(0, v)) + "..." : Gsp.escape(w)) } }) }; if (!h.Album.GalleryItems) { c.gspShowMsg("Cannot Render Album", "<p>Cannot render the album thumbnails. Navigate to an album and then return to this page.</p><p>You'll know you got it right when you see 'aid' In the URL's query string.</p><p>ERROR: data.Album.GalleryItems is null.</p>", { msgType: "error", autoCloseDelay: 0 }); return } n(); q(); m() }; e(); return this }; c.fn.gspMeta = function (g, f) { var e = this; return this.each(function () { if (!c.data(this, "plugin_gspMeta")) { var h = GspMeta(); h.init(e, g, f); c.data(this, "plugin_gspMeta", h) } }) }; c.fn.gspMeta.defaults = { tmplName: "" }; b.GspMeta = function () { var i, v, r, p = function (y, x, w) { i = y; v = x; r = c.extend({}, c.fn.gspMeta.defaults, w); g(); c("#" + v.Settings.MediaClientId).on("next." + v.Settings.ClientId + " previous." + v.Settings.ClientId + " mediaUpdate." + v.Settings.ClientId, f); c("#" + v.Settings.ThumbnailClientId).on("select." + v.Settings.ClientId, f) }, g = function () { i.removeClass("gsp_wait").html(c.render[r.tmplName](v)); c(".gsp_m1Row:last").after('<tr class="gsp_mSep"><td colspan="2"></td></tr>'); var w = v.ActiveMetaItems.length > 0; var x = function () { var z, y; c.each(v.ActiveGalleryItems, function () { if (this.IsAlbum) { z = true } else { y = true } }); return ((!z || v.Album.Permissions.EditAlbum) && (!y || v.Album.Permissions.EditMediaObject)) }; if (w && (v.Album.VirtualType == Gsp.Constants.VirtualType_NotVirtual) && x()) { k() } q(); m() }, q = function () { c.each(["tag", "people"], function (x, y) { var z = c(".gsp_meta tr td.gsp_m" + y + ":not(.gsp_editableContent)", i); var w = c.map(z.text().split(","), function (C) { var A = C.trim(); if (A.length > 0) { var B = { title: null, tag: null, people: null, search: null, aid: null, moid: null }; B[y] = A.replace(/\s+\(\d+\)$/gi, ""); return '<a href="' + Gsp.GetUrl(b.location.href, B) + '" class="gsp_mtaglink">' + A + "</a>" } return null }); z.text("").html(w) }) }, m = function () { var w = c(".gsp_meta tr[data-iseditable=true] td.gsp_v .gsp_rating", i); if (w.length > 0 && (v.User.IsAuthenticated || v.Settings.AllowAnonymousRating)) { w.rateit({ min: 0, max: 5, resetable: false }).bind("rated", function (A, y) { i.addClass("gsp_wait"); var x = o(c(A.target).closest(".gsp_m2Row").data("id")).MTypeId; var z = { GalleryItems: v.ActiveGalleryItems, MetaItem: { MTypeId: x, Value: y } }; Gsp.DataService.saveMeta(z, function () { i.removeClass("gsp_wait") }, function (B) { }, function (B) { c.gspShowMsg("Cannot Save Changes", B.responseText, { msgType: "error", autoCloseDelay: 0 }) }) }) } else { c(".gsp_rating", i).rateit({ min: 0, max: 5, resetable: false, readonly: true }) } }, k = function () { var C = { type: "text", rows: 1, width: "auto", widthBuffer: 6, tooltip: v.Resource.MediaCaptionEditTt, event: "click", cssclass: "gsp_editableContentForm", indicator: '<img class="gsp_wait_img" src="' + v.App.SkinPath + '/images/wait-squares.gif" />', style: "display:block", placeholder: v.Resource.MetaEditPlaceholder, submitonenter: true, onblur: "submit", data: function (G, F) { return t(G, F, c(this)) }, oneditbegin: function (G, F, H) { return e(c(F), H) }, oneditend: function () { h(c(this)) }, onreset: function (F, G) { n(c(G)) }, onsubmit: j, oncomplete: function (F) { return s(c(this), F) }, callback: function (G, F) { l(c(this), true) }, ajaxoptions: { type: "PUT", contentType: "application/json;charset=utf-8" } }; var B = Gsp.deepCopy(C); B.type = "textarea"; B.rows = "3"; B.submitonenter = false; var y = Gsp.deepCopy(C); y.onblur = ""; var z = c(".gsp_meta tr[data-iseditable=true] td.gsp_v", i).addClass("gsp_editableContent"); var w = z.filter(".gsp_mCaption"); var D = z.filter(".gsp_mtag,.gsp_mpeople"); var x = z.filter(".gsp_mrating"); var E = z.not(w).not(D).not(x); w.editable(b.Gsp.AppRoot + "/api/galleryitemmeta", B); E.editable(b.Gsp.AppRoot + "/api/galleryitemmeta", C); l(w, true); l(E, true); var A = function (F) { return F.contents().filter(function () { return this.nodeType == 3 }).text().trim().replace(/\s+\(\d+\)$/gi, "") }; D.each(function () { c(this).html("<input class='gsp_mTag_ipt' value='" + Gsp.escape(c(this).text()) + "' placeholder='" + v.Resource.MetaEditPlaceholder + "' />"); var F = false; var H = c("input", c(this)); var G = H.closest(".gsp_mtag").length > 0 ? "tags" : "people"; H.autoSuggest(b.Gsp.AppRoot + "/api/meta/" + G, { extraParams: "&galleryId=" + v.Settings.GalleryId, preFill: H.val(), startText: v.Resource.MetaEditPlaceholder, selectionClick: function (J) { var K = J.parents(".gsp_mtag").length == 0 ? null : A(J); var I = J.parents(".gsp_mpeople").length == 0 ? null : A(J); b.location = Gsp.GetUrl(b.location.href, { title: null, tag: K, people: I, search: null, aid: null, moid: null }) }, selectionAdded: function (L) { if (F) { L.addClass("gsp_wait_spinner"); var K = L.contents().filter(function () { return this.nodeType == 3 }).text().trim(); var I = o(L.closest(".gsp_mRowDtl").data("id")).MTypeId; var J = { GalleryItems: v.ActiveGalleryItems, MetaItem: { MTypeId: I, Value: K } }; Gsp.DataService.saveMeta(J, function () { L.removeClass("gsp_wait_spinner") }, function (N) { if (v.MediaItem != null) { var M = Gsp.findMetaItem(v.MediaItem.MetaItems, N.MetaItem.MTypeId); if (M != null) { M.Value += ", " + N.MetaItem.Value } } if (v.ActiveGalleryItems.length > 1) { var O = L.contents().filter(function () { return this.nodeType == 3 })[0]; O.textContent = O.textContent + " (" + v.ActiveGalleryItems.length + ")" } }, function (M) { c.gspShowMsg("Cannot Save Changes", M.responseText, { msgType: "error", autoCloseDelay: 0 }) }) } }, selectionRemoved: function (K) { K.animate({ opacity: 0.2 }, "slow", function () { K.addClass("gsp_wait_spinner") }); var J = A(K); var I = o(K.closest(".gsp_mRowDtl").data("id")).MTypeId; c.ajax(({ type: "DELETE", url: b.Gsp.AppRoot + "/api/galleryitemmeta", data: JSON.stringify({ GalleryItems: v.ActiveGalleryItems, MetaItem: { MTypeId: I, Value: J } }), contentType: "application/json; charset=utf-8", complete: function () { }, success: function (M) { K.remove(); if (v.MediaItem != null) { var L = Gsp.findMetaItem(v.MediaItem.MetaItems, I); if (L != null) { L.Value = c.grep(L.Value.split(/\s*,\s*/), function (N, O) { return N != J }).join(", ") } } }, error: function (L) { c.gspShowMsg("Cannot Save Changes", L.responseText, { msgType: "error", autoCloseDelay: 0 }) } })) } }); F = true }) }, o = function (w) { return c.grep(v.ActiveMetaItems, function (x) { return x.Id === w })[0] }, j = function (x, z) { var w = c(z); var A = o(w.parent().data("id")); var y = c("textarea:last, input:last, select:last", w).val().trim(); x.ajaxoptions.data = JSON.stringify({ GalleryItems: v.ActiveGalleryItems, MetaItem: { MTypeId: A.MTypeId, Value: y } }) }, f = function (B, z) { i.addClass("gsp_wait"); var A = z.length == 1 && z[0].ItemType != Gsp.Constants.ItemType_Album && v.MediaItem && v.MediaItem.Id == z[0].Id; if (A && v.MediaItem.MetaItems) { v.ActiveMetaItems = v.MediaItem.MetaItems; g(); return } if (z.length == 1) { var y = z[0]; var w = (y.ItemType == Gsp.Constants.ItemType_Album ? "albums" : "mediaitems"); var x = b.Gsp.AppRoot + "/api/" + w + "/" + y.Id + "/meta"; c.ajax({ url: x, dataType: "json", success: function (C) { v.ActiveMetaItems = C; if (v.MediaItem != null) { v.MediaItem.MetaItems = C } g() }, statusCode: { 404: function () { v.ActiveMetaItems = v.Album.MetaItems; g() } } }) } else { if (z.length < 1) { v.ActiveMetaItems = []; g() } else { c.ajax(({ type: "POST", url: b.Gsp.AppRoot + "/api/galleryitemmeta/galleryitems", data: JSON.stringify(z), contentType: "application/json; charset=utf-8", dataType: "json", success: function (C) { v.ActiveMetaItems = C; if (v.MediaItem != null) { v.MediaItem.MetaItems = C } g() }, error: function (C) { c.gspShowMsg("Cannot Retrieve Data", C.responseText, { msgType: "error", autoCloseDelay: 0 }) } })) } } }, e = function (w, x) { l(w, false); return (x.target.tagName != "A") }, t = function (z, y, w) { var x = o(w.parent().data("id")); if (x && x.Value) { return x.Value } else { return z } }, h = function (w) { }, n = function (w) { u(w) }, s = function (y, A) { var x = function () { for (var F = 0; F < z.GalleryItems.length; F++) { var B = z.GalleryItems[F]; var G; var I = Gsp.findGalleryItem(v, B.Id, B.ItemType); if (I != null) { switch (z.MetaItem.MTypeId) { case 29: I.Title = z.MetaItem.Value; break; case 41: I.Caption = z.MetaItem.Value; break } } var H = Gsp.findMediaItem(v, B.Id, B.ItemType); if (H != null) { switch (z.MetaItem.MTypeId) { case 29: H.Title = z.MetaItem.Value; break; case 112: var C = Gsp.getView(H, b.Gsp.Constants.ViewSize_External); if (C) { C.HtmlOutput = z.MetaItem.Value } break } G = H.MetaItems } var E = Gsp.findAlbum(v, B.Id, B.ItemType); if (E != null) { switch (z.MetaItem.MTypeId) { case 29: E.Title = z.MetaItem.Value; break; case 41: E.Caption = z.MetaItem.Value; break } G = E.MetaItems } if (G != null) { var D = Gsp.findMetaItem(G, z.MetaItem.MTypeId); if (D != null) { D.Value = z.MetaItem.Value } } } }; u(y); var w = o(c(y).parent().data("id")); var z = c.parseJSON(A); if (z.ActionResult && z.ActionResult.Status == "Error") { c.gspShowMsg(z.ActionResult.Title, z.ActionResult.Message, { msgType: "error", autoCloseDelay: 0 }); return w.Value } w.Value = z.MetaItem.Value; x(); c("#" + v.Settings.MediaClientId).trigger("metaUpdate." + v.Settings.ClientId, [z]); c("#" + v.Settings.ThumbnailClientId).trigger("metaUpdate." + v.Settings.ClientId, [z]); if (w.MTypeId == 112) { return b.Gsp.htmlEncode(w.Value) } else { return w.Value } }, u = function (w) { l(w, true) }, l = function (x, w) { c.each(x, function (z, A) { var y = c(A); if (w) { y.hover(function () { y.removeClass("gsp_editableContent").addClass("gsp_editableContentHover") }, function () { y.removeClass("gsp_editableContentHover").addClass("gsp_editableContent") }) } else { y.removeClass("gsp_editableContentHover").addClass("gsp_editableContent").unbind("mouseenter").unbind("mouseleave") } }) }; return { init: p } }; c.fn.gspHeader = function (i, h) { var g = this; var f = this; var e = function () { var l = function () { g.html(c.render[i](h)) }; var j = function () { var m; if (h.User.IsAuthenticated) { c(".gsp_logoffLink", f).click(function (o) { o.preventDefault(); o.stopPropagation(); Gsp.DataService.logOff(function () { Gsp.ReloadPage() }) }) } else { m = c("#" + h.Settings.ClientId + "_loginDlg"); m.dgLoginWidth = 420; m.dialog({ appendTo: "#" + h.Settings.ClientId, autoOpen: false, draggable: false, resizable: false, closeOnEscape: true, dialogClass: "gsp_loginDlgContainer", width: m.dgLoginWidth, minHeight: 0, show: "fade", hide: "fade", open: function () { setTimeout(function () { c(".gsp_login_textbox:first", m).focus() }, 50) } }); var n = function (o) { c(".gsp_createuser input[data-required=true]").prop("required", !o) }; c(".gsp_login_trigger", f).click(function (o) { if (m.dialog("isOpen") === true) { m.dialog("close"); n(false) } else { m.dialog("option", "hide", null).dialog("close").dialog("option", "hide", "fade"); m.dialog("option", "position", [c(b).width() - m.dgLoginWidth - 20, o.pageY + 30]); m.dialog("open"); n(true) } return false }); c(".gsp_login_textbox", m).on("keydown", function (o) { if (o.keyCode == 13) { c(".gsp_login_button", m).click(); return false } else { return true } }); c(".gsp_login_button", m).button(); c("body").bind("click", function (o) { if (m.dialog("isOpen") === true && !c(o.target).is(".ui-dialog, a") && !c(o.target).closest(".ui-dialog").length) { m.dialog("close"); n(false) } }) } }; var k = function () { var m; if (h.Settings.ShowSearch) { m = c("#" + h.Settings.ClientId + "_searchDlg"); m.dgSearchWidth = 420; m.dialog({ appendTo: "#" + h.Settings.ClientId, autoOpen: false, draggable: false, resizable: false, closeOnEscape: true, dialogClass: "gsp_searchDlgContainer", width: m.dgSearchWidth, minHeight: 0, show: "fade", hide: "fade", open: function (n, o) { setTimeout(function () { c(".gsp_searchbox", m).focus() }, 50) } }); c(".gsp_search_trigger", f).click(function (n) { if (m.dialog("isOpen") === true) { m.dialog("close") } else { m.dialog("option", "hide", null).dialog("close").dialog("option", "hide", "fade"); m.dialog("option", "position", [c(b).width() - m.dgSearchWidth - 20, n.pageY + 30]); m.dialog("open") } return false }); c(".gsp_searchbutton", m).on("click", function (s) { var q = function (v) { var u = ""; var w; c.each(v.split(""), function (x, y) { if (y == '"' || y == "'") { w = !w } u += (!w && y == " " ? "+" : y) }); return u }; s.preventDefault(); s.stopPropagation(); var p = 3; var o = c(".gsp_searchbox", m).val(); if (o.length >= p) { var t = c("[name=" + h.Settings.ClientId + "_searchType]:checked").val(); var r = { title: null, tag: null, people: null, search: null, aid: null, moid: null }; r[t] = q(o); b.location = Gsp.GetUrl(b.location.href, r) } else { var n = c(".gsp_search_msg", m); n.css("visibility", "visible"); c(".gsp_searchbox", m).one("keydown", function () { n.css("visibility", "hidden") }).focus() } }).button(); c(".gsp_searchbox, .gsp_search_type_container input", m).on("keydown", function (n) { if (n.keyCode == 13) { c(".gsp_searchbutton", m).click(); return false } else { return true } }); c("body").bind("click", function (n) { if (m.dialog("isOpen") === true && !c(n.target).is(".ui-dialog, a") && !c(n.target).closest(".ui-dialog").length) { m.dialog("close") } }) } }; l(); j(); k() }; e(); c(a.documentElement).trigger("gspHeaderLoaded." + h.Settings.ClientId); return this }; c.fn.gspTooltip = function (f) { var e = this; return this.each(function () { if (!c.data(this, "plugin_gspTooltip")) { var g = GspTooltip(); g.init(e, f); c.data(this, "plugin_gspTooltip", g) } }) }; c.fn.gspTooltip.defaults = { title: "", content: "" }; b.GspTooltip = function () { var f, j, e, i, l = function (n, m) { f = n; j = c.extend({}, c.fn.gspTooltip.defaults, m); g(); k(); h() }, g = function () { e = c("<button class='gsp_tt_tgr'></button>"); i = c("<div class='gsp_tt_dlg'><div class='gsp_tt_dlg_title'>{0}</div><div class='gsp_tt_dlg_bdy'>{1}</div></div>".format(j.title, j.content)) }, k = function () { i.dialog({ appendTo: c(".gsp_ns").first(), autoOpen: false, draggable: false, resizable: false, closeOnEscape: true, dialogClass: "gsp_tt_dlg_container", width: 420, minHeight: 0, show: "fade", hide: "fade", position: { my: "left top", at: "left bottom", of: e }, open: function (n, m) { c(a).on("click", function (o) { if (c(o.target).parents(".gsp_tt_dlg_container").length == 0) { i.dialog("close"); c(this).unbind(o) } }) } }) }, h = function () { e.insertAfter(f).button({ text: false, icons: { primary: "gsp-ui-icon gsp-ui-icon-help" } }).click(function (m) { if (i.dialog("isOpen") === true) { i.dialog("close") } else { i.dialog("open") } return false }) }; return { init: l } }; b.GspFullScreenSlideShow = function (f, e) { var g = { on_exit: function () { } }; this.data = f; this.settings = c.extend({}, g, e) }; GspFullScreenSlideShow.prototype.startSlideShow = function () { var f = this; var e = this.data.Album.MediaItems || this.data.Album.GalleryItems; var i = c.map(e, function (j) { if (j.ItemType == Gsp.Constants.ItemType_Image) { return { thumb: Gsp.getView(j, Gsp.Constants.ViewSize_Thumbnail).Url, title: j.Title, image: Gsp.getView(j, Gsp.Constants.ViewSize_Optimized).Url } } else { return null } }); if (i.length == 0) { c.gspShowMsg(this.data.Resource.MoNoSsHdr, this.data.Resource.MoNoSsBdy, { msgType: "info" }); return false } var h = '<div class="ssControlsContainer">     <!--Thumbnail Navigation-->     <div id="prevthumb"></div>     <div id="nextthumb"></div>     <!--Arrow Navigation-->     <a id="prevslide" class="load-item"></a>     <a id="nextslide" class="load-item"></a>     <div id="thumb-tray" class="load-item">       <div id="thumb-back"></div>       <div id="thumb-forward"></div>     </div>     <!--Time Bar-->     <div id="progress-back" class="load-item">       <div id="progress-bar"></div>     </div>     <!--Control Bar-->     <div id="controls-wrapper" class="load-item">       <div id="controls">         <a id="play-button">           <img id="pauseplay" src="{0}/pause.png" /></a>         <a id="stop-button">           <img src="{0}/stop.png" /></a>         <!--Slide counter-->         <div id="slidecounter">           <span class="slidenumber"></span> / <span class="totalslides"></span>         </div>         <!--Slide captions displayed here-->         <div id="slidecaption"></div>         <!--Thumb Tray button-->         <a id="tray-button">           <img id="tray-arrow" src="{0}/button-tray-up.png" /></a>         <!--Navigation-->         <ul id="slide-list"></ul>       </div>     </div> </div>         '.format(this.data.App.SkinPath + "/images/supersized"); var g = function (j) { switch (j) { case "fade": return 1; case "slide": return 3; default: return 0 } }; c.supersized({ image_path: this.data.App.SkinPath + "/images/supersized/", slideshow: 1, autoplay: 1, auto_exit: 1, start_slide: 1, loop: 0, random: 0, slide_interval: this.data.Settings.SlideShowIntervalMs, transition: g(this.data.Settings.TransitionType), transition_speed: 500, new_window: 1, pause_hover: 0, keyboard_nav: 1, performance: 1, image_protect: 0, min_width: 0, min_height: 0, vertical_center: 1, horizontal_center: 1, fit_always: 1, fit_portrait: 1, fit_landscape: 1, slide_links: "blank", thumb_links: 1, thumbnail_navigation: 0, slides: i, progress_bar: 0, mouse_scrub: 0, html_template: h, on_destroy: function () { f.settings.on_exit.apply() } }); c("#stop-button").on("click", function () { api.destroy() }); return true }; b.GspTimer = function (g, e, f) { this.isRunning = false; this.milliseconds = e; this.callback = g; this.context = f; if (!this.context) { this.context = this } this.handle = null }; GspTimer.prototype.start = function () { var g = this; var f = this.context; var e = function () { g.callback.apply(f) }; this.handle = setInterval(e, this.milliseconds); this.isRunning = true }; GspTimer.prototype.stop = function () { clearInterval(this.handle); this.isRunning = false }; c.gspShowMsg = function (k, h, f) { var j = { msgType: "success", autoCloseDelay: 4000, width: 500 }; var g = c.extend({}, j, f); c(".gsp_msg").remove(); var i = c("<div>"); var e = "gsp_msg"; if (h) { i.append(h); e += " gsp_msgHasContent" } else { e += " gsp_msgNoContent" } e += " gsp_msg_" + g.msgType; i.dialog({ appendTo: c(".gsp_ns").first(), position: { my: "top", at: "top" }, title: k, width: g.width, height: "auto", resizable: false, dialogClass: e, show: "fade", hide: "fade" }); if (g.autoCloseDelay > 0) { setTimeout(function () { if (i.is(":ui-dialog")) { var l = a.activeElement; i.dialog("close"); l.focus() } }, g.autoCloseDelay) } }; b.Gsp.ServerTask = function (l) { var m = function () { return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (p) { var o = Math.random() * 16 | 0, n = p == "x" ? o : (o & 3 | 8); return n.toString(16) }) }; var g = { taskId: m(), timerId: 0, taskBeginData: null, taskBeginUrl: null, taskProgressUrl: null, taskAbortUrl: null, interval: 1000, userDefinedProgressCallback: null, taskAbortedCallback: null }; var i = c.extend({}, g, l); var k = this; var e = function () { if (i.taskAbortUrl != null && i.taskAbortUrl != "") { c.ajax({ url: i.taskAbortUrl, async: false, cache: false, headers: { "X-ServerTask-TaskId": i.taskId } }) } }; var h = function () { c.ajax({ url: i.taskProgressUrl, cache: false, headers: { "X-ServerTask-TaskId": i.taskId }, success: function (n) { i.timerId = b.setTimeout(h, i.interval); if (i.userDefinedProgressCallback != null) { i.userDefinedProgressCallback(n, k) } } }) }; var f = function () { _xhr = c.ajax({ url: i.taskBeginUrl, type: "POST", data: JSON.stringify(i.taskBeginData), contentType: "application/json; charset=utf-8", cache: false, headers: { "X-ServerTask-TaskId": i.taskId }, complete: function () { if (_xhr.status != 0) { return } if (i.taskAbortedCallback != null) { i.taskAbortedCallback(k) } end() }, success: function (n) { if (i.userDefinedProgressCallback != null && i.taskProgressUrl != null) { i.timerId = b.setTimeout(h, i.interval) } }, error: function (n) { c.gspShowMsg("Error starting task", n.responseText, { msgType: "error", autoCloseDelay: 0 }) } }) }; var j = function () { i.taskId = 0; b.clearTimeout(i.timerId) }; this.startTask = f; this.abortTask = e; this.resetTask = j; this.taskSettings = i } })(jQuery, window, document);